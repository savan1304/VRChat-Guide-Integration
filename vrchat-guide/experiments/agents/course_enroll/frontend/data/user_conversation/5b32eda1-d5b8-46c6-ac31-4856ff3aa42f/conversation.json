[{"user": "I am looking for an ethics course that satisfies the Master's in CS program course requirement ", "bot": "I searched for ethics courses that satisfy the Master's in CS program course requirement, but I couldn't find any information. Is there anything else I can assist you with?", "turn_context": "answer = answer(\"What ethics courses satisfy the Master's in CS program course requirement?\")\nanswer.result = None\n", "global_context": "answer = answer(\"What ethics courses satisfy the Master's in CS program course requirement?\")\nanswer.result = None\n", "system_action": [], "user_target_sp": "Answer('', {}, [], \"What ethics courses satisfy the Master's in CS program course requirement?\")", "user_target": "answer = Answer('', {}, [], \"What ethics courses satisfy the Master's in CS program course requirement?\")", "user_target_suql": ""}, {"user": "Find me a course that satisfied the significant implementation requirement for computer science and can be taken in the Fall", "bot": "I found some courses that satisfy the significant implementation requirement for computer science and can be taken in the Fall:\n\n1. **CS 148** - Introduction to Computer Graphics and Imaging\n2. **CS 221** - Artificial Intelligence: Principles and Techniques\n3. **CS 330** - Deep Multi-task and Meta Learning\n4. **CS 248B** - Fundamentals of Computer Graphics: Animation and Simulation\n5. **CS 145** - Data Management and Data Systems\n\nCould you please provide me with the details of the courses you want to take?", "turn_context": "answer = answer('What courses satisfy the significant implementation requirement for computer science and can be taken in the Fall?')\nanswer.result = [{'course_id': 105678, 'course_codes': ['CS 148'], 'title': 'Introduction to Computer Graphics and Imaging'}, {'course_id': 105730, 'course_codes': ['CS 221'], 'title': 'Artificial Intelligence: Principles and Techniques'}, {'course_id': 221537, 'course_codes': ['CS 330'], 'title': 'Deep Multi-task and Meta Learning'}, {'course_id': 105776, 'course_codes': ['CS 248B'], 'title': 'Fundamentals of Computer Graphics: Animation and Simulation'}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems'}]\nmain = Main()\n", "global_context": "answer = answer('What courses satisfy the significant implementation requirement for computer science and can be taken in the Fall?')\nanswer.result = [{'course_id': 105678, 'course_codes': ['CS 148'], 'title': 'Introduction to Computer Graphics and Imaging'}, {'course_id': 105730, 'course_codes': ['CS 221'], 'title': 'Artificial Intelligence: Principles and Techniques'}, {'course_id': 221537, 'course_codes': ['CS 330'], 'title': 'Deep Multi-task and Meta Learning'}, {'course_id': 105776, 'course_codes': ['CS 248B'], 'title': 'Fundamentals of Computer Graphics: Animation and Simulation'}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems'}]\nmain = Main()\n", "system_action": ["Report(answer, answer.result)", "AskField(main, courses_to_take, The courses that the student wants to take)"], "user_target_sp": "Answer(\"SELECT c.course_id, c.course_codes, c.title FROM courses c JOIN offerings o ON c.course_id = o.course_id WHERE c.significant_implementation_requirement = TRUE AND o.season = 'autumn' LIMIT 5;\", {}, ['courses', 'offerings'], 'What courses satisfy the significant implementation requirement for computer science and can be taken in the Fall?')", "user_target": "answer = Answer(\"SELECT c.course_id, c.course_codes, c.title FROM courses c JOIN offerings o ON c.course_id = o.course_id WHERE c.significant_implementation_requirement = TRUE AND o.season = 'autumn' LIMIT 5;\", {}, ['courses', 'offerings'], 'What courses satisfy the significant implementation requirement for computer science and can be taken in the Fall?')", "user_target_suql": "SELECT c.course_id, c.course_codes, c.title FROM courses c JOIN offerings o ON c.course_id = o.course_id WHERE c.significant_implementation_requirement = TRUE AND o.season = 'autumn' LIMIT 5;"}, {"user": "Which of the courses above would take the least amount of time per week?", "bot": "I checked which of the courses CS 148, CS 221, CS 330, CS 248B, and CS 145 would take the least amount of time per week. The course that would take the least amount of time per week is **CS 148 - Introduction to Computer Graphics and Imaging**, with an average of 8.79 hours spent per week. \n\nCould you please provide me with the details of the courses you want to take?", "turn_context": "answer = answer('Which of the courses CS 148, CS 221, CS 330, CS 248B, and CS 145 would take the least amount of time per week?')\nanswer.result = [{'course_codes': ['CS 148'], 'course_id': 105678, 'title': 'Introduction to Computer Graphics and Imaging', 'average_hours_spent': 8.79}, {'course_codes': ['CS 145'], 'course_id': 105675, 'title': 'Data Management and Data Systems', 'average_hours_spent': 11.72}, {'course_codes': ['CS 330'], 'course_id': 221537, 'title': 'Deep Multi-task and Meta Learning', 'average_hours_spent': 13.99}, {'course_codes': ['CS 248B'], 'course_id': 105776, 'title': 'Fundamentals of Computer Graphics: Animation and Simulation', 'average_hours_spent': 14.2}, {'course_codes': ['CS 221'], 'course_id': 105730, 'title': 'Artificial Intelligence: Principles and Techniques', 'average_hours_spent': 15.84}]\n", "global_context": "answer = answer('Which of the courses CS 148, CS 221, CS 330, CS 248B, and CS 145 would take the least amount of time per week?')\nanswer.result = [{'course_codes': ['CS 148'], 'course_id': 105678, 'title': 'Introduction to Computer Graphics and Imaging', 'average_hours_spent': 8.79}, {'course_codes': ['CS 145'], 'course_id': 105675, 'title': 'Data Management and Data Systems', 'average_hours_spent': 11.72}, {'course_codes': ['CS 330'], 'course_id': 221537, 'title': 'Deep Multi-task and Meta Learning', 'average_hours_spent': 13.99}, {'course_codes': ['CS 248B'], 'course_id': 105776, 'title': 'Fundamentals of Computer Graphics: Animation and Simulation', 'average_hours_spent': 14.2}, {'course_codes': ['CS 221'], 'course_id': 105730, 'title': 'Artificial Intelligence: Principles and Techniques', 'average_hours_spent': 15.84}]\nmain = Main()\n", "system_action": ["Report(answer, answer.result)", "AskField(main, courses_to_take, The courses that the student wants to take)"], "user_target_sp": "Answer(\"SELECT course_codes, course_id, title, average_hours_spent FROM courses WHERE course_codes && ARRAY['CS 148', 'CS 221', 'CS 330', 'CS 248B', 'CS 145'] ORDER BY average_hours_spent ASC LIMIT 5;\", {}, ['courses'], 'Which of the courses CS 148, CS 221, CS 330, CS 248B, and CS 145 would take the least amount of time per week?')", "user_target": "answer = Answer(\"SELECT course_codes, course_id, title, average_hours_spent FROM courses WHERE course_codes && ARRAY['CS 148', 'CS 221', 'CS 330', 'CS 248B', 'CS 145'] ORDER BY average_hours_spent ASC LIMIT 5;\", {}, ['courses'], 'Which of the courses CS 148, CS 221, CS 330, CS 248B, and CS 145 would take the least amount of time per week?')", "user_target_suql": "SELECT course_codes, course_id, title, average_hours_spent FROM courses WHERE course_codes && ARRAY['CS 148', 'CS 221', 'CS 330', 'CS 248B', 'CS 145'] ORDER BY average_hours_spent ASC LIMIT 5;"}, {"user": "I want to take systems related courses that are available in the fall", "bot": "I checked for systems related courses available in the fall. Here are some courses you can consider:\n\n- **CS 149 - Parallel Computing**\n- **CS 242 - Programming Languages**\n- **CS 145 - Data Management and Data Systems**\n\nCould you please provide me with the details of the courses you want to take?", "turn_context": "answer = answer('What are the systems related courses available in the fall?')\nanswer.result = [{'course_id': 105679, 'course_codes': ['CS 149'], 'title': 'Parallel Computing'}, {'course_id': 105761, 'course_codes': ['CS 242'], 'title': 'Programming Languages'}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems'}]\n", "global_context": "answer = answer('What are the systems related courses available in the fall?')\nanswer.result = [{'course_id': 105679, 'course_codes': ['CS 149'], 'title': 'Parallel Computing'}, {'course_id': 105761, 'course_codes': ['CS 242'], 'title': 'Programming Languages'}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems'}]\nmain = Main()\n", "system_action": ["Report(answer, answer.result)", "AskField(main, courses_to_take, The courses that the student wants to take)"], "user_target_sp": "Answer(\"SELECT c.course_id, c.course_codes, c.title FROM courses c JOIN offerings o ON c.course_id = o.course_id WHERE 'systems' = ANY(c.breadth_requirement) AND o.season = 'autumn' LIMIT 5;\", {}, ['courses', 'offerings'], 'What are the systems related courses available in the fall?')", "user_target": "answer = Answer(\"SELECT c.course_id, c.course_codes, c.title FROM courses c JOIN offerings o ON c.course_id = o.course_id WHERE 'systems' = ANY(c.breadth_requirement) AND o.season = 'autumn' LIMIT 5;\", {}, ['courses', 'offerings'], 'What are the systems related courses available in the fall?')", "user_target_suql": "SELECT c.course_id, c.course_codes, c.title FROM courses c JOIN offerings o ON c.course_id = o.course_id WHERE 'systems' = ANY(c.breadth_requirement) AND o.season = 'autumn' LIMIT 5;"}, {"user": "How different are these courses from the one that you recommended me before?", "bot": "I searched for information on how CS 149, CS 242, and CS 145 compare to the course recommended before. Here are some details:\n\n- **CS 149 - Parallel Computing**: \n  - Focuses on parallel computing, covering both software and hardware aspects.\n  - Described as dense and challenging with a heavy workload, including programming assignments and exams.\n  - Students found the lectures engaging and informative, though some mentioned the workload is intense.\n\n- **CS 145 - Data Management and Data Systems**:\n  - An introductory database course that is highly recommended for those interested in databases and SQL.\n  - Praised for the engaging teaching style and practical in-class activities.\n  - The course workload is manageable, but some students noted it becomes more challenging in the second half.\n\nUnfortunately, I couldn't find specific details for CS 242 in the current search results. \n\nCould you please provide me with the details of the courses you want to take?", "turn_context": "answer = answer('How different are CS 149, CS 242, and CS 145 from the course recommended before?')\nanswer.result = [{'course_id': 105679, 'course_codes': ['CS 149'], 'title': 'Parallel Computing', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': \"The document provides a collection of reviews and opinions about a course focused on parallel computing, taught by Professors Kayvon and Kunle. Kayvon covers the software aspect of the course, while Kunle focuses on hardware. The course is described as dense and challenging, with a heavy workload that includes demanding programming assignments and written homework. Many students found the lectures engaging and informative, particularly those by Professor Kayvon, although some felt that Professor Kunle's teaching style assumed more prior knowledge. The course is noted for its rigorous exams and the amount of material covered, leading to a recommendation for students to be prepared for a significant time commitment. While some reviews express frustration with the workload and pacing, others highlight the valuable knowledge gained and the course's overall quality. Overall, the course is seen as beneficial for those interested in parallel computing, but potential students are advised to consider the intense workload and difficulty level.\"}, {'course_id': 105679, 'course_codes': ['CS 149'], 'title': 'Parallel Computing', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': 'The document is a collection of student reviews and feedback about a parallel programming course. Overall, the course is described as interesting and beneficial, providing a good overview of various parallel programming paradigms. Students appreciate the programming assignments, although some find them confusing and not sufficiently challenging. There are concerns about the lack of a comprehensive textbook or reference material, as well as the incomplete lecture slides, which make studying difficult. Some students feel that the course could benefit from a more in-depth final project and better organization. While the course is generally well-received, there are criticisms regarding the teaching quality and the superficial nature of some assignments. Overall, students recommend taking the course for its breadth of material and engaging content.'}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': 'The document is a collection of reviews and feedback about an introductory database course taught by Professor Chris Re. Overall, the course is highly recommended for students interested in computer science, particularly those looking to learn about databases and SQL. Many reviewers praise the engaging teaching style of Professor Re, the helpfulness of the course staff, and the practical in-class activities that enhance understanding of the material.'}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': \"The document is a collection of student reviews and feedback about a database course taught by Peter Bailis. Overall, the course is described as a useful introduction to databases, with a manageable workload and practical knowledge gained through assignments and projects. Many students appreciated Bailis' passion for teaching and his willingness to help students, although some noted that the course was disorganized and that the teaching staff, including TAs, sometimes provided conflicting information. The first half of the course is considered easier, while the second half becomes more challenging and theoretical. Some students felt that the projects did not align well with the lecture material, and there were concerns about the clarity of instructions. Despite these issues, many students recommended the course, especially for those new to SQL or interested in software engineering. Overall, the feedback highlights both the strengths and weaknesses of the course, with a general consensus that it is a good option for students looking to learn about databases.\"}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': 'The document is a collection of student reviews and feedback about a database course taught by Professor Shiva Narayanan. The reviews express a mix of opinions, highlighting both positive and negative aspects of the course.'}]\n", "global_context": "answer = answer('How different are CS 149, CS 242, and CS 145 from the course recommended before?')\nanswer.result = [{'course_id': 105679, 'course_codes': ['CS 149'], 'title': 'Parallel Computing', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': \"The document provides a collection of reviews and opinions about a course focused on parallel computing, taught by Professors Kayvon and Kunle. Kayvon covers the software aspect of the course, while Kunle focuses on hardware. The course is described as dense and challenging, with a heavy workload that includes demanding programming assignments and written homework. Many students found the lectures engaging and informative, particularly those by Professor Kayvon, although some felt that Professor Kunle's teaching style assumed more prior knowledge. The course is noted for its rigorous exams and the amount of material covered, leading to a recommendation for students to be prepared for a significant time commitment. While some reviews express frustration with the workload and pacing, others highlight the valuable knowledge gained and the course's overall quality. Overall, the course is seen as beneficial for those interested in parallel computing, but potential students are advised to consider the intense workload and difficulty level.\"}, {'course_id': 105679, 'course_codes': ['CS 149'], 'title': 'Parallel Computing', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': 'The document is a collection of student reviews and feedback about a parallel programming course. Overall, the course is described as interesting and beneficial, providing a good overview of various parallel programming paradigms. Students appreciate the programming assignments, although some find them confusing and not sufficiently challenging. There are concerns about the lack of a comprehensive textbook or reference material, as well as the incomplete lecture slides, which make studying difficult. Some students feel that the course could benefit from a more in-depth final project and better organization. While the course is generally well-received, there are criticisms regarding the teaching quality and the superficial nature of some assignments. Overall, students recommend taking the course for its breadth of material and engaging content.'}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': 'The document is a collection of reviews and feedback about an introductory database course taught by Professor Chris Re. Overall, the course is highly recommended for students interested in computer science, particularly those looking to learn about databases and SQL. Many reviewers praise the engaging teaching style of Professor Re, the helpfulness of the course staff, and the practical in-class activities that enhance understanding of the material.'}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': \"The document is a collection of student reviews and feedback about a database course taught by Peter Bailis. Overall, the course is described as a useful introduction to databases, with a manageable workload and practical knowledge gained through assignments and projects. Many students appreciated Bailis' passion for teaching and his willingness to help students, although some noted that the course was disorganized and that the teaching staff, including TAs, sometimes provided conflicting information. The first half of the course is considered easier, while the second half becomes more challenging and theoretical. Some students felt that the projects did not align well with the lecture material, and there were concerns about the clarity of instructions. Despite these issues, many students recommended the course, especially for those new to SQL or interested in software engineering. Overall, the feedback highlights both the strengths and weaknesses of the course, with a general consensus that it is a good option for students looking to learn about databases.\"}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': 'The document is a collection of student reviews and feedback about a database course taught by Professor Shiva Narayanan. The reviews express a mix of opinions, highlighting both positive and negative aspects of the course.'}]\nmain = Main()\n", "system_action": ["Report(answer, answer.result)", "AskField(main, courses_to_take, The courses that the student wants to take)"], "user_target_sp": "Answer(\"SELECT courses.course_id, course_codes, title, foundations_requirement, breadth_requirement, summary(reviews) FROM courses LEFT JOIN ratings ON courses.course_id = ratings.course_id WHERE course_codes && ARRAY['CS 149', 'CS 242', 'CS 145'] LIMIT 5;\", {}, ['courses', 'ratings'], 'How different are CS 149, CS 242, and CS 145 from the course recommended before?')", "user_target": "answer = Answer(\"SELECT courses.course_id, course_codes, title, foundations_requirement, breadth_requirement, summary(reviews) FROM courses LEFT JOIN ratings ON courses.course_id = ratings.course_id WHERE course_codes && ARRAY['CS 149', 'CS 242', 'CS 145'] LIMIT 5;\", {}, ['courses', 'ratings'], 'How different are CS 149, CS 242, and CS 145 from the course recommended before?')", "user_target_suql": "SELECT courses.course_id, course_codes, title, foundations_requirement, breadth_requirement, summary(reviews) FROM courses LEFT JOIN ratings ON courses.course_id = ratings.course_id WHERE course_codes && ARRAY['CS 149', 'CS 242', 'CS 145'] LIMIT 5;"}, {"user": "I would like to enroll in CS 148", "bot": "What is your desired grading basis for the course CS 148? Your options are: Credit/No Credit or Letter.", "turn_context": "course = Course(course_name = 'CS 148')\ncourses_to_take = CoursesToTake(course_0_details = course)\nmain = Main(courses_to_take = courses_to_take)\n", "global_context": "answer = answer('How different are CS 149, CS 242, and CS 145 from the course recommended before?')\nanswer.result = [{'course_id': 105679, 'course_codes': ['CS 149'], 'title': 'Parallel Computing', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': \"The document provides a collection of reviews and opinions about a course focused on parallel computing, taught by Professors Kayvon and Kunle. Kayvon covers the software aspect of the course, while Kunle focuses on hardware. The course is described as dense and challenging, with a heavy workload that includes demanding programming assignments and written homework. Many students found the lectures engaging and informative, particularly those by Professor Kayvon, although some felt that Professor Kunle's teaching style assumed more prior knowledge. The course is noted for its rigorous exams and the amount of material covered, leading to a recommendation for students to be prepared for a significant time commitment. While some reviews express frustration with the workload and pacing, others highlight the valuable knowledge gained and the course's overall quality. Overall, the course is seen as beneficial for those interested in parallel computing, but potential students are advised to consider the intense workload and difficulty level.\"}, {'course_id': 105679, 'course_codes': ['CS 149'], 'title': 'Parallel Computing', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': 'The document is a collection of student reviews and feedback about a parallel programming course. Overall, the course is described as interesting and beneficial, providing a good overview of various parallel programming paradigms. Students appreciate the programming assignments, although some find them confusing and not sufficiently challenging. There are concerns about the lack of a comprehensive textbook or reference material, as well as the incomplete lecture slides, which make studying difficult. Some students feel that the course could benefit from a more in-depth final project and better organization. While the course is generally well-received, there are criticisms regarding the teaching quality and the superficial nature of some assignments. Overall, students recommend taking the course for its breadth of material and engaging content.'}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': 'The document is a collection of reviews and feedback about an introductory database course taught by Professor Chris Re. Overall, the course is highly recommended for students interested in computer science, particularly those looking to learn about databases and SQL. Many reviewers praise the engaging teaching style of Professor Re, the helpfulness of the course staff, and the practical in-class activities that enhance understanding of the material.'}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': \"The document is a collection of student reviews and feedback about a database course taught by Peter Bailis. Overall, the course is described as a useful introduction to databases, with a manageable workload and practical knowledge gained through assignments and projects. Many students appreciated Bailis' passion for teaching and his willingness to help students, although some noted that the course was disorganized and that the teaching staff, including TAs, sometimes provided conflicting information. The first half of the course is considered easier, while the second half becomes more challenging and theoretical. Some students felt that the projects did not align well with the lecture material, and there were concerns about the clarity of instructions. Despite these issues, many students recommended the course, especially for those new to SQL or interested in software engineering. Overall, the feedback highlights both the strengths and weaknesses of the course, with a general consensus that it is a good option for students looking to learn about databases.\"}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': 'The document is a collection of student reviews and feedback about a database course taught by Professor Shiva Narayanan. The reviews express a mix of opinions, highlighting both positive and negative aspects of the course.'}]\nmain = Main(courses_to_take = courses_to_take)\ncourse = Course(course_name = 'CS 148')\ncourses_to_take = CoursesToTake(course_0_details = course)\n", "system_action": ["AskField(course, grade_type, The desired grading bases of the student Options are: Credit/No Credit, Letter)"], "user_target_sp": "main.courses_to_take = CoursesToTake(course_0_details=Course(course_name='CS 148'))", "user_target": "course = Course(course_name='CS 148')\ncourses_to_take = CoursesToTake(course_0_details=course)\nmain.courses_to_take = courses_to_take", "user_target_suql": ""}, {"user": "I would take this class for Credit", "bot": "How many units would you like to take for the course CS 148?", "turn_context": "main = Main(courses_to_take = courses_to_take)\ncourse = Course(course_name = 'CS 148', grade_type = 'Credit/No Credit')\ncourses_to_take = CoursesToTake(course_0_details = course)\n", "global_context": "answer = answer('How different are CS 149, CS 242, and CS 145 from the course recommended before?')\nanswer.result = [{'course_id': 105679, 'course_codes': ['CS 149'], 'title': 'Parallel Computing', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': \"The document provides a collection of reviews and opinions about a course focused on parallel computing, taught by Professors Kayvon and Kunle. Kayvon covers the software aspect of the course, while Kunle focuses on hardware. The course is described as dense and challenging, with a heavy workload that includes demanding programming assignments and written homework. Many students found the lectures engaging and informative, particularly those by Professor Kayvon, although some felt that Professor Kunle's teaching style assumed more prior knowledge. The course is noted for its rigorous exams and the amount of material covered, leading to a recommendation for students to be prepared for a significant time commitment. While some reviews express frustration with the workload and pacing, others highlight the valuable knowledge gained and the course's overall quality. Overall, the course is seen as beneficial for those interested in parallel computing, but potential students are advised to consider the intense workload and difficulty level.\"}, {'course_id': 105679, 'course_codes': ['CS 149'], 'title': 'Parallel Computing', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': 'The document is a collection of student reviews and feedback about a parallel programming course. Overall, the course is described as interesting and beneficial, providing a good overview of various parallel programming paradigms. Students appreciate the programming assignments, although some find them confusing and not sufficiently challenging. There are concerns about the lack of a comprehensive textbook or reference material, as well as the incomplete lecture slides, which make studying difficult. Some students feel that the course could benefit from a more in-depth final project and better organization. While the course is generally well-received, there are criticisms regarding the teaching quality and the superficial nature of some assignments. Overall, students recommend taking the course for its breadth of material and engaging content.'}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': 'The document is a collection of reviews and feedback about an introductory database course taught by Professor Chris Re. Overall, the course is highly recommended for students interested in computer science, particularly those looking to learn about databases and SQL. Many reviewers praise the engaging teaching style of Professor Re, the helpfulness of the course staff, and the practical in-class activities that enhance understanding of the material.'}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': \"The document is a collection of student reviews and feedback about a database course taught by Peter Bailis. Overall, the course is described as a useful introduction to databases, with a manageable workload and practical knowledge gained through assignments and projects. Many students appreciated Bailis' passion for teaching and his willingness to help students, although some noted that the course was disorganized and that the teaching staff, including TAs, sometimes provided conflicting information. The first half of the course is considered easier, while the second half becomes more challenging and theoretical. Some students felt that the projects did not align well with the lecture material, and there were concerns about the clarity of instructions. Despite these issues, many students recommended the course, especially for those new to SQL or interested in software engineering. Overall, the feedback highlights both the strengths and weaknesses of the course, with a general consensus that it is a good option for students looking to learn about databases.\"}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': 'The document is a collection of student reviews and feedback about a database course taught by Professor Shiva Narayanan. The reviews express a mix of opinions, highlighting both positive and negative aspects of the course.'}]\nmain = Main(courses_to_take = courses_to_take)\ncourse = Course(course_name = 'CS 148', grade_type = 'Credit/No Credit')\ncourses_to_take = CoursesToTake(course_0_details = course)\n", "system_action": ["AskField(course, course_num_units, The number of units the user want to take)"], "user_target_sp": "course.grade_type = 'Credit/No Credit'", "user_target": "course.grade_type = 'Credit/No Credit'", "user_target_suql": ""}, {"user": "I want to enroll in two courses this year with both of them being 3 credits", "bot": "Could you please provide your details such as name, student ID, student email address, and let me know if you are an international student?", "turn_context": "course_0 = Course(course_name = 'CS 148', grade_type = 'Credit/No Credit', course_num_units = 3)\ncourse_2 = Course(course_num_units = 3)\ncourses_to_take_1 = CoursesToTake(course_0_details = course_0, course_1_details = [Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3)], more_courses_2 = False, more_courses_3 = False)\ncourses_to_take = CoursesToTake(course_0_details = course_0, course_1_details = [Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3)], more_courses_2 = False, more_courses_3 = False)\nmain = Main(courses_to_take = [CoursesToTake(course_0_details: Course = Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 'None'), course_1_details: Course = 'None', more_courses_2: bool = 'None', course_2_details: Course = 'None', more_courses_3: bool = 'None', course_3_details: Course = 'None', confirm: bool = 'None')])\n", "global_context": "answer = answer('How different are CS 149, CS 242, and CS 145 from the course recommended before?')\nanswer.result = [{'course_id': 105679, 'course_codes': ['CS 149'], 'title': 'Parallel Computing', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': \"The document provides a collection of reviews and opinions about a course focused on parallel computing, taught by Professors Kayvon and Kunle. Kayvon covers the software aspect of the course, while Kunle focuses on hardware. The course is described as dense and challenging, with a heavy workload that includes demanding programming assignments and written homework. Many students found the lectures engaging and informative, particularly those by Professor Kayvon, although some felt that Professor Kunle's teaching style assumed more prior knowledge. The course is noted for its rigorous exams and the amount of material covered, leading to a recommendation for students to be prepared for a significant time commitment. While some reviews express frustration with the workload and pacing, others highlight the valuable knowledge gained and the course's overall quality. Overall, the course is seen as beneficial for those interested in parallel computing, but potential students are advised to consider the intense workload and difficulty level.\"}, {'course_id': 105679, 'course_codes': ['CS 149'], 'title': 'Parallel Computing', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': 'The document is a collection of student reviews and feedback about a parallel programming course. Overall, the course is described as interesting and beneficial, providing a good overview of various parallel programming paradigms. Students appreciate the programming assignments, although some find them confusing and not sufficiently challenging. There are concerns about the lack of a comprehensive textbook or reference material, as well as the incomplete lecture slides, which make studying difficult. Some students feel that the course could benefit from a more in-depth final project and better organization. While the course is generally well-received, there are criticisms regarding the teaching quality and the superficial nature of some assignments. Overall, students recommend taking the course for its breadth of material and engaging content.'}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': 'The document is a collection of reviews and feedback about an introductory database course taught by Professor Chris Re. Overall, the course is highly recommended for students interested in computer science, particularly those looking to learn about databases and SQL. Many reviewers praise the engaging teaching style of Professor Re, the helpfulness of the course staff, and the practical in-class activities that enhance understanding of the material.'}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': \"The document is a collection of student reviews and feedback about a database course taught by Peter Bailis. Overall, the course is described as a useful introduction to databases, with a manageable workload and practical knowledge gained through assignments and projects. Many students appreciated Bailis' passion for teaching and his willingness to help students, although some noted that the course was disorganized and that the teaching staff, including TAs, sometimes provided conflicting information. The first half of the course is considered easier, while the second half becomes more challenging and theoretical. Some students felt that the projects did not align well with the lecture material, and there were concerns about the clarity of instructions. Despite these issues, many students recommended the course, especially for those new to SQL or interested in software engineering. Overall, the feedback highlights both the strengths and weaknesses of the course, with a general consensus that it is a good option for students looking to learn about databases.\"}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': 'The document is a collection of student reviews and feedback about a database course taught by Professor Shiva Narayanan. The reviews express a mix of opinions, highlighting both positive and negative aspects of the course.'}]\nmain = Main(courses_to_take = [CoursesToTake(course_0_details: Course = Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 'None'), course_1_details: Course = 'None', more_courses_2: bool = 'None', course_2_details: Course = 'None', more_courses_3: bool = 'None', course_3_details: Course = 'None', confirm: bool = 'None')])\ncourse = Course(course_name = 'CS 148', grade_type = 'Credit/No Credit')\ncourse_0 = Course(course_name = 'CS 148', grade_type = 'Credit/No Credit', course_num_units = 3)\ncourse_2 = Course(course_num_units = 3)\ncourses_to_take_1 = CoursesToTake(course_0_details = course_0, course_1_details = [Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3)], more_courses_2 = False, more_courses_3 = False)\n", "system_action": ["AskField(main, student_info_details, The details about the student such as name,student id, student email address, if they are international student)"], "user_target_sp": "course_0 = Course(course_name='CS 148', grade_type='Credit/No Credit', course_num_units=3)\ncourse_1 = Course(course_name='', grade_type='', course_num_units=3)  # Placeholder for the second course details\ncourses_to_take = CoursesToTake(course_0_details=course_0, course_1_details=course_1, more_courses_2=False, course_2_details=None, more_courses_3=False, course_3_details=None, confirm=False)\nmain.courses_to_take = courses_to_take", "user_target": "course_1 = Course(course_name='CS 148', grade_type='Credit/No Credit', course_num_units=3)\ncourse_0 = course_1\ncourse_2 = Course(course_name='', grade_type='', course_num_units=3)\ncourse_1 = course_2\ncourses_to_take_1 = CoursesToTake(course_0_details=course_0, course_1_details=course_1, more_courses_2=False, course_2_details=None, more_courses_3=False, course_3_details=None, confirm=False)\ncourses_to_take = courses_to_take_1\nmain.courses_to_take = courses_to_take", "user_target_suql": ""}, {"user": "My name is Aakash Mishra, 06375727, aamishra@stanford.edu, I am not an international student", "bot": "Could you please confirm all the details before we submit them?", "turn_context": "student_info = StudentInfo(student_name = 'Aakash Mishra', student_id = '06375727', student_email_address = 'aamishra@stanford.edu', is_international_student = False)\nmain = Main(courses_to_take = [CoursesToTake(course_0_details: Course = Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 'None'), course_1_details: Course = 'None', more_courses_2: bool = 'None', course_2_details: Course = 'None', more_courses_3: bool = 'None', course_3_details: Course = 'None', confirm: bool = 'None')], student_info_details = student_info)\ncourses_to_take_1 = CoursesToTake(course_0_details = Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3), course_1_details = [Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3)], more_courses_2 = False, more_courses_3 = False)\n", "global_context": "answer = answer('How different are CS 149, CS 242, and CS 145 from the course recommended before?')\nanswer.result = [{'course_id': 105679, 'course_codes': ['CS 149'], 'title': 'Parallel Computing', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': \"The document provides a collection of reviews and opinions about a course focused on parallel computing, taught by Professors Kayvon and Kunle. Kayvon covers the software aspect of the course, while Kunle focuses on hardware. The course is described as dense and challenging, with a heavy workload that includes demanding programming assignments and written homework. Many students found the lectures engaging and informative, particularly those by Professor Kayvon, although some felt that Professor Kunle's teaching style assumed more prior knowledge. The course is noted for its rigorous exams and the amount of material covered, leading to a recommendation for students to be prepared for a significant time commitment. While some reviews express frustration with the workload and pacing, others highlight the valuable knowledge gained and the course's overall quality. Overall, the course is seen as beneficial for those interested in parallel computing, but potential students are advised to consider the intense workload and difficulty level.\"}, {'course_id': 105679, 'course_codes': ['CS 149'], 'title': 'Parallel Computing', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': 'The document is a collection of student reviews and feedback about a parallel programming course. Overall, the course is described as interesting and beneficial, providing a good overview of various parallel programming paradigms. Students appreciate the programming assignments, although some find them confusing and not sufficiently challenging. There are concerns about the lack of a comprehensive textbook or reference material, as well as the incomplete lecture slides, which make studying difficult. Some students feel that the course could benefit from a more in-depth final project and better organization. While the course is generally well-received, there are criticisms regarding the teaching quality and the superficial nature of some assignments. Overall, students recommend taking the course for its breadth of material and engaging content.'}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': 'The document is a collection of reviews and feedback about an introductory database course taught by Professor Chris Re. Overall, the course is highly recommended for students interested in computer science, particularly those looking to learn about databases and SQL. Many reviewers praise the engaging teaching style of Professor Re, the helpfulness of the course staff, and the practical in-class activities that enhance understanding of the material.'}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': \"The document is a collection of student reviews and feedback about a database course taught by Peter Bailis. Overall, the course is described as a useful introduction to databases, with a manageable workload and practical knowledge gained through assignments and projects. Many students appreciated Bailis' passion for teaching and his willingness to help students, although some noted that the course was disorganized and that the teaching staff, including TAs, sometimes provided conflicting information. The first half of the course is considered easier, while the second half becomes more challenging and theoretical. Some students felt that the projects did not align well with the lecture material, and there were concerns about the clarity of instructions. Despite these issues, many students recommended the course, especially for those new to SQL or interested in software engineering. Overall, the feedback highlights both the strengths and weaknesses of the course, with a general consensus that it is a good option for students looking to learn about databases.\"}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': 'The document is a collection of student reviews and feedback about a database course taught by Professor Shiva Narayanan. The reviews express a mix of opinions, highlighting both positive and negative aspects of the course.'}]\nmain = Main(courses_to_take = [CoursesToTake(course_0_details: Course = Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 'None'), course_1_details: Course = 'None', more_courses_2: bool = 'None', course_2_details: Course = 'None', more_courses_3: bool = 'None', course_3_details: Course = 'None', confirm: bool = 'None')], student_info_details = student_info)\ncourse = Course(course_name = 'CS 148', grade_type = 'Credit/No Credit')\ncourse_0 = Course(course_name = 'CS 148', grade_type = 'Credit/No Credit', course_num_units = 3)\ncourse_2 = Course(course_num_units = 3)\ncourses_to_take_1 = CoursesToTake(course_0_details = course_0, course_1_details = [Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3)], more_courses_2 = False, more_courses_3 = False)\nstudent_info = StudentInfo(student_name = 'Aakash Mishra', student_id = '06375727', student_email_address = 'aamishra@stanford.edu', is_international_student = False)\n", "system_action": ["AskField(main, confirm_submission, Ask the student to confirm all the fields they want to submit)"], "user_target_sp": "student_info = StudentInfo(student_name='Aakash Mishra', student_id='06375727', student_email_address='aamishra@stanford.edu', is_international_student=False)\nmain.student_info_details = student_info", "user_target": "student_info = StudentInfo(student_name='Aakash Mishra', student_id='06375727', student_email_address='aamishra@stanford.edu', is_international_student=False)\nstudent_info = student_info\nmain.student_info_details = student_info", "user_target_suql": ""}, {"user": "I can confirm", "bot": "I have successfully submitted your course enrollment details. Your transaction ID is 97281e4a-5155-4eff-b85a-7a2ef958297a. \n\nNow, could you please let me know the number of units you would like to take for the course 'CS 148'?", "turn_context": "main = Main(courses_to_take = [CoursesToTake(course_0_details: Course = Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 'None'), course_1_details: Course = 'None', more_courses_2: bool = 'None', course_2_details: Course = 'None', more_courses_3: bool = 'None', course_3_details: Course = 'None', confirm: bool = 'None')], student_info_details = StudentInfo(student_name: str = 'Aakash Mishra', student_id: str = '06375727', student_email_address: str = 'aamishra@stanford.edu', is_international_student: bool = False), confirm_submission = True)\nmain.result = {'success': True, 'transaction_id': UUID('97281e4a-5155-4eff-b85a-7a2ef958297a')}\ncourses_to_take_1 = CoursesToTake(course_0_details = Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3), course_1_details = [Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3)], more_courses_2 = False, more_courses_3 = False)\n", "global_context": "answer = answer('How different are CS 149, CS 242, and CS 145 from the course recommended before?')\nanswer.result = [{'course_id': 105679, 'course_codes': ['CS 149'], 'title': 'Parallel Computing', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': \"The document provides a collection of reviews and opinions about a course focused on parallel computing, taught by Professors Kayvon and Kunle. Kayvon covers the software aspect of the course, while Kunle focuses on hardware. The course is described as dense and challenging, with a heavy workload that includes demanding programming assignments and written homework. Many students found the lectures engaging and informative, particularly those by Professor Kayvon, although some felt that Professor Kunle's teaching style assumed more prior knowledge. The course is noted for its rigorous exams and the amount of material covered, leading to a recommendation for students to be prepared for a significant time commitment. While some reviews express frustration with the workload and pacing, others highlight the valuable knowledge gained and the course's overall quality. Overall, the course is seen as beneficial for those interested in parallel computing, but potential students are advised to consider the intense workload and difficulty level.\"}, {'course_id': 105679, 'course_codes': ['CS 149'], 'title': 'Parallel Computing', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': 'The document is a collection of student reviews and feedback about a parallel programming course. Overall, the course is described as interesting and beneficial, providing a good overview of various parallel programming paradigms. Students appreciate the programming assignments, although some find them confusing and not sufficiently challenging. There are concerns about the lack of a comprehensive textbook or reference material, as well as the incomplete lecture slides, which make studying difficult. Some students feel that the course could benefit from a more in-depth final project and better organization. While the course is generally well-received, there are criticisms regarding the teaching quality and the superficial nature of some assignments. Overall, students recommend taking the course for its breadth of material and engaging content.'}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': 'The document is a collection of reviews and feedback about an introductory database course taught by Professor Chris Re. Overall, the course is highly recommended for students interested in computer science, particularly those looking to learn about databases and SQL. Many reviewers praise the engaging teaching style of Professor Re, the helpfulness of the course staff, and the practical in-class activities that enhance understanding of the material.'}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': \"The document is a collection of student reviews and feedback about a database course taught by Peter Bailis. Overall, the course is described as a useful introduction to databases, with a manageable workload and practical knowledge gained through assignments and projects. Many students appreciated Bailis' passion for teaching and his willingness to help students, although some noted that the course was disorganized and that the teaching staff, including TAs, sometimes provided conflicting information. The first half of the course is considered easier, while the second half becomes more challenging and theoretical. Some students felt that the projects did not align well with the lecture material, and there were concerns about the clarity of instructions. Despite these issues, many students recommended the course, especially for those new to SQL or interested in software engineering. Overall, the feedback highlights both the strengths and weaknesses of the course, with a general consensus that it is a good option for students looking to learn about databases.\"}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': 'The document is a collection of student reviews and feedback about a database course taught by Professor Shiva Narayanan. The reviews express a mix of opinions, highlighting both positive and negative aspects of the course.'}]\nmain = Main(courses_to_take = [CoursesToTake(course_0_details: Course = Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 'None'), course_1_details: Course = 'None', more_courses_2: bool = 'None', course_2_details: Course = 'None', more_courses_3: bool = 'None', course_3_details: Course = 'None', confirm: bool = 'None')], student_info_details = student_info, confirm_submission = True)\nmain.result = {'success': True, 'transaction_id': UUID('97281e4a-5155-4eff-b85a-7a2ef958297a')}\ncourse = Course(course_name = 'CS 148', grade_type = 'Credit/No Credit')\ncourse_0 = Course(course_name = 'CS 148', grade_type = 'Credit/No Credit', course_num_units = 3)\ncourse_2 = Course(course_num_units = 3)\ncourses_to_take_1 = CoursesToTake(course_0_details = course_0, course_1_details = [Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3)], more_courses_2 = False, more_courses_3 = False)\nstudent_info = StudentInfo(student_name = 'Aakash Mishra', student_id = '06375727', student_email_address = 'aamishra@stanford.edu', is_international_student = False)\n", "system_action": ["Report(courses_to_take_oval(courses_to_take= self.courses_to_take, student_info_details= self.student_info_details, confirm_submission= self.confirm_submission), main.result)", "AskField(course, course_num_units, The number of units the user want to take)"], "user_target_sp": "main.confirm_submission = True", "user_target": "main.confirm_submission = True", "user_target_suql": ""}, {"user": "3", "bot": "Could you please provide the details for the second course you would like to take, such as the course name, grade type, and number of units?", "turn_context": "main = Main(courses_to_take = [CoursesToTake(course_0_details: Course = Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3), course_1_details: Course = 'None', more_courses_2: bool = 'None', course_2_details: Course = 'None', more_courses_3: bool = 'None', course_3_details: Course = 'None', confirm: bool = 'None')], student_info_details = StudentInfo(student_name: str = 'Aakash Mishra', student_id: str = '06375727', student_email_address: str = 'aamishra@stanford.edu', is_international_student: bool = False))\nmain.result = {'success': True, 'transaction_id': UUID('97281e4a-5155-4eff-b85a-7a2ef958297a')}\ncourse = Course(course_name = 'CS 148', grade_type = 'Credit/No Credit', course_num_units = 3)\ncourses_to_take_1 = CoursesToTake(course_0_details = course, course_1_details = [Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3)], more_courses_2 = False, more_courses_3 = False)\n", "global_context": "answer = answer('How different are CS 149, CS 242, and CS 145 from the course recommended before?')\nanswer.result = [{'course_id': 105679, 'course_codes': ['CS 149'], 'title': 'Parallel Computing', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': \"The document provides a collection of reviews and opinions about a course focused on parallel computing, taught by Professors Kayvon and Kunle. Kayvon covers the software aspect of the course, while Kunle focuses on hardware. The course is described as dense and challenging, with a heavy workload that includes demanding programming assignments and written homework. Many students found the lectures engaging and informative, particularly those by Professor Kayvon, although some felt that Professor Kunle's teaching style assumed more prior knowledge. The course is noted for its rigorous exams and the amount of material covered, leading to a recommendation for students to be prepared for a significant time commitment. While some reviews express frustration with the workload and pacing, others highlight the valuable knowledge gained and the course's overall quality. Overall, the course is seen as beneficial for those interested in parallel computing, but potential students are advised to consider the intense workload and difficulty level.\"}, {'course_id': 105679, 'course_codes': ['CS 149'], 'title': 'Parallel Computing', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': 'The document is a collection of student reviews and feedback about a parallel programming course. Overall, the course is described as interesting and beneficial, providing a good overview of various parallel programming paradigms. Students appreciate the programming assignments, although some find them confusing and not sufficiently challenging. There are concerns about the lack of a comprehensive textbook or reference material, as well as the incomplete lecture slides, which make studying difficult. Some students feel that the course could benefit from a more in-depth final project and better organization. While the course is generally well-received, there are criticisms regarding the teaching quality and the superficial nature of some assignments. Overall, students recommend taking the course for its breadth of material and engaging content.'}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': 'The document is a collection of reviews and feedback about an introductory database course taught by Professor Chris Re. Overall, the course is highly recommended for students interested in computer science, particularly those looking to learn about databases and SQL. Many reviewers praise the engaging teaching style of Professor Re, the helpfulness of the course staff, and the practical in-class activities that enhance understanding of the material.'}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': \"The document is a collection of student reviews and feedback about a database course taught by Peter Bailis. Overall, the course is described as a useful introduction to databases, with a manageable workload and practical knowledge gained through assignments and projects. Many students appreciated Bailis' passion for teaching and his willingness to help students, although some noted that the course was disorganized and that the teaching staff, including TAs, sometimes provided conflicting information. The first half of the course is considered easier, while the second half becomes more challenging and theoretical. Some students felt that the projects did not align well with the lecture material, and there were concerns about the clarity of instructions. Despite these issues, many students recommended the course, especially for those new to SQL or interested in software engineering. Overall, the feedback highlights both the strengths and weaknesses of the course, with a general consensus that it is a good option for students looking to learn about databases.\"}, {'course_id': 105675, 'course_codes': ['CS 145'], 'title': 'Data Management and Data Systems', 'foundations_requirement': None, 'breadth_requirement': '{systems}', 'summary': 'The document is a collection of student reviews and feedback about a database course taught by Professor Shiva Narayanan. The reviews express a mix of opinions, highlighting both positive and negative aspects of the course.'}]\nmain = Main(courses_to_take = [CoursesToTake(course_0_details: Course = Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3), course_1_details: Course = 'None', more_courses_2: bool = 'None', course_2_details: Course = 'None', more_courses_3: bool = 'None', course_3_details: Course = 'None', confirm: bool = 'None')], student_info_details = student_info)\nmain.result = {'success': True, 'transaction_id': UUID('97281e4a-5155-4eff-b85a-7a2ef958297a')}\ncourse = Course(course_name = 'CS 148', grade_type = 'Credit/No Credit', course_num_units = 3)\ncourse_0 = Course(course_name = 'CS 148', grade_type = 'Credit/No Credit', course_num_units = 3)\ncourse_2 = Course(course_num_units = 3)\ncourses_to_take_1 = CoursesToTake(course_0_details = course, course_1_details = [Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3)], more_courses_2 = False, more_courses_3 = False)\nstudent_info = StudentInfo(student_name = 'Aakash Mishra', student_id = '06375727', student_email_address = 'aamishra@stanford.edu', is_international_student = False)\n", "system_action": ["AskField(courses_to_take_1, course_1_details, The course details for second course, such as name, grade type and units)"], "user_target_sp": "course.course_num_units = 3", "user_target": "course.course_num_units = 3", "user_target_suql": ""}, {"user": "I would also like to take CS 242 but I want to hear some reviews about this course", "bot": "I checked for reviews of the course CS 242, titled 'Programming Languages'. Here are some of the reviews:\n\n1. \"Do it! In this class you'll look how/why inheritance is implemented in Java/C, learn a bit of Haskell and look at the functional side, you'll know how the vtables are structured in C, and implement a Haskell interpreter in JavaScript as one of the first homeworks. Enjoy, lucky student! :D The first few weeks homeworks take a lot more time and effort than the following ones. Make sure you read extra reading materials and referenced papers, they are fun!\"\n\n2. \"Fantastic course if you're interested in learning more about functional programming and the core ideas behind programming languages. You end up seeing a lot of really cool topics and ideas! The class does assume that you have a decent amount of exposure to systems and different languages though, and while it's definitely possible to catch up, the lecturers do seem to speed past some of the material.\"\n\n3. \"This is a really well-taught course with lectures that are more enjoyable and engaging than most. Edward is a natural lecturer and clearly puts a lot of thought into how to present concepts in an accessible and appealing way. The workload is fairly light.\"\n\n4. \"This course is a must-take, period. While it can seem abstract in the beginning, it builds a foundation for understanding software that extends beyond any particular tools. Furthermore, it's a look into the future of how software can be built.\"\n\n5. \"Absolutely worthwhile, covers lots of interesting topics in an engaging way. But pay attention - the course goes by quickly and a lot of complex topics only get covered fairly briefly.\"\n\nThese reviews highlight various aspects of the course, including its engaging lectures, challenging assignments, and the coverage of interesting topics in programming languages. Would you like to proceed with enrolling in CS 242 as your second course?", "turn_context": "answer = answer('What are the reviews for the course CS 242?')\nanswer.result = [{'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': ['Do it!', \"In this class you'll look how/why inheritance is implemented in Java/C  , learn a bit of Haskell and look at the functional side, you'll know how the vtables are structured in C  , and implement a Haskell interpreter in JavaScript as one of the first homeworks. Enjoy, lucky student! :D The first few weeks homeworks take a lot more time and effort than the following ones. Make sure you read extra reading materials and referenced papers, they are fun!\", 'no', 'Do a Haskell tutorial first.', 'Look at homeworks early to determine which ones will require extra time.', \"The first two assignments are probably the hardest ones and require some time to finish. The rest of the assignments are pretty straightforward. The slides do. It contain much information. You need to watch the lectures multiple times to get what they mean. The midterm is much easier than the final, but in general you'll have enough time for both. It's pretty hard to find your way in to this class but once you get the concepts and style, it's much easier to follow. This being said I don't know how helpful this information will be since Edward was teaching this class for the last time and the class itself might change quite a bit.\", 'Moderately Difficult and Somewhat Competitive', 'Homework assignments are a fun challenge and highlight key concepts.', \"Unfortunately Edward is graduating and will not be teaching it in the future :( It's still a valuable class but I'm very sad that future students will miss his excellent instruction.\", 'Absolutely take it', 'The course assignments (with exception of the written assignment) are awesome and will teach you a lot.', 'Content is very interesting. Lectures are hard to follow. Assignments not a lot of work.', \"Edward is very knowledgable and has deep insights on various languages and everything related to the course, but not very experienced on how to lecture and let us understand well (but given he's still a Phd student, you cannot expect a teaching veteran). Minds usually jump, and if you want to get to know every part, a lot of extra hours of self-exploration is expected.\", \"Fantastic course if you're interested in learning more about functional programming and the core ideas behind programming languages. You end up seeing a lot of really cool topics and ideas! The class does assume that you have a decent amount of exposure to systems and different languages though, and while it's definitely possible to catch up, the lecturers do seem to speed past some of the material.\", 'This is a really well-taught course with lectures that are more enjoyable and engaging than most. Edward is a natural lecturer and clearly puts a lot of thought into how to present concepts in an accessible and appealing way. The workload is fairly light.', \"It's a lot of small topics, but you will leave feeling a lot more equipped to tackle new languages and concepts.\", 'It is a very helpful course -- I recommend this course.', \"It's rather difficult despite the innocuous name.\", 'Highly recommend!', \"Very interesting, and very useful. Devote time to the labs and you'll have a leg up on understanding for the exams.\", \"If you are interested in a theoretical background behind programming languages definitely take it! Don't take it if you're interested in learning functional programming or objected oriented programming. It's not a class that teach us the paradigms but benefits of each paradigm.\", 'This is a good course for an overview on programming languages. You need to work on your own, or take more computer science courses to develop this subject.', 'Edward has great drawings. Honestly, I really liked this class. The workload gets lighter as the course goes on.', 'Unfortunately the great teacher will no longer be teaching...so who knows?', 'Great course and professor, very interesting without being too much work.', 'You will learn a lot of material.  Most of it will not be needed to do the homeworks which are intriguing but not very challenging.  People tended to do very well on the homeworks, so I am sure grades were determined pretty much by the midterm and final grades.', 'This is a great class, and Edward is a fantastic teacher \u00e2\u20ac\u201d going to class is fun!', \"Much of the homework feels needlessly complex. I struggled for hours on syntax problems with Haskell, etc. The concepts from lecture are interesting, and are understood within a few hours. However, you will spend *many* more hours thereafter struggling on silly bugs. I don't think that the amount of time put into the coding assignments is worth it for the knowledge that you gain. I do believe that the lectures are worth it, though.\", \"The course isn't that bad, and you learn a lot.\", \"Very insightful, and good for people who don't quite understand the non-obvious, underlying differences between popular languages like C  , Java, JavaScript, and Haskell.\", \"Assignments are easy but the tests are really difficult. Make sure to go to office hours often if you're not understanding concepts.\", 'Definitely recommend if you are thinking of taking 143 or have taken 143 and enjoyed the material. I think the two classes complement each other nicely.', \"I felt like this course taught me a lot of superficially interesting material that I don't think will be particularly helpful in real life but was at least kind of cool to learn. Not too much work.\", \"It's a class with a good useful-knowledge-to-time-spent ratio.\", \"A great class if you are interested in programming languages, but keep in mind it can get very challenging. Really touches on the lower level of languages, shouldn't be taken to broaden your skill in languages but rather your knowledge of their workings.\", \"Take this course! It's so much fun! Do don't really need any prereq's except for familiarity with Javascript and even that is a loose prereq. Every assignment is clearly laid out for you, step-by-step.\", 'The instructions are very thorough. You will learn a lot about research language Haskell and web language Javascript. The homework loads are not that even, with the hardest one taking around 20-25 hours and the easiest one taking about 1 hour.', 'Take it with EZ! Great instructor with clear goals.  The course definitely gave me a better understanding of how programming languages work, and how to leverage them to do things with code!']}, {'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': ['Absolutely worthwhile, covers lots of interesting topics in an engaging way. But pay attention - the course goes by quickly and a lot of complex topics only get covered fairly briefly.', 'Good to have strong programming knowledge before taking this class.', 'The course is still taking form, it should improve in future iterations', 'Attend the first lecture to know whether it teaches the same thing as you thought', 'Programming languages is a high-level introduction to some ideas in PLs. You touch on a lot of PL ideas, and implement some cool assignments.', \"It's a new course, so there's a few kinks here and there, but overall a good class\", 'I never had any experience with the topics in this class beforehand. Be prepared to learn a lot on your own and dedicate time to it.', 'Do the homework extremely carefully because there is grade inflation and homework takes a large part in the final grade. Be especially careful about proof assignments. Their grading can be very hash!', 'You should be familiar with Lua, OCaml and Rust before taking this course, or you will waste 10 hours a week debugging with an unfamiliar language.', \"Assignments are tough. And don't start assignments until they fix all the bugs.\", 'Will is a great instructor and super enthusiastic about the material', 'Will is a great instructor and I enjoyed the class overall. However, I found class assignments to be more work than I expected.', 'Very interesting material and an enthusiast instructor. Doesn\u00e2\u20ac\u2122t go much into depth but a decent overview', 'homework is hard and make sure  you go to office hour early. Will is a great instructor and topics he chose are interesting.', 'Students should take this course if Will Crichton is teaching it. He covers a lot of material but makes it very easy to digest.', 'If you learn well by doing projects, this is a good class for you.', \"Start the assignments/read through them early. It's far more valuable to physically show up to lectures\", 'Interesting class if you want to learn about general ideas behind programming languages. Also get to have some familiarity with new languages!', 'Excellent introduction to different features / considerations for different types of programming languages.  Assignments generally were more application-focused than theoretical with some exceptions.', \"Interesting material, though I would rather have more in-depth assignments every two weeks rather than weekly assignments.  I appreciated Will's lectures and code examples, they were generally clear and well structured.  My main complaint was that there were hidden tests on the homework assignments that were completely unknown to us, so we couldn't even see if our code was crashing.  I would prefer a 221-style approach where the hidden tests are shared, but without the results -- so it's possible to see whether the code runs, but not what the expected answer is.\", \"The assignments can be tough because you'll have to learn three languages over the course of seven weeks and work with concepts that are likely unfamiliar: you'll learn a lot but it will be a grind towards the beginning of the course.\", 'This course is definitely a difficult one but it is surely worth it. I think the class ended up being more about learning the three languages, rather than necessarily the \"linguistics\" of programming languages, but there was still plenty of time and energy on comparison. Will is a stellar and didactic teacher, take it with him if you can!', 'Interesting and enjoyable course. The lectures were generally good, although sometimes confusing (especially the ones on Rust). Assignment difficulty was not too bad usually but a few of the assignments took a very long time.', 'CS 242 is a class whose character completely depends on the instructor. I loved that Will Crichton was a very enthusiastic lecturer and cared a lot about his students. While I learned a lot of in the class about programming languages, the material was not presented in a way that helped me understand why the things taught in lecture were meaningful. I am left with many unanswered questions including: Why are functional languages designed the way they are? Why study lambda calculus, and how does lambda calculus relate to modern programming languages? Why did we study Lua, as opposed to any other (more popular) scripting language?', 'Will is a great instructor. He brings energy to class and makes you excited to learn. The assignments are, for the most part, really interesting and pretty challenging. Be prepared to put in a good amount of work. The final project is non-trivial so be sure to set aside enough time for it.', 'Will is a very passionate lecturer, which makes the topic very interesting. Unfortunately he has some unrealistic expectations for the amount of time students will put into the course. At the beginning of the course it was fine, but a very difficult final assignment combined with a final project where putting in the \"average\" amount of time at 30 hours would give you a B made the class turn sour in the end. Overall the class ramped up a huge amount due to the requirements of the final project and required much more work than 3 units. Hopefully the course staff will get the class more in line with a reasonable workload in future iterations.', \"It was a good course for its first iteration, but the languages chosen didn't feel like a win over what I already knew.\", \"Take it! You learn a lot, it's both theoretically and practically very useful, and you learn a lot. The programming assignments are all very interesting and the project at the end can be taken in many different interesting directions.\", 'I would recommend ti to anyone with an interest in learning more about the variations between programming languages and the reasons to pick certain languages for different projects.']}, {'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': [\"This course is a must-take, period.  While it can seem abstract in the beginning, it builds a foundation for understanding software that extends beyond any particular tools. Furthermore, it's a look into the future of how software can be built.\", 'Good course', \"This course is a mix of theory and practical programming languages. It's not all theoretical, but it isn't just a survey of different programming languages. It provides a theoretical foundation, and exposure to different styles of programming languages, all while motivating their different features.\", \"Will is a great lecturer and you'll learn a lot from him!\", \"The pace is very quick and there's really no easy way to catch up if you fall behind. So stay on top of classes and coursework. Instructor and TAs extremely helpful and supportive, want you to succeed.\", 'Will is a great instructor and the assignments for this course are well put together.', \"It's a really well constructed course and Will's lectures are really insightful and impassioned. It's a must-take course for those interested in Programming Languages.\", 'It is a useful course to deeply understand how programming languages are designed, and the course is really well organised.', 'great intro into functional programming and programming language theories', \"it's a lot of time!\", 'Will is an engaging and very talented lecturer and instructor, and cares about his students. The course was challenging because it went over so many different topics, and does take significant effort, but as a result you get a holistic understanding of multiple programming languages. The assignments are very good educational experiences. Highly recommended!', 'Fun, challenging assignments and interesting material. Will is a passionate and knowledgeable lecturer. Would recommend.', 'The course is very worthwhile with a large breadth of topics and programming languages covered.', 'PL as taught by Will is a good class. He listens to student feedback seriously and tries to make the course better, which I appreciate!', 'Very high-quality course.', \"Actually go to lecture or you'll be super confused on the assignments and end up spending way more extra time trying to learn for yourself than you saved by skipping lecture...\", 'You should take it! Especially if you have an interest in theory/compilers/systems/programming languages. Will pours his heart into this class and it really shows. The projects are incredible (although a bit buggy) and the concepts are really interesting.', \"Take it! It was not what I expected and was a lot of work (office hours were a blessing) but it introduced me (thoroughly!) to functional programming concepts that I am now looking into further on my own because I am interested in different ways of thinking about computation and how that will affect the way I approach programming problems in the future. It's also fun to learn a bit of Rust and Lua! (I was not as much of a fan of OCaml and WebAssembly)\", 'Useful for all programmers and computer scientists, from systems engineers to theoreticians.', \"It's an interesting class to take because it reflects on the translation that occurs between the model of computation you have in your head and how you express that model of computation using the tools a programming language gives you. You learn a lot about types and the theory behind them. This class also gives you exposure to more modern programming languages that have neat features that enable you to write better code (both in a correctness sense and a style sense). Will Crichton is an enthusiastic instructor that has put a ton of time into make this a great course. If you're at all interested in the future of programming languages and how programming languages can enable you to better reason about your code, this is a good class to take.\", 'Good introduction to PL theory, functional programming, and some interesting languges', \"This is the best CS class I've taken at Stanford. You're doing yourself a disservice by not taking it. I enjoyed every single lecture, and Will is incredibly passionate about the material. The assignments are fun and not too hard, and you will leave this class with much appreciation for the material.\", \"Pros: Get exposure to a number of less popular languages (OCaml, Rust, Lua) and a better vocabulary for discussing what matters in programming languages (strength of type system and automatic vs. manual memory management). It's still not really clear to me how the Lambda Calculus practically relates to the rest of the course, so the first few weeks were a bit frustrating, but I found it more enjoyable after that.\", 'Will is clearly passionate about the course material, and his teaching style is very engaging. The assignments complement the lectures very well, are reasonably challenging, but never overwhelming.', \"Having taken CS143, I found myself really wishing the 143 was a prereq for this class. I think that would have allowed Will to go much deeper into the material and would have removed redundancies. Will is an awesome and enthusiastic teacher and I was super impressed by the amount of time and effort he put into the course. Given that the assignments were new, it was also amazing that there weren't really any bugs. At times towards the end of the course, I felt like I wasn't learning that much from the assignments besides practicing programming in a new language. It was cool to learn about Rust from a programming languages perspective since it is gaining traction in the systems community.\", 'The course is still being iterated, but the material, professor and assignments are  interesting.', \"Fantastic course, would highly recommend. Reasonable expectations throughout the whole quarter. Will cares a lot about the quality so the course will surely improve.   A note on prereqs: I hadn't taken 110 and was largely fine. There was one assignment where basic knowledge of threads is assumed, but it's something you can learn on the fly.\", 'This is a great class and you will learn so much from it! Will cares a lot that his class is well taught and that assignments will help you reinforce the content of the class. I enjoyed taking this class so much.', \"It's a course that keeps changing, so it's hard to say. It's definitely heavy on both theory and system topics, and it's a sizeable amount of work. You'll learn some cool stuff though, but at a fast pace.\", 'This is one of the best classes I have taken at Stanford. The material is fascinating, and Will is an amazing teacher. He cares a lot about what students get out of the class and effectively designs lectures and assignments to maximize learning. Some parts of the course were challenging and others felt too easy, but Will is receptive to feedback and will probably make adjustments for the next iteration. Overall I learned a ton and consistently enjoyed the class.', 'Great class! Will is super passionate about the topic and he puts a lot of time into the notes and assignments he gives you. He manages to cover a wide span of PL theory and application in just the ten weeks and tests your programming skills.', \"Great class! The beginning is a little more theoretical than you might expect, but it ends up quickly building to practical considerations of languages including OCaml, Rust and Lua, all of which you get to use in homework assignments. Rust is probably the trickiest, because of its borrow checker, but once you learn the idioms used for Rust programming it's not too bad. Homeworks were reasonable in length and effectively illustrated points taught in class. I felt like I got a lot out of this class!\", 'Will Crichton is an excellent instructor.', 'This class is great regardless of your area of focus! It exposes you to a variety of PL representing important concepts that you might not see in other classes, without forcing you to spend too much frustration on syntax. Will is a great lecturer, and the assignments are fun. The workload is reasonable, and a good ratio of time spent to amount learned', \"This course's grading policy has a heavy emphasis on application, but classes and lectures are more theory based.\"]}, {'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': ['This course will change your view about programming languages and it will be starting point for programming language theory', \"Take it. It speaks truth about what matters in designing a good language, and moreover teaches you tools to think in terms of types , lambda calculus, and all the wonderful PL paradigms, so at the end of it you're much better off understanding the status quo of the software industry, and what needs to be improved. I recommend this to anyone who wants to understand modern software.\", 'Will is extremely enthusiastic in teaching. Notes are well organized and help a lot.', 'Get started on the homework early, but Will is a great instructor.', 'Great course!', 'Take it!', 'Be sure to dedicate enough time for the final! (At least DLang can be non-trivial if you try to cram it).', 'Lectures are invaluable as are OH.', 'There is a lot of work, so plan your schedule accordingly.', \"The concepts you learn in this course are crucial to becoming a good programmer for many areas in compute science. Even if you don't use Rust, the way you write programs will change.\", \"I didn't really understand the first week of lectures until about halfway through the quarter; after that, the whole class gets a lot more fun. One of the few 200-level CS classes that's close to the core series in terms of the (high) quality of assignments/lecture notes. Lectures can be a little dry, despite best efforts; there's a good amount of writing proofs on a whiteboard.\", 'Excellent course. Learned so much about PL and I am truly inspired by this course on what the term \"programming language\" means. The contents are extremely organized and assignments are very effective in helping me understand the concepts.', 'Good introduction to PL. The second half of the course becomes more programming intensive / straightforward than the first couple weeks', 'Take it!! It so different than most CS classes at Stanford and Will is a great teacher!', \"Deeply interesting course, very much recommend if you're interested in learning about PL theory or functional programming.\", 'Very good course. Learnt a lot about PL.', 'This course is a lot of fun with functional programming and types. You will learn several languages in a short amount of time, and learn about the language design considerations. Sometimes the time can be long between assignment release and it being ready, bug-free and has correct GradeScope tests, which was the main shortcoming of the version I took this quarter.', \"Really interesting course, the content is more unusual than most other courses and it's a nice trek through how and why programming languages are the way they are (and insight into where the future of languages is headed). This course is not overly theoretical, most of the assignments are a practical deep dive into some aspect of programming language design. I came in with some prior experience with OCaml, but I enjoyed learning Rust and overall the course was a great experience.\", 'I think the course was way harder than it needed to be and learning 3 different programming languages in 1 quarter is definitely challenging,', 'It will make you a better programmer', 'Do not do the RLU project if they are still keeping it for the final.', 'I really loved this class, and it probably will be one of the most impactful on my skills as a software engineer when I leave Stanford. 2nd year MSCS in AI/system.', 'While this course can be fairly time intensive especially in the first few weeks, the material really comes together in the end, and overall the course is a positive experience! Office hours are extremely helpful for understanding the material.', 'One of my favorite courses at Stanford so far. I really like how the class focused on application and also learning through the homeworks rather than through exams, I felt that I learned a lot more this way', 'This class is a systems and theory class. It is less about implementation, although the course description implies otherwise.', 'Take it! This is the only course of its kind in the Stanford CS department', \"Really interesting class at the intersection of theory and systems, which means it bounces back and forth between proof-writing assignments and big coding assignments. Sometimes the assignment releases were delayed, but that's because Will re-wrote a huge portion of the assignments to improve from the previous offering and fit more closely with what we were learning--he's an excellent instructor who cares a whole lot about the course.\", 'The best and most valuable computer science course I have taken at Stanford', \"the course isn't the easiest, especially if you don't have a ton of exposure to some the kinds of math that show up, but Will is one of the best lecturers at Stanford, hands down. You learn a ton and he's an incredible resource all around.\", 'This class was very challenging but very rewarding-- Will is a wonderful, enthusiastic lecturer, and the assignments were interesting', 'It is still getting developed- there were homework typos and some delays, but overall a great course.', \"It's a lot of work and not very fun.\", 'Take it, you will learn so much, but be prepared for the workload! The first two assignments were by far the heaviest of the quarter, but the programming assignments and theorem proving final were a lot of fun.', \"A lot of breadth but not a lot of depth. You'll be exposed to a lot of new concepts and programming languages which you can further explore if you're interested.\", 'This quarter (Fall 19-20) Will made the class significantly more time-consuming at the start (I think) in comparison to the previous offering. I did not expect to be spending 110-like amounts of hours for some of the weeks.  Still, Will taught the class well, with great lecture notes in a way that got the content across, with assignments that actually relate to lectures. So if you have time, down to learn a new perspective on programming (from imperative languages like python, c, etc.), go for it!', \"It's probably a lot harder than you think it will be. That being said, it's a completely different way of thinking about CS, and it's really cool!\", \"Would not recommend this course unless you have a fairly extensive background in math, theory (PHIL 150, CS 157), or have a lot of time on your hands to always be in office hours.  I had the listed prerequisites for the class, yet I constantly felt like I was extremely unprepared.  Don't use other quarter evaluations to determine if you should take this class, it has been completely redone (even though the instructor is the same).  If you do choose to take this class and you get stuck, Will is a nice person and he tries to make time for students, so you might consider reaching out to him for one-on-one help.  Also if you're stuck on assignments, sometimes the order of the parts of an assignment will not be the most intuitive for you personally, so try solving the problems in another order.\", \"Think twice if the first lecture (and Will's passion) lured you into taking this class. For Autumn 2019, the time commitment stats from the previous quarter was a complete lie, so don't trust the stats too much. I have heard multiple students comparing the workload of this class to CS110 (or worse than it). Otherwise, Will and the course staff are very nice and helpful!\", \"This class significantly ramped up compared to every previous iteration. The first two assignments took around 30 hours to complete and many people dropped because the instruction staff didn't really warn people. Every subsequent assignment has been tough but manageable, and they all help you learn a ton. Just be ready to put in the work, but it's worth it.\", 'course can be fun but is somewhat time consuming in random weeks', \"An amazing course! Will is a fantastic lecturer and you should not miss the opportunity to learn about programming language design and the beauty of functional languages. The course gets heavily revamped every quarter, so your mileage may vary, but it is still structured very well regardless and introduces a ton of fascinating and industry-applicable material, whether you are interested in AI, systems, or even full-stack. I would say this is one of the best courses I've taken and will revolutionize the way you think about software development! You'll never get a null pointer exception, segfault, or memory leak ever again.\", \"This class is ever shifting, so while old comments are a decent litmus test, the difficulty of the class may vary wildly. Will is always trying to improve it - but sometimes he swings too far in the difficulty direction. It was very difficult this quarter and had a HUGE workload. However, we all learned a ton, so make of that what you will! Will is an excellent instructor, so if you're at all interested, it's worth the chance - just be wary of the workload.\", 'This is a horrible course. Worst class I have taken at Stanford. The assignment is due on Wednesday and almost all of them have several bugs till Monday. Lecture is essentially useless. Office hours are understaffed. The remote final was not entirely released till 5 days before due date. DO NOT TAKE IT', \"Difficult course, but one of my favorites at Stanford (definitely a change of pace from my AI track courses). Will is a very enthusiastic lecturer and encourages students to learn and attend office hours. His teaching style and enthusiasm is how I managed to stick with going to lecture all quarter (I typically don't).  The course is still being developed so sometimes the assignments have bugs in them, but the teaching staff work hard to get them all ironed out. I'd highly recommend taking this course if you have an otherwise light quarter (weekly psets are time consuming) or might be interested in this topic.\", 'The first half of the course is hard because of the theory, and the second half is hard because of the programming assignments. The assignments dominated all of my time for the quarter. Course staff is friendly but OH can be busy and stressful. The lectures are not super interesting unless you are really excited to hear about parts of the lambda calculus and Rust in extreme detail.', \"Definitely recommend this class if you're interested in learning more about how advances in programming languages can help engineers write safer and better code\", \"This is a really good course. I took it basically on a dare -- without having taken CS110 and with relatively limited programming experience outside of Python and C, and pretty basic knowledge of CS theory. As a result, I think I definitely had to put in more work than the average student. That said, it was an absolutely fascinating (albeit sometimes intense) trip through a field I had known nothing about, and I'm really glad I took it.   The weekly homework assignments were often pretty time-consuming for me, and it would have been nice to get a break here or there. All the same, a great course!\", \"This class is really hard. Period. Take it with plenty of time to work on the assignments, because they'll require that you go back to lecture notes and fix misconceptions. But do take it! The class is very rewarding and you learn a ton. Very few times in my five years at Stanford I've seen a professor that cares as much and will put as much effort into their class (it'll still be hard though).\", \"It's fairly interesting material. Don't be put off by the beginning work.\", 'Will is a great instructor - very passionate and enthusiastic, and good at teaching things in a way that students can understand. My only complaint was that many assignments were remade on the fly, which led to frequent bugs in assignments and TAs vaguely stating that things would be fixed/updates \"soon\" or \"ASAP\" and then not actually fixing/updating for several days.', 'Good class, take', \"It's fairly interesting, but a lot of it was overly pedantic for my taste. Much of the class is taking a pretty simple concept, then finding a way to describe and formalize it to make it seem complex. I guess formal definitions of languages are useful if you want to actually prove your systems are correct, but for most software engineers I really don't see it being useful in the near future. Being able to use a more expressive type system like Rust's is useful, particularly with respect to memory management, type state, and session state, but even Rust felt a bit half baked to me. There are things that seems like they should be really simple yet require hacks in unsafe code. The docs are littered with places where the Rust spec is not fully defined. Will's enthusiasm is fantastic though, and that always got me through the lecture even when I wasn't in love with the material!\", 'I did not know this was a systems class before taking it but I think I still did okay. One of my favorite classes and probably one of the best taught in the CS department. It can be a little difficult at times, but you want to make sure you go to office hours because the teaching staff is amazing and you can work through problems with your peers.  Will cares a lot about teaching and is incredibly knowledgeable, empathetic, and wants you to really know the material by the end of it. 10/10', 'Fantastic course! I wish there were more like this at Stanford. The first couple of weeks are pretty theory-heavy but as the course goes on it becomes more practical and I learnt a lot. Workload is consistent but manageable. Will is a great lecturer that cares a lot about his students and readily takes on feedback.', \"there's nice material in this course. it seems to be evolving a lot so the courseload may vary from previous iterations. homeworks took longer than expected, probably due to initial friction from not knowing a language / formalism\"]}, {'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': ['Interesting material and some cool projects to implement. However, a few of the assignment specs were not that helpful and I needed to go to office hours to properly understand the problems. That was especially the case for the final project.', 'Take this course if you are interested in the theoretical underpinnings of what goes into developing a programming language. Very helpful for learning the functional programming paradigm.', 'The content is interesting, but the course was better organized when Will Crichton taught it, labs, lectures, notes, and homeworks included. Some of the homeworks in this course were cool, but a lot of it felt spoon-fed or not particularly helpful for deepening or reinforcing understanding. There seemed to be a focus on how things work instead of why. This may be attributed to the intention of creating a generally lower-intensity course. The fun things were: problems in lambda calculus/ski calculus, the coroutines/continuations homework, and the final project.', 'The homeworks were scoped to be around 10 hours when I took the class but the variance was closer to 10-20 hours. The Rust project was very long (you can choose from multiple projects) -- say ~30-40 hours -- but was rewarding. New instructor and new homeworks / projects for this quarter, so likely to change & improve.', 'Interesting materials, but the lectures sometimes felt poorly-paced. The assignments were useful, but the specs were often confusing, and the quality of help from the TAs was hugely inconsistent. The final project was useful and interesting, but again the difficulty of the three choices for our projects was very skewed.', \"If you're interested in the theory behind functional programming, take this course. If you're interested in how fundamental problems in programming languages are implemented in real languages, I would not recommend this course. The majority of the homeworks were built around lambda calculus variants, which  are theoretically interesting but not particularly practical. There is a rust assignment that was cool, but the majority of the course was not about commonly used languages. In the end I found the course too theoretical and only very loosely applicable.\", '> Alex is pretty awesome! Cares a *lot* about students and always happy to take questions.nnnn> Overall thread of class is pretty unclear, though individual lectures are very coherent.nnnn> Pi calculus assignment is extremely challenging. Get on that one ASAP!', 'This is a fantastic course that taught me quite a lot about thinking differently about programming languages. The quality of instruction was fantastic! Consider taking this course!', 'Pretty well-taught and engaging material if you have any interest in the implementation of languages or programming languages theory -- the course definitely tends to the theoretical side. Assignments were not too challenging, but take advantage of office hours and start on the final project early!', \"This course is so fun! It does not require too much work, and you get to play around with really interesting ideas in programming languages. I definitely recommend it if you've ever been interested in programming language theory.\", \"This course was a bit of a letdown. I came in with high expectations, but they quickly fell flat as soon as I realized that the class was focused more on theory than on systems. I stopped going to lecture at the beginning of week 3 because of how confusing they were. Instead, I would look at the week's pset to figure out what I needed to learn; read Wikipedia, blog posts, and research papers for a few hours until I felt like I had a solid grasp of the material; and then complete the pset. On the one hand, it was frustrating that lectures were useless to me. On the other hand, I realized that I can learn difficult material on my own. And, in the end, I learned Rust, which was one of the reasons I was interested in taking the class in the first place. Overall, not the worst class in the world, but most definitely not the best class either.\", \"This is one of the most interesting courses I've had the opportunity to take at Stanford.nnIt's truly wonderful to learn programming paradigms and language features in lecture, then immediately be able to interact with those concepts in the assignments.nnThe assignments do a great job of ensuring you understand the material and the final project is extremely interesting and enjoyable.\", 'Some of the assignments were fun, but the project was a bit disorganized and took significantly longer than the assignments. The class definitely was not as practical as I was hoping it would be.', \"It's an interesting class looking at programming languages through an academic lens. The benefit is that you get a whole new way of looking at languages: lambda calculi, object calculi, typed vs untyped, etc. The issue is that for every homework it felt like I had missed half of the lectures.... even though I had poured over the details. I constantly had the feeling that I had to fill in about half of the course myself to do the homeworks. A lot of important information is communicated over Edstem rather than in the homework itself. Also, the Rust final project is a HUGE step up from the Rust homework, and the brief is poorly written and confusing. I hope the project brief will be revised in future.\", \"This class is pretty hard, the final project especially. Not ideal with a tough course load. You'll def improve as a programmer from the homeworks though.\", \"It's a fine course with some interesting things here and there but by and large quite tedious. You spend a lot of time doing the same recursive translation or type checking logic for different simple languages. It's good for insight the first time but pretty pointless to do it again and again. The final projects were kind of cool but definitely really long.nnnnIn terms of teaching, Prof. Aiken is well-intentioned and mostly okay but he could really benefit from working on his teaching process. For example, he needs to understand that you can't put big blocks of equations or maths working all at once on a slide and then just talk through them while highlighting random stuff. Either break the slides up line by line (see how Keith Schwartz does equations in slides) or work through them by hand live. You will catch a lot of the errors if you break up your presentation like this. Also space out your equations and don't use confusing variable names. I swear there was a slide where an equation had two plus symbols on a line and one of them was an operator in the language and the other was mathematical plus and there was literally no indication that those were supposed to be different until someone asked. Just use colour/bold/font or one of 6 other modalities to clarify things more.\", 'Most lectures are like, \"here's a concept; here's how it's formalized with lambda calculus; let's do some examples to feel it out.\" Aiken teaches the material solidly. Most homeworks are like, \"here's some funky language that formalizes a concept; make it do a thing.\" Overall, things are very fun, brain-teaser-y, and satisfying to complete, but it didn't feel dramatically deep or explicitly useful to a lot of subdisciplines of CS.', \"Definitely a great option for a systems PhD breadth class if you're not that interested in systems. Homeworks aren't too much work and are pretty interesting.\", \"Fun class! I think the class is changing a little bit, but we went over different simple programming languages and theory associated with them. Good background just for generally understanding type checking and early programming language theory. Didn't write in as many new languages as expected, as I had heard from previous versions of the class, but it was still a fun exercise to parse through syntax.\", 'Great course!', 'Great way to learn about non mainstream programming languages and techniques.', \"Probably a good class if you are interested in the area/potentially doing research in the area. The fact that we are introduced to the Rust programming language likely has practical benefits too. As a PhD student taking it for a breadth requirement I think it's decently hard work but manageable.\", 'Good course on underlying theory for programming languages', 'This course was good exposure but the theoretical side of this content felt kind of loose and the projects felt like a scramble to understand what was going on.', \"This course was really unfamiliar to me starting out, so most of the basic concepts were really hard to understand. It will probably be substantially easier for you if you already know lambda calculus, typechecking, etc. The problem sets were extremely hard to understand at first, and were a pretty heavy workload because there was a new one each week with no break. The office hours help for the problem sets, but they are still very challenging and it's hard to get all of your questions answered since office hours are fairly crowded. The lectures were all interesting, understandable, and organized/well-explained, but there was just so much new material (and difficult notation) that understanding the lectures was not enough to feel confident about the material. The projects were interesting and cool, but also a very heavy workload where sometimes understanding is just assumed for things that are completely new to the students.\", 'Take advantage of office hours and the forum. Jason was really helpful in office hours and made some of the abstract concepts a lot easier to understand.', \"Take it if the theoretical aspects of programming languages excites you. For example, if you're passionate about getting to learn more about the type system, or program in purely functional ways\", \"If you're interested in programming languages, take this course. However, be advised that this course is very heavily focused on the theory of programming languages (not half theory and half systems as the description implies). The majority of the lectures were working through various proofs of various properties of types and different calculi; it spent very little time working with real-world programming languages. The assignments were in Python, Racket, and Rust, but that was incidental\u2014we were told to read a handout that covered the basics of each language before starting the assignments, but otherwise there was no real explanation of the up or downsides of each. Some of the assignments were also written ambiguously or under-specified, which led to issues when trying to figure out what they meant.\", 'It's an interesting introduction to programming paradigms outside the most common languages. The material is a bit dryly presented in class, but for the most part the programming assignments are pretty easy. The \"final project\" is basically just a big programming assigment.']}]\nmain = Main(courses_to_take = [CoursesToTake(course_0_details: Course = Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3), course_1_details: Course = 'None', more_courses_2: bool = 'None', course_2_details: Course = 'None', more_courses_3: bool = 'None', course_3_details: Course = 'None', confirm: bool = 'None')], student_info_details = StudentInfo(student_name: str = 'Aakash Mishra', student_id: str = '06375727', student_email_address: str = 'aamishra@stanford.edu', is_international_student: bool = False))\nmain.result = {'success': True, 'transaction_id': UUID('97281e4a-5155-4eff-b85a-7a2ef958297a')}\ncourses_to_take_1 = CoursesToTake(course_0_details = Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3), course_1_details = [Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3)], more_courses_2 = False, more_courses_3 = False)\n", "global_context": "answer = answer('What are the reviews for the course CS 242?')\nanswer.result = [{'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': ['Do it!', \"In this class you'll look how/why inheritance is implemented in Java/C  , learn a bit of Haskell and look at the functional side, you'll know how the vtables are structured in C  , and implement a Haskell interpreter in JavaScript as one of the first homeworks. Enjoy, lucky student! :D The first few weeks homeworks take a lot more time and effort than the following ones. Make sure you read extra reading materials and referenced papers, they are fun!\", 'no', 'Do a Haskell tutorial first.', 'Look at homeworks early to determine which ones will require extra time.', \"The first two assignments are probably the hardest ones and require some time to finish. The rest of the assignments are pretty straightforward. The slides do. It contain much information. You need to watch the lectures multiple times to get what they mean. The midterm is much easier than the final, but in general you'll have enough time for both. It's pretty hard to find your way in to this class but once you get the concepts and style, it's much easier to follow. This being said I don't know how helpful this information will be since Edward was teaching this class for the last time and the class itself might change quite a bit.\", 'Moderately Difficult and Somewhat Competitive', 'Homework assignments are a fun challenge and highlight key concepts.', \"Unfortunately Edward is graduating and will not be teaching it in the future :( It's still a valuable class but I'm very sad that future students will miss his excellent instruction.\", 'Absolutely take it', 'The course assignments (with exception of the written assignment) are awesome and will teach you a lot.', 'Content is very interesting. Lectures are hard to follow. Assignments not a lot of work.', \"Edward is very knowledgable and has deep insights on various languages and everything related to the course, but not very experienced on how to lecture and let us understand well (but given he's still a Phd student, you cannot expect a teaching veteran). Minds usually jump, and if you want to get to know every part, a lot of extra hours of self-exploration is expected.\", \"Fantastic course if you're interested in learning more about functional programming and the core ideas behind programming languages. You end up seeing a lot of really cool topics and ideas! The class does assume that you have a decent amount of exposure to systems and different languages though, and while it's definitely possible to catch up, the lecturers do seem to speed past some of the material.\", 'This is a really well-taught course with lectures that are more enjoyable and engaging than most. Edward is a natural lecturer and clearly puts a lot of thought into how to present concepts in an accessible and appealing way. The workload is fairly light.', \"It's a lot of small topics, but you will leave feeling a lot more equipped to tackle new languages and concepts.\", 'It is a very helpful course -- I recommend this course.', \"It's rather difficult despite the innocuous name.\", 'Highly recommend!', \"Very interesting, and very useful. Devote time to the labs and you'll have a leg up on understanding for the exams.\", \"If you are interested in a theoretical background behind programming languages definitely take it! Don't take it if you're interested in learning functional programming or objected oriented programming. It's not a class that teach us the paradigms but benefits of each paradigm.\", 'This is a good course for an overview on programming languages. You need to work on your own, or take more computer science courses to develop this subject.', 'Edward has great drawings. Honestly, I really liked this class. The workload gets lighter as the course goes on.', 'Unfortunately the great teacher will no longer be teaching...so who knows?', 'Great course and professor, very interesting without being too much work.', 'You will learn a lot of material.  Most of it will not be needed to do the homeworks which are intriguing but not very challenging.  People tended to do very well on the homeworks, so I am sure grades were determined pretty much by the midterm and final grades.', 'This is a great class, and Edward is a fantastic teacher \u00e2\u20ac\u201d going to class is fun!', \"Much of the homework feels needlessly complex. I struggled for hours on syntax problems with Haskell, etc. The concepts from lecture are interesting, and are understood within a few hours. However, you will spend *many* more hours thereafter struggling on silly bugs. I don't think that the amount of time put into the coding assignments is worth it for the knowledge that you gain. I do believe that the lectures are worth it, though.\", \"The course isn't that bad, and you learn a lot.\", \"Very insightful, and good for people who don't quite understand the non-obvious, underlying differences between popular languages like C  , Java, JavaScript, and Haskell.\", \"Assignments are easy but the tests are really difficult. Make sure to go to office hours often if you're not understanding concepts.\", 'Definitely recommend if you are thinking of taking 143 or have taken 143 and enjoyed the material. I think the two classes complement each other nicely.', \"I felt like this course taught me a lot of superficially interesting material that I don't think will be particularly helpful in real life but was at least kind of cool to learn. Not too much work.\", \"It's a class with a good useful-knowledge-to-time-spent ratio.\", \"A great class if you are interested in programming languages, but keep in mind it can get very challenging. Really touches on the lower level of languages, shouldn't be taken to broaden your skill in languages but rather your knowledge of their workings.\", \"Take this course! It's so much fun! Do don't really need any prereq's except for familiarity with Javascript and even that is a loose prereq. Every assignment is clearly laid out for you, step-by-step.\", 'The instructions are very thorough. You will learn a lot about research language Haskell and web language Javascript. The homework loads are not that even, with the hardest one taking around 20-25 hours and the easiest one taking about 1 hour.', 'Take it with EZ! Great instructor with clear goals.  The course definitely gave me a better understanding of how programming languages work, and how to leverage them to do things with code!']}, {'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': ['Absolutely worthwhile, covers lots of interesting topics in an engaging way. But pay attention - the course goes by quickly and a lot of complex topics only get covered fairly briefly.', 'Good to have strong programming knowledge before taking this class.', 'The course is still taking form, it should improve in future iterations', 'Attend the first lecture to know whether it teaches the same thing as you thought', 'Programming languages is a high-level introduction to some ideas in PLs. You touch on a lot of PL ideas, and implement some cool assignments.', \"It's a new course, so there's a few kinks here and there, but overall a good class\", 'I never had any experience with the topics in this class beforehand. Be prepared to learn a lot on your own and dedicate time to it.', 'Do the homework extremely carefully because there is grade inflation and homework takes a large part in the final grade. Be especially careful about proof assignments. Their grading can be very hash!', 'You should be familiar with Lua, OCaml and Rust before taking this course, or you will waste 10 hours a week debugging with an unfamiliar language.', \"Assignments are tough. And don't start assignments until they fix all the bugs.\", 'Will is a great instructor and super enthusiastic about the material', 'Will is a great instructor and I enjoyed the class overall. However, I found class assignments to be more work than I expected.', 'Very interesting material and an enthusiast instructor. Doesn\u00e2\u20ac\u2122t go much into depth but a decent overview', 'homework is hard and make sure  you go to office hour early. Will is a great instructor and topics he chose are interesting.', 'Students should take this course if Will Crichton is teaching it. He covers a lot of material but makes it very easy to digest.', 'If you learn well by doing projects, this is a good class for you.', \"Start the assignments/read through them early. It's far more valuable to physically show up to lectures\", 'Interesting class if you want to learn about general ideas behind programming languages. Also get to have some familiarity with new languages!', 'Excellent introduction to different features / considerations for different types of programming languages.  Assignments generally were more application-focused than theoretical with some exceptions.', \"Interesting material, though I would rather have more in-depth assignments every two weeks rather than weekly assignments.  I appreciated Will's lectures and code examples, they were generally clear and well structured.  My main complaint was that there were hidden tests on the homework assignments that were completely unknown to us, so we couldn't even see if our code was crashing.  I would prefer a 221-style approach where the hidden tests are shared, but without the results -- so it's possible to see whether the code runs, but not what the expected answer is.\", \"The assignments can be tough because you'll have to learn three languages over the course of seven weeks and work with concepts that are likely unfamiliar: you'll learn a lot but it will be a grind towards the beginning of the course.\", 'This course is definitely a difficult one but it is surely worth it. I think the class ended up being more about learning the three languages, rather than necessarily the \"linguistics\" of programming languages, but there was still plenty of time and energy on comparison. Will is a stellar and didactic teacher, take it with him if you can!', 'Interesting and enjoyable course. The lectures were generally good, although sometimes confusing (especially the ones on Rust). Assignment difficulty was not too bad usually but a few of the assignments took a very long time.', 'CS 242 is a class whose character completely depends on the instructor. I loved that Will Crichton was a very enthusiastic lecturer and cared a lot about his students. While I learned a lot of in the class about programming languages, the material was not presented in a way that helped me understand why the things taught in lecture were meaningful. I am left with many unanswered questions including: Why are functional languages designed the way they are? Why study lambda calculus, and how does lambda calculus relate to modern programming languages? Why did we study Lua, as opposed to any other (more popular) scripting language?', 'Will is a great instructor. He brings energy to class and makes you excited to learn. The assignments are, for the most part, really interesting and pretty challenging. Be prepared to put in a good amount of work. The final project is non-trivial so be sure to set aside enough time for it.', 'Will is a very passionate lecturer, which makes the topic very interesting. Unfortunately he has some unrealistic expectations for the amount of time students will put into the course. At the beginning of the course it was fine, but a very difficult final assignment combined with a final project where putting in the \"average\" amount of time at 30 hours would give you a B made the class turn sour in the end. Overall the class ramped up a huge amount due to the requirements of the final project and required much more work than 3 units. Hopefully the course staff will get the class more in line with a reasonable workload in future iterations.', \"It was a good course for its first iteration, but the languages chosen didn't feel like a win over what I already knew.\", \"Take it! You learn a lot, it's both theoretically and practically very useful, and you learn a lot. The programming assignments are all very interesting and the project at the end can be taken in many different interesting directions.\", 'I would recommend ti to anyone with an interest in learning more about the variations between programming languages and the reasons to pick certain languages for different projects.']}, {'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': [\"This course is a must-take, period.  While it can seem abstract in the beginning, it builds a foundation for understanding software that extends beyond any particular tools. Furthermore, it's a look into the future of how software can be built.\", 'Good course', \"This course is a mix of theory and practical programming languages. It's not all theoretical, but it isn't just a survey of different programming languages. It provides a theoretical foundation, and exposure to different styles of programming languages, all while motivating their different features.\", \"Will is a great lecturer and you'll learn a lot from him!\", \"The pace is very quick and there's really no easy way to catch up if you fall behind. So stay on top of classes and coursework. Instructor and TAs extremely helpful and supportive, want you to succeed.\", 'Will is a great instructor and the assignments for this course are well put together.', \"It's a really well constructed course and Will's lectures are really insightful and impassioned. It's a must-take course for those interested in Programming Languages.\", 'It is a useful course to deeply understand how programming languages are designed, and the course is really well organised.', 'great intro into functional programming and programming language theories', \"it's a lot of time!\", 'Will is an engaging and very talented lecturer and instructor, and cares about his students. The course was challenging because it went over so many different topics, and does take significant effort, but as a result you get a holistic understanding of multiple programming languages. The assignments are very good educational experiences. Highly recommended!', 'Fun, challenging assignments and interesting material. Will is a passionate and knowledgeable lecturer. Would recommend.', 'The course is very worthwhile with a large breadth of topics and programming languages covered.', 'PL as taught by Will is a good class. He listens to student feedback seriously and tries to make the course better, which I appreciate!', 'Very high-quality course.', \"Actually go to lecture or you'll be super confused on the assignments and end up spending way more extra time trying to learn for yourself than you saved by skipping lecture...\", 'You should take it! Especially if you have an interest in theory/compilers/systems/programming languages. Will pours his heart into this class and it really shows. The projects are incredible (although a bit buggy) and the concepts are really interesting.', \"Take it! It was not what I expected and was a lot of work (office hours were a blessing) but it introduced me (thoroughly!) to functional programming concepts that I am now looking into further on my own because I am interested in different ways of thinking about computation and how that will affect the way I approach programming problems in the future. It's also fun to learn a bit of Rust and Lua! (I was not as much of a fan of OCaml and WebAssembly)\", 'Useful for all programmers and computer scientists, from systems engineers to theoreticians.', \"It's an interesting class to take because it reflects on the translation that occurs between the model of computation you have in your head and how you express that model of computation using the tools a programming language gives you. You learn a lot about types and the theory behind them. This class also gives you exposure to more modern programming languages that have neat features that enable you to write better code (both in a correctness sense and a style sense). Will Crichton is an enthusiastic instructor that has put a ton of time into make this a great course. If you're at all interested in the future of programming languages and how programming languages can enable you to better reason about your code, this is a good class to take.\", 'Good introduction to PL theory, functional programming, and some interesting languges', \"This is the best CS class I've taken at Stanford. You're doing yourself a disservice by not taking it. I enjoyed every single lecture, and Will is incredibly passionate about the material. The assignments are fun and not too hard, and you will leave this class with much appreciation for the material.\", \"Pros: Get exposure to a number of less popular languages (OCaml, Rust, Lua) and a better vocabulary for discussing what matters in programming languages (strength of type system and automatic vs. manual memory management). It's still not really clear to me how the Lambda Calculus practically relates to the rest of the course, so the first few weeks were a bit frustrating, but I found it more enjoyable after that.\", 'Will is clearly passionate about the course material, and his teaching style is very engaging. The assignments complement the lectures very well, are reasonably challenging, but never overwhelming.', \"Having taken CS143, I found myself really wishing the 143 was a prereq for this class. I think that would have allowed Will to go much deeper into the material and would have removed redundancies. Will is an awesome and enthusiastic teacher and I was super impressed by the amount of time and effort he put into the course. Given that the assignments were new, it was also amazing that there weren't really any bugs. At times towards the end of the course, I felt like I wasn't learning that much from the assignments besides practicing programming in a new language. It was cool to learn about Rust from a programming languages perspective since it is gaining traction in the systems community.\", 'The course is still being iterated, but the material, professor and assignments are  interesting.', \"Fantastic course, would highly recommend. Reasonable expectations throughout the whole quarter. Will cares a lot about the quality so the course will surely improve.   A note on prereqs: I hadn't taken 110 and was largely fine. There was one assignment where basic knowledge of threads is assumed, but it's something you can learn on the fly.\", 'This is a great class and you will learn so much from it! Will cares a lot that his class is well taught and that assignments will help you reinforce the content of the class. I enjoyed taking this class so much.', \"It's a course that keeps changing, so it's hard to say. It's definitely heavy on both theory and system topics, and it's a sizeable amount of work. You'll learn some cool stuff though, but at a fast pace.\", 'This is one of the best classes I have taken at Stanford. The material is fascinating, and Will is an amazing teacher. He cares a lot about what students get out of the class and effectively designs lectures and assignments to maximize learning. Some parts of the course were challenging and others felt too easy, but Will is receptive to feedback and will probably make adjustments for the next iteration. Overall I learned a ton and consistently enjoyed the class.', 'Great class! Will is super passionate about the topic and he puts a lot of time into the notes and assignments he gives you. He manages to cover a wide span of PL theory and application in just the ten weeks and tests your programming skills.', \"Great class! The beginning is a little more theoretical than you might expect, but it ends up quickly building to practical considerations of languages including OCaml, Rust and Lua, all of which you get to use in homework assignments. Rust is probably the trickiest, because of its borrow checker, but once you learn the idioms used for Rust programming it's not too bad. Homeworks were reasonable in length and effectively illustrated points taught in class. I felt like I got a lot out of this class!\", 'Will Crichton is an excellent instructor.', 'This class is great regardless of your area of focus! It exposes you to a variety of PL representing important concepts that you might not see in other classes, without forcing you to spend too much frustration on syntax. Will is a great lecturer, and the assignments are fun. The workload is reasonable, and a good ratio of time spent to amount learned', \"This course's grading policy has a heavy emphasis on application, but classes and lectures are more theory based.\"]}, {'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': ['This course will change your view about programming languages and it will be starting point for programming language theory', \"Take it. It speaks truth about what matters in designing a good language, and moreover teaches you tools to think in terms of types , lambda calculus, and all the wonderful PL paradigms, so at the end of it you're much better off understanding the status quo of the software industry, and what needs to be improved. I recommend this to anyone who wants to understand modern software.\", 'Will is extremely enthusiastic in teaching. Notes are well organized and help a lot.', 'Get started on the homework early, but Will is a great instructor.', 'Great course!', 'Take it!', 'Be sure to dedicate enough time for the final! (At least DLang can be non-trivial if you try to cram it).', 'Lectures are invaluable as are OH.', 'There is a lot of work, so plan your schedule accordingly.', \"The concepts you learn in this course are crucial to becoming a good programmer for many areas in compute science. Even if you don't use Rust, the way you write programs will change.\", \"I didn't really understand the first week of lectures until about halfway through the quarter; after that, the whole class gets a lot more fun. One of the few 200-level CS classes that's close to the core series in terms of the (high) quality of assignments/lecture notes. Lectures can be a little dry, despite best efforts; there's a good amount of writing proofs on a whiteboard.\", 'Excellent course. Learned so much about PL and I am truly inspired by this course on what the term \"programming language\" means. The contents are extremely organized and assignments are very effective in helping me understand the concepts.', 'Good introduction to PL. The second half of the course becomes more programming intensive / straightforward than the first couple weeks', 'Take it!! It so different than most CS classes at Stanford and Will is a great teacher!', \"Deeply interesting course, very much recommend if you're interested in learning about PL theory or functional programming.\", 'Very good course. Learnt a lot about PL.', 'This course is a lot of fun with functional programming and types. You will learn several languages in a short amount of time, and learn about the language design considerations. Sometimes the time can be long between assignment release and it being ready, bug-free and has correct GradeScope tests, which was the main shortcoming of the version I took this quarter.', \"Really interesting course, the content is more unusual than most other courses and it's a nice trek through how and why programming languages are the way they are (and insight into where the future of languages is headed). This course is not overly theoretical, most of the assignments are a practical deep dive into some aspect of programming language design. I came in with some prior experience with OCaml, but I enjoyed learning Rust and overall the course was a great experience.\", 'I think the course was way harder than it needed to be and learning 3 different programming languages in 1 quarter is definitely challenging,', 'It will make you a better programmer', 'Do not do the RLU project if they are still keeping it for the final.', 'I really loved this class, and it probably will be one of the most impactful on my skills as a software engineer when I leave Stanford. 2nd year MSCS in AI/system.', 'While this course can be fairly time intensive especially in the first few weeks, the material really comes together in the end, and overall the course is a positive experience! Office hours are extremely helpful for understanding the material.', 'One of my favorite courses at Stanford so far. I really like how the class focused on application and also learning through the homeworks rather than through exams, I felt that I learned a lot more this way', 'This class is a systems and theory class. It is less about implementation, although the course description implies otherwise.', 'Take it! This is the only course of its kind in the Stanford CS department', \"Really interesting class at the intersection of theory and systems, which means it bounces back and forth between proof-writing assignments and big coding assignments. Sometimes the assignment releases were delayed, but that's because Will re-wrote a huge portion of the assignments to improve from the previous offering and fit more closely with what we were learning--he's an excellent instructor who cares a whole lot about the course.\", 'The best and most valuable computer science course I have taken at Stanford', \"the course isn't the easiest, especially if you don't have a ton of exposure to some the kinds of math that show up, but Will is one of the best lecturers at Stanford, hands down. You learn a ton and he's an incredible resource all around.\", 'This class was very challenging but very rewarding-- Will is a wonderful, enthusiastic lecturer, and the assignments were interesting', 'It is still getting developed- there were homework typos and some delays, but overall a great course.', \"It's a lot of work and not very fun.\", 'Take it, you will learn so much, but be prepared for the workload! The first two assignments were by far the heaviest of the quarter, but the programming assignments and theorem proving final were a lot of fun.', \"A lot of breadth but not a lot of depth. You'll be exposed to a lot of new concepts and programming languages which you can further explore if you're interested.\", 'This quarter (Fall 19-20) Will made the class significantly more time-consuming at the start (I think) in comparison to the previous offering. I did not expect to be spending 110-like amounts of hours for some of the weeks.  Still, Will taught the class well, with great lecture notes in a way that got the content across, with assignments that actually relate to lectures. So if you have time, down to learn a new perspective on programming (from imperative languages like python, c, etc.), go for it!', \"It's probably a lot harder than you think it will be. That being said, it's a completely different way of thinking about CS, and it's really cool!\", \"Would not recommend this course unless you have a fairly extensive background in math, theory (PHIL 150, CS 157), or have a lot of time on your hands to always be in office hours.  I had the listed prerequisites for the class, yet I constantly felt like I was extremely unprepared.  Don't use other quarter evaluations to determine if you should take this class, it has been completely redone (even though the instructor is the same).  If you do choose to take this class and you get stuck, Will is a nice person and he tries to make time for students, so you might consider reaching out to him for one-on-one help.  Also if you're stuck on assignments, sometimes the order of the parts of an assignment will not be the most intuitive for you personally, so try solving the problems in another order.\", \"Think twice if the first lecture (and Will's passion) lured you into taking this class. For Autumn 2019, the time commitment stats from the previous quarter was a complete lie, so don't trust the stats too much. I have heard multiple students comparing the workload of this class to CS110 (or worse than it). Otherwise, Will and the course staff are very nice and helpful!\", \"This class significantly ramped up compared to every previous iteration. The first two assignments took around 30 hours to complete and many people dropped because the instruction staff didn't really warn people. Every subsequent assignment has been tough but manageable, and they all help you learn a ton. Just be ready to put in the work, but it's worth it.\", 'course can be fun but is somewhat time consuming in random weeks', \"An amazing course! Will is a fantastic lecturer and you should not miss the opportunity to learn about programming language design and the beauty of functional languages. The course gets heavily revamped every quarter, so your mileage may vary, but it is still structured very well regardless and introduces a ton of fascinating and industry-applicable material, whether you are interested in AI, systems, or even full-stack. I would say this is one of the best courses I've taken and will revolutionize the way you think about software development! You'll never get a null pointer exception, segfault, or memory leak ever again.\", \"This class is ever shifting, so while old comments are a decent litmus test, the difficulty of the class may vary wildly. Will is always trying to improve it - but sometimes he swings too far in the difficulty direction. It was very difficult this quarter and had a HUGE workload. However, we all learned a ton, so make of that what you will! Will is an excellent instructor, so if you're at all interested, it's worth the chance - just be wary of the workload.\", 'This is a horrible course. Worst class I have taken at Stanford. The assignment is due on Wednesday and almost all of them have several bugs till Monday. Lecture is essentially useless. Office hours are understaffed. The remote final was not entirely released till 5 days before due date. DO NOT TAKE IT', \"Difficult course, but one of my favorites at Stanford (definitely a change of pace from my AI track courses). Will is a very enthusiastic lecturer and encourages students to learn and attend office hours. His teaching style and enthusiasm is how I managed to stick with going to lecture all quarter (I typically don't).  The course is still being developed so sometimes the assignments have bugs in them, but the teaching staff work hard to get them all ironed out. I'd highly recommend taking this course if you have an otherwise light quarter (weekly psets are time consuming) or might be interested in this topic.\", 'The first half of the course is hard because of the theory, and the second half is hard because of the programming assignments. The assignments dominated all of my time for the quarter. Course staff is friendly but OH can be busy and stressful. The lectures are not super interesting unless you are really excited to hear about parts of the lambda calculus and Rust in extreme detail.', \"Definitely recommend this class if you're interested in learning more about how advances in programming languages can help engineers write safer and better code\", \"This is a really good course. I took it basically on a dare -- without having taken CS110 and with relatively limited programming experience outside of Python and C, and pretty basic knowledge of CS theory. As a result, I think I definitely had to put in more work than the average student. That said, it was an absolutely fascinating (albeit sometimes intense) trip through a field I had known nothing about, and I'm really glad I took it.   The weekly homework assignments were often pretty time-consuming for me, and it would have been nice to get a break here or there. All the same, a great course!\", \"This class is really hard. Period. Take it with plenty of time to work on the assignments, because they'll require that you go back to lecture notes and fix misconceptions. But do take it! The class is very rewarding and you learn a ton. Very few times in my five years at Stanford I've seen a professor that cares as much and will put as much effort into their class (it'll still be hard though).\", \"It's fairly interesting material. Don't be put off by the beginning work.\", 'Will is a great instructor - very passionate and enthusiastic, and good at teaching things in a way that students can understand. My only complaint was that many assignments were remade on the fly, which led to frequent bugs in assignments and TAs vaguely stating that things would be fixed/updates \"soon\" or \"ASAP\" and then not actually fixing/updating for several days.', 'Good class, take', \"It's fairly interesting, but a lot of it was overly pedantic for my taste. Much of the class is taking a pretty simple concept, then finding a way to describe and formalize it to make it seem complex. I guess formal definitions of languages are useful if you want to actually prove your systems are correct, but for most software engineers I really don't see it being useful in the near future. Being able to use a more expressive type system like Rust's is useful, particularly with respect to memory management, type state, and session state, but even Rust felt a bit half baked to me. There are things that seems like they should be really simple yet require hacks in unsafe code. The docs are littered with places where the Rust spec is not fully defined. Will's enthusiasm is fantastic though, and that always got me through the lecture even when I wasn't in love with the material!\", 'I did not know this was a systems class before taking it but I think I still did okay. One of my favorite classes and probably one of the best taught in the CS department. It can be a little difficult at times, but you want to make sure you go to office hours because the teaching staff is amazing and you can work through problems with your peers.  Will cares a lot about teaching and is incredibly knowledgeable, empathetic, and wants you to really know the material by the end of it. 10/10', 'Fantastic course! I wish there were more like this at Stanford. The first couple of weeks are pretty theory-heavy but as the course goes on it becomes more practical and I learnt a lot. Workload is consistent but manageable. Will is a great lecturer that cares a lot about his students and readily takes on feedback.', \"there's nice material in this course. it seems to be evolving a lot so the courseload may vary from previous iterations. homeworks took longer than expected, probably due to initial friction from not knowing a language / formalism\"]}, {'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': ['Interesting material and some cool projects to implement. However, a few of the assignment specs were not that helpful and I needed to go to office hours to properly understand the problems. That was especially the case for the final project.', 'Take this course if you are interested in the theoretical underpinnings of what goes into developing a programming language. Very helpful for learning the functional programming paradigm.', 'The content is interesting, but the course was better organized when Will Crichton taught it, labs, lectures, notes, and homeworks included. Some of the homeworks in this course were cool, but a lot of it felt spoon-fed or not particularly helpful for deepening or reinforcing understanding. There seemed to be a focus on how things work instead of why. This may be attributed to the intention of creating a generally lower-intensity course. The fun things were: problems in lambda calculus/ski calculus, the coroutines/continuations homework, and the final project.', 'The homeworks were scoped to be around 10 hours when I took the class but the variance was closer to 10-20 hours. The Rust project was very long (you can choose from multiple projects) -- say ~30-40 hours -- but was rewarding. New instructor and new homeworks / projects for this quarter, so likely to change & improve.', 'Interesting materials, but the lectures sometimes felt poorly-paced. The assignments were useful, but the specs were often confusing, and the quality of help from the TAs was hugely inconsistent. The final project was useful and interesting, but again the difficulty of the three choices for our projects was very skewed.', \"If you're interested in the theory behind functional programming, take this course. If you're interested in how fundamental problems in programming languages are implemented in real languages, I would not recommend this course. The majority of the homeworks were built around lambda calculus variants, which  are theoretically interesting but not particularly practical. There is a rust assignment that was cool, but the majority of the course was not about commonly used languages. In the end I found the course too theoretical and only very loosely applicable.\", '> Alex is pretty awesome! Cares a *lot* about students and always happy to take questions.nnnn> Overall thread of class is pretty unclear, though individual lectures are very coherent.nnnn> Pi calculus assignment is extremely challenging. Get on that one ASAP!', 'This is a fantastic course that taught me quite a lot about thinking differently about programming languages. The quality of instruction was fantastic! Consider taking this course!', 'Pretty well-taught and engaging material if you have any interest in the implementation of languages or programming languages theory -- the course definitely tends to the theoretical side. Assignments were not too challenging, but take advantage of office hours and start on the final project early!', \"This course is so fun! It does not require too much work, and you get to play around with really interesting ideas in programming languages. I definitely recommend it if you've ever been interested in programming language theory.\", \"This course was a bit of a letdown. I came in with high expectations, but they quickly fell flat as soon as I realized that the class was focused more on theory than on systems. I stopped going to lecture at the beginning of week 3 because of how confusing they were. Instead, I would look at the week's pset to figure out what I needed to learn; read Wikipedia, blog posts, and research papers for a few hours until I felt like I had a solid grasp of the material; and then complete the pset. On the one hand, it was frustrating that lectures were useless to me. On the other hand, I realized that I can learn difficult material on my own. And, in the end, I learned Rust, which was one of the reasons I was interested in taking the class in the first place. Overall, not the worst class in the world, but most definitely not the best class either.\", \"This is one of the most interesting courses I've had the opportunity to take at Stanford.nnIt's truly wonderful to learn programming paradigms and language features in lecture, then immediately be able to interact with those concepts in the assignments.nnThe assignments do a great job of ensuring you understand the material and the final project is extremely interesting and enjoyable.\", 'Some of the assignments were fun, but the project was a bit disorganized and took significantly longer than the assignments. The class definitely was not as practical as I was hoping it would be.', \"It's an interesting class looking at programming languages through an academic lens. The benefit is that you get a whole new way of looking at languages: lambda calculi, object calculi, typed vs untyped, etc. The issue is that for every homework it felt like I had missed half of the lectures.... even though I had poured over the details. I constantly had the feeling that I had to fill in about half of the course myself to do the homeworks. A lot of important information is communicated over Edstem rather than in the homework itself. Also, the Rust final project is a HUGE step up from the Rust homework, and the brief is poorly written and confusing. I hope the project brief will be revised in future.\", \"This class is pretty hard, the final project especially. Not ideal with a tough course load. You'll def improve as a programmer from the homeworks though.\", \"It's a fine course with some interesting things here and there but by and large quite tedious. You spend a lot of time doing the same recursive translation or type checking logic for different simple languages. It's good for insight the first time but pretty pointless to do it again and again. The final projects were kind of cool but definitely really long.nnnnIn terms of teaching, Prof. Aiken is well-intentioned and mostly okay but he could really benefit from working on his teaching process. For example, he needs to understand that you can't put big blocks of equations or maths working all at once on a slide and then just talk through them while highlighting random stuff. Either break the slides up line by line (see how Keith Schwartz does equations in slides) or work through them by hand live. You will catch a lot of the errors if you break up your presentation like this. Also space out your equations and don't use confusing variable names. I swear there was a slide where an equation had two plus symbols on a line and one of them was an operator in the language and the other was mathematical plus and there was literally no indication that those were supposed to be different until someone asked. Just use colour/bold/font or one of 6 other modalities to clarify things more.\", 'Most lectures are like, \"here's a concept; here's how it's formalized with lambda calculus; let's do some examples to feel it out.\" Aiken teaches the material solidly. Most homeworks are like, \"here's some funky language that formalizes a concept; make it do a thing.\" Overall, things are very fun, brain-teaser-y, and satisfying to complete, but it didn't feel dramatically deep or explicitly useful to a lot of subdisciplines of CS.', \"Definitely a great option for a systems PhD breadth class if you're not that interested in systems. Homeworks aren't too much work and are pretty interesting.\", \"Fun class! I think the class is changing a little bit, but we went over different simple programming languages and theory associated with them. Good background just for generally understanding type checking and early programming language theory. Didn't write in as many new languages as expected, as I had heard from previous versions of the class, but it was still a fun exercise to parse through syntax.\", 'Great course!', 'Great way to learn about non mainstream programming languages and techniques.', \"Probably a good class if you are interested in the area/potentially doing research in the area. The fact that we are introduced to the Rust programming language likely has practical benefits too. As a PhD student taking it for a breadth requirement I think it's decently hard work but manageable.\", 'Good course on underlying theory for programming languages', 'This course was good exposure but the theoretical side of this content felt kind of loose and the projects felt like a scramble to understand what was going on.', \"This course was really unfamiliar to me starting out, so most of the basic concepts were really hard to understand. It will probably be substantially easier for you if you already know lambda calculus, typechecking, etc. The problem sets were extremely hard to understand at first, and were a pretty heavy workload because there was a new one each week with no break. The office hours help for the problem sets, but they are still very challenging and it's hard to get all of your questions answered since office hours are fairly crowded. The lectures were all interesting, understandable, and organized/well-explained, but there was just so much new material (and difficult notation) that understanding the lectures was not enough to feel confident about the material. The projects were interesting and cool, but also a very heavy workload where sometimes understanding is just assumed for things that are completely new to the students.\", 'Take advantage of office hours and the forum. Jason was really helpful in office hours and made some of the abstract concepts a lot easier to understand.', \"Take it if the theoretical aspects of programming languages excites you. For example, if you're passionate about getting to learn more about the type system, or program in purely functional ways\", \"If you're interested in programming languages, take this course. However, be advised that this course is very heavily focused on the theory of programming languages (not half theory and half systems as the description implies). The majority of the lectures were working through various proofs of various properties of types and different calculi; it spent very little time working with real-world programming languages. The assignments were in Python, Racket, and Rust, but that was incidental\u2014we were told to read a handout that covered the basics of each language before starting the assignments, but otherwise there was no real explanation of the up or downsides of each. Some of the assignments were also written ambiguously or under-specified, which led to issues when trying to figure out what they meant.\", 'It's an interesting introduction to programming paradigms outside the most common languages. The material is a bit dryly presented in class, but for the most part the programming assignments are pretty easy. The \"final project\" is basically just a big programming assigment.']}]\nmain = Main(courses_to_take = [CoursesToTake(course_0_details: Course = Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3), course_1_details: Course = 'None', more_courses_2: bool = 'None', course_2_details: Course = 'None', more_courses_3: bool = 'None', course_3_details: Course = 'None', confirm: bool = 'None')], student_info_details = student_info)\nmain.result = {'success': True, 'transaction_id': UUID('97281e4a-5155-4eff-b85a-7a2ef958297a')}\ncourse = Course(course_name = 'CS 148', grade_type = 'Credit/No Credit', course_num_units = 3)\ncourse_0 = Course(course_name = 'CS 148', grade_type = 'Credit/No Credit', course_num_units = 3)\ncourse_2 = Course(course_num_units = 3)\ncourses_to_take_1 = CoursesToTake(course_0_details = course, course_1_details = [Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3)], more_courses_2 = False, more_courses_3 = False)\nstudent_info = StudentInfo(student_name = 'Aakash Mishra', student_id = '06375727', student_email_address = 'aamishra@stanford.edu', is_international_student = False)\n", "system_action": ["AskField(courses_to_take_1, course_1_details, The course details for second course, such as name, grade type and units)"], "user_target_sp": "Answer(\"SELECT c.course_codes, c.course_id, c.title, r.reviews FROM courses c JOIN ratings r ON c.course_id = r.course_id WHERE 'CS 242' = ANY(c.course_codes) LIMIT 5;\", {}, ['courses', 'ratings'], 'What are the reviews for the course CS 242?')", "user_target": "answer = Answer(\"SELECT c.course_codes, c.course_id, c.title, r.reviews FROM courses c JOIN ratings r ON c.course_id = r.course_id WHERE 'CS 242' = ANY(c.course_codes) LIMIT 5;\", {}, ['courses', 'ratings'], 'What are the reviews for the course CS 242?')", "user_target_suql": "SELECT c.course_codes, c.course_id, c.title, r.reviews FROM courses c JOIN ratings r ON c.course_id = r.course_id WHERE 'CS 242' = ANY(c.course_codes) LIMIT 5;"}, {"user": "I would like to enroll in this course for credit, for 3 credits", "bot": "Could you please provide the course details for the second course you would like to take, such as the course name, grade type, and the number of units?", "turn_context": "course_3 = Course(course_name = 'CS 242', grade_type = 'Credit/No Credit', course_num_units = 3)\nmain = Main(courses_to_take = [CoursesToTake(course_0_details: Course = Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3), course_1_details: Course = 'None', more_courses_2: bool = 'None', course_2_details: Course = 'None', more_courses_3: bool = 'None', course_3_details: Course = 'None', confirm: bool = 'None')], student_info_details = StudentInfo(student_name: str = 'Aakash Mishra', student_id: str = '06375727', student_email_address: str = 'aamishra@stanford.edu', is_international_student: bool = False))\nmain.result = {'success': True, 'transaction_id': UUID('97281e4a-5155-4eff-b85a-7a2ef958297a')}\ncourses_to_take_1 = CoursesToTake(course_0_details = Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3), course_1_details = [Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3), Course(course_name: str = 'CS 242', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3)], more_courses_2 = False, more_courses_3 = False)\ncourse_1 = Course(course_name = 'CS 242', grade_type = 'Credit/No Credit', course_num_units = 3)\n", "global_context": "answer = answer('What are the reviews for the course CS 242?')\nanswer.result = [{'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': ['Do it!', \"In this class you'll look how/why inheritance is implemented in Java/C  , learn a bit of Haskell and look at the functional side, you'll know how the vtables are structured in C  , and implement a Haskell interpreter in JavaScript as one of the first homeworks. Enjoy, lucky student! :D The first few weeks homeworks take a lot more time and effort than the following ones. Make sure you read extra reading materials and referenced papers, they are fun!\", 'no', 'Do a Haskell tutorial first.', 'Look at homeworks early to determine which ones will require extra time.', \"The first two assignments are probably the hardest ones and require some time to finish. The rest of the assignments are pretty straightforward. The slides do. It contain much information. You need to watch the lectures multiple times to get what they mean. The midterm is much easier than the final, but in general you'll have enough time for both. It's pretty hard to find your way in to this class but once you get the concepts and style, it's much easier to follow. This being said I don't know how helpful this information will be since Edward was teaching this class for the last time and the class itself might change quite a bit.\", 'Moderately Difficult and Somewhat Competitive', 'Homework assignments are a fun challenge and highlight key concepts.', \"Unfortunately Edward is graduating and will not be teaching it in the future :( It's still a valuable class but I'm very sad that future students will miss his excellent instruction.\", 'Absolutely take it', 'The course assignments (with exception of the written assignment) are awesome and will teach you a lot.', 'Content is very interesting. Lectures are hard to follow. Assignments not a lot of work.', \"Edward is very knowledgable and has deep insights on various languages and everything related to the course, but not very experienced on how to lecture and let us understand well (but given he's still a Phd student, you cannot expect a teaching veteran). Minds usually jump, and if you want to get to know every part, a lot of extra hours of self-exploration is expected.\", \"Fantastic course if you're interested in learning more about functional programming and the core ideas behind programming languages. You end up seeing a lot of really cool topics and ideas! The class does assume that you have a decent amount of exposure to systems and different languages though, and while it's definitely possible to catch up, the lecturers do seem to speed past some of the material.\", 'This is a really well-taught course with lectures that are more enjoyable and engaging than most. Edward is a natural lecturer and clearly puts a lot of thought into how to present concepts in an accessible and appealing way. The workload is fairly light.', \"It's a lot of small topics, but you will leave feeling a lot more equipped to tackle new languages and concepts.\", 'It is a very helpful course -- I recommend this course.', \"It's rather difficult despite the innocuous name.\", 'Highly recommend!', \"Very interesting, and very useful. Devote time to the labs and you'll have a leg up on understanding for the exams.\", \"If you are interested in a theoretical background behind programming languages definitely take it! Don't take it if you're interested in learning functional programming or objected oriented programming. It's not a class that teach us the paradigms but benefits of each paradigm.\", 'This is a good course for an overview on programming languages. You need to work on your own, or take more computer science courses to develop this subject.', 'Edward has great drawings. Honestly, I really liked this class. The workload gets lighter as the course goes on.', 'Unfortunately the great teacher will no longer be teaching...so who knows?', 'Great course and professor, very interesting without being too much work.', 'You will learn a lot of material.  Most of it will not be needed to do the homeworks which are intriguing but not very challenging.  People tended to do very well on the homeworks, so I am sure grades were determined pretty much by the midterm and final grades.', 'This is a great class, and Edward is a fantastic teacher \u00e2\u20ac\u201d going to class is fun!', \"Much of the homework feels needlessly complex. I struggled for hours on syntax problems with Haskell, etc. The concepts from lecture are interesting, and are understood within a few hours. However, you will spend *many* more hours thereafter struggling on silly bugs. I don't think that the amount of time put into the coding assignments is worth it for the knowledge that you gain. I do believe that the lectures are worth it, though.\", \"The course isn't that bad, and you learn a lot.\", \"Very insightful, and good for people who don't quite understand the non-obvious, underlying differences between popular languages like C  , Java, JavaScript, and Haskell.\", \"Assignments are easy but the tests are really difficult. Make sure to go to office hours often if you're not understanding concepts.\", 'Definitely recommend if you are thinking of taking 143 or have taken 143 and enjoyed the material. I think the two classes complement each other nicely.', \"I felt like this course taught me a lot of superficially interesting material that I don't think will be particularly helpful in real life but was at least kind of cool to learn. Not too much work.\", \"It's a class with a good useful-knowledge-to-time-spent ratio.\", \"A great class if you are interested in programming languages, but keep in mind it can get very challenging. Really touches on the lower level of languages, shouldn't be taken to broaden your skill in languages but rather your knowledge of their workings.\", \"Take this course! It's so much fun! Do don't really need any prereq's except for familiarity with Javascript and even that is a loose prereq. Every assignment is clearly laid out for you, step-by-step.\", 'The instructions are very thorough. You will learn a lot about research language Haskell and web language Javascript. The homework loads are not that even, with the hardest one taking around 20-25 hours and the easiest one taking about 1 hour.', 'Take it with EZ! Great instructor with clear goals.  The course definitely gave me a better understanding of how programming languages work, and how to leverage them to do things with code!']}, {'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': ['Absolutely worthwhile, covers lots of interesting topics in an engaging way. But pay attention - the course goes by quickly and a lot of complex topics only get covered fairly briefly.', 'Good to have strong programming knowledge before taking this class.', 'The course is still taking form, it should improve in future iterations', 'Attend the first lecture to know whether it teaches the same thing as you thought', 'Programming languages is a high-level introduction to some ideas in PLs. You touch on a lot of PL ideas, and implement some cool assignments.', \"It's a new course, so there's a few kinks here and there, but overall a good class\", 'I never had any experience with the topics in this class beforehand. Be prepared to learn a lot on your own and dedicate time to it.', 'Do the homework extremely carefully because there is grade inflation and homework takes a large part in the final grade. Be especially careful about proof assignments. Their grading can be very hash!', 'You should be familiar with Lua, OCaml and Rust before taking this course, or you will waste 10 hours a week debugging with an unfamiliar language.', \"Assignments are tough. And don't start assignments until they fix all the bugs.\", 'Will is a great instructor and super enthusiastic about the material', 'Will is a great instructor and I enjoyed the class overall. However, I found class assignments to be more work than I expected.', 'Very interesting material and an enthusiast instructor. Doesn\u00e2\u20ac\u2122t go much into depth but a decent overview', 'homework is hard and make sure  you go to office hour early. Will is a great instructor and topics he chose are interesting.', 'Students should take this course if Will Crichton is teaching it. He covers a lot of material but makes it very easy to digest.', 'If you learn well by doing projects, this is a good class for you.', \"Start the assignments/read through them early. It's far more valuable to physically show up to lectures\", 'Interesting class if you want to learn about general ideas behind programming languages. Also get to have some familiarity with new languages!', 'Excellent introduction to different features / considerations for different types of programming languages.  Assignments generally were more application-focused than theoretical with some exceptions.', \"Interesting material, though I would rather have more in-depth assignments every two weeks rather than weekly assignments.  I appreciated Will's lectures and code examples, they were generally clear and well structured.  My main complaint was that there were hidden tests on the homework assignments that were completely unknown to us, so we couldn't even see if our code was crashing.  I would prefer a 221-style approach where the hidden tests are shared, but without the results -- so it's possible to see whether the code runs, but not what the expected answer is.\", \"The assignments can be tough because you'll have to learn three languages over the course of seven weeks and work with concepts that are likely unfamiliar: you'll learn a lot but it will be a grind towards the beginning of the course.\", 'This course is definitely a difficult one but it is surely worth it. I think the class ended up being more about learning the three languages, rather than necessarily the \"linguistics\" of programming languages, but there was still plenty of time and energy on comparison. Will is a stellar and didactic teacher, take it with him if you can!', 'Interesting and enjoyable course. The lectures were generally good, although sometimes confusing (especially the ones on Rust). Assignment difficulty was not too bad usually but a few of the assignments took a very long time.', 'CS 242 is a class whose character completely depends on the instructor. I loved that Will Crichton was a very enthusiastic lecturer and cared a lot about his students. While I learned a lot of in the class about programming languages, the material was not presented in a way that helped me understand why the things taught in lecture were meaningful. I am left with many unanswered questions including: Why are functional languages designed the way they are? Why study lambda calculus, and how does lambda calculus relate to modern programming languages? Why did we study Lua, as opposed to any other (more popular) scripting language?', 'Will is a great instructor. He brings energy to class and makes you excited to learn. The assignments are, for the most part, really interesting and pretty challenging. Be prepared to put in a good amount of work. The final project is non-trivial so be sure to set aside enough time for it.', 'Will is a very passionate lecturer, which makes the topic very interesting. Unfortunately he has some unrealistic expectations for the amount of time students will put into the course. At the beginning of the course it was fine, but a very difficult final assignment combined with a final project where putting in the \"average\" amount of time at 30 hours would give you a B made the class turn sour in the end. Overall the class ramped up a huge amount due to the requirements of the final project and required much more work than 3 units. Hopefully the course staff will get the class more in line with a reasonable workload in future iterations.', \"It was a good course for its first iteration, but the languages chosen didn't feel like a win over what I already knew.\", \"Take it! You learn a lot, it's both theoretically and practically very useful, and you learn a lot. The programming assignments are all very interesting and the project at the end can be taken in many different interesting directions.\", 'I would recommend ti to anyone with an interest in learning more about the variations between programming languages and the reasons to pick certain languages for different projects.']}, {'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': [\"This course is a must-take, period.  While it can seem abstract in the beginning, it builds a foundation for understanding software that extends beyond any particular tools. Furthermore, it's a look into the future of how software can be built.\", 'Good course', \"This course is a mix of theory and practical programming languages. It's not all theoretical, but it isn't just a survey of different programming languages. It provides a theoretical foundation, and exposure to different styles of programming languages, all while motivating their different features.\", \"Will is a great lecturer and you'll learn a lot from him!\", \"The pace is very quick and there's really no easy way to catch up if you fall behind. So stay on top of classes and coursework. Instructor and TAs extremely helpful and supportive, want you to succeed.\", 'Will is a great instructor and the assignments for this course are well put together.', \"It's a really well constructed course and Will's lectures are really insightful and impassioned. It's a must-take course for those interested in Programming Languages.\", 'It is a useful course to deeply understand how programming languages are designed, and the course is really well organised.', 'great intro into functional programming and programming language theories', \"it's a lot of time!\", 'Will is an engaging and very talented lecturer and instructor, and cares about his students. The course was challenging because it went over so many different topics, and does take significant effort, but as a result you get a holistic understanding of multiple programming languages. The assignments are very good educational experiences. Highly recommended!', 'Fun, challenging assignments and interesting material. Will is a passionate and knowledgeable lecturer. Would recommend.', 'The course is very worthwhile with a large breadth of topics and programming languages covered.', 'PL as taught by Will is a good class. He listens to student feedback seriously and tries to make the course better, which I appreciate!', 'Very high-quality course.', \"Actually go to lecture or you'll be super confused on the assignments and end up spending way more extra time trying to learn for yourself than you saved by skipping lecture...\", 'You should take it! Especially if you have an interest in theory/compilers/systems/programming languages. Will pours his heart into this class and it really shows. The projects are incredible (although a bit buggy) and the concepts are really interesting.', \"Take it! It was not what I expected and was a lot of work (office hours were a blessing) but it introduced me (thoroughly!) to functional programming concepts that I am now looking into further on my own because I am interested in different ways of thinking about computation and how that will affect the way I approach programming problems in the future. It's also fun to learn a bit of Rust and Lua! (I was not as much of a fan of OCaml and WebAssembly)\", 'Useful for all programmers and computer scientists, from systems engineers to theoreticians.', \"It's an interesting class to take because it reflects on the translation that occurs between the model of computation you have in your head and how you express that model of computation using the tools a programming language gives you. You learn a lot about types and the theory behind them. This class also gives you exposure to more modern programming languages that have neat features that enable you to write better code (both in a correctness sense and a style sense). Will Crichton is an enthusiastic instructor that has put a ton of time into make this a great course. If you're at all interested in the future of programming languages and how programming languages can enable you to better reason about your code, this is a good class to take.\", 'Good introduction to PL theory, functional programming, and some interesting languges', \"This is the best CS class I've taken at Stanford. You're doing yourself a disservice by not taking it. I enjoyed every single lecture, and Will is incredibly passionate about the material. The assignments are fun and not too hard, and you will leave this class with much appreciation for the material.\", \"Pros: Get exposure to a number of less popular languages (OCaml, Rust, Lua) and a better vocabulary for discussing what matters in programming languages (strength of type system and automatic vs. manual memory management). It's still not really clear to me how the Lambda Calculus practically relates to the rest of the course, so the first few weeks were a bit frustrating, but I found it more enjoyable after that.\", 'Will is clearly passionate about the course material, and his teaching style is very engaging. The assignments complement the lectures very well, are reasonably challenging, but never overwhelming.', \"Having taken CS143, I found myself really wishing the 143 was a prereq for this class. I think that would have allowed Will to go much deeper into the material and would have removed redundancies. Will is an awesome and enthusiastic teacher and I was super impressed by the amount of time and effort he put into the course. Given that the assignments were new, it was also amazing that there weren't really any bugs. At times towards the end of the course, I felt like I wasn't learning that much from the assignments besides practicing programming in a new language. It was cool to learn about Rust from a programming languages perspective since it is gaining traction in the systems community.\", 'The course is still being iterated, but the material, professor and assignments are  interesting.', \"Fantastic course, would highly recommend. Reasonable expectations throughout the whole quarter. Will cares a lot about the quality so the course will surely improve.   A note on prereqs: I hadn't taken 110 and was largely fine. There was one assignment where basic knowledge of threads is assumed, but it's something you can learn on the fly.\", 'This is a great class and you will learn so much from it! Will cares a lot that his class is well taught and that assignments will help you reinforce the content of the class. I enjoyed taking this class so much.', \"It's a course that keeps changing, so it's hard to say. It's definitely heavy on both theory and system topics, and it's a sizeable amount of work. You'll learn some cool stuff though, but at a fast pace.\", 'This is one of the best classes I have taken at Stanford. The material is fascinating, and Will is an amazing teacher. He cares a lot about what students get out of the class and effectively designs lectures and assignments to maximize learning. Some parts of the course were challenging and others felt too easy, but Will is receptive to feedback and will probably make adjustments for the next iteration. Overall I learned a ton and consistently enjoyed the class.', 'Great class! Will is super passionate about the topic and he puts a lot of time into the notes and assignments he gives you. He manages to cover a wide span of PL theory and application in just the ten weeks and tests your programming skills.', \"Great class! The beginning is a little more theoretical than you might expect, but it ends up quickly building to practical considerations of languages including OCaml, Rust and Lua, all of which you get to use in homework assignments. Rust is probably the trickiest, because of its borrow checker, but once you learn the idioms used for Rust programming it's not too bad. Homeworks were reasonable in length and effectively illustrated points taught in class. I felt like I got a lot out of this class!\", 'Will Crichton is an excellent instructor.', 'This class is great regardless of your area of focus! It exposes you to a variety of PL representing important concepts that you might not see in other classes, without forcing you to spend too much frustration on syntax. Will is a great lecturer, and the assignments are fun. The workload is reasonable, and a good ratio of time spent to amount learned', \"This course's grading policy has a heavy emphasis on application, but classes and lectures are more theory based.\"]}, {'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': ['This course will change your view about programming languages and it will be starting point for programming language theory', \"Take it. It speaks truth about what matters in designing a good language, and moreover teaches you tools to think in terms of types , lambda calculus, and all the wonderful PL paradigms, so at the end of it you're much better off understanding the status quo of the software industry, and what needs to be improved. I recommend this to anyone who wants to understand modern software.\", 'Will is extremely enthusiastic in teaching. Notes are well organized and help a lot.', 'Get started on the homework early, but Will is a great instructor.', 'Great course!', 'Take it!', 'Be sure to dedicate enough time for the final! (At least DLang can be non-trivial if you try to cram it).', 'Lectures are invaluable as are OH.', 'There is a lot of work, so plan your schedule accordingly.', \"The concepts you learn in this course are crucial to becoming a good programmer for many areas in compute science. Even if you don't use Rust, the way you write programs will change.\", \"I didn't really understand the first week of lectures until about halfway through the quarter; after that, the whole class gets a lot more fun. One of the few 200-level CS classes that's close to the core series in terms of the (high) quality of assignments/lecture notes. Lectures can be a little dry, despite best efforts; there's a good amount of writing proofs on a whiteboard.\", 'Excellent course. Learned so much about PL and I am truly inspired by this course on what the term \"programming language\" means. The contents are extremely organized and assignments are very effective in helping me understand the concepts.', 'Good introduction to PL. The second half of the course becomes more programming intensive / straightforward than the first couple weeks', 'Take it!! It so different than most CS classes at Stanford and Will is a great teacher!', \"Deeply interesting course, very much recommend if you're interested in learning about PL theory or functional programming.\", 'Very good course. Learnt a lot about PL.', 'This course is a lot of fun with functional programming and types. You will learn several languages in a short amount of time, and learn about the language design considerations. Sometimes the time can be long between assignment release and it being ready, bug-free and has correct GradeScope tests, which was the main shortcoming of the version I took this quarter.', \"Really interesting course, the content is more unusual than most other courses and it's a nice trek through how and why programming languages are the way they are (and insight into where the future of languages is headed). This course is not overly theoretical, most of the assignments are a practical deep dive into some aspect of programming language design. I came in with some prior experience with OCaml, but I enjoyed learning Rust and overall the course was a great experience.\", 'I think the course was way harder than it needed to be and learning 3 different programming languages in 1 quarter is definitely challenging,', 'It will make you a better programmer', 'Do not do the RLU project if they are still keeping it for the final.', 'I really loved this class, and it probably will be one of the most impactful on my skills as a software engineer when I leave Stanford. 2nd year MSCS in AI/system.', 'While this course can be fairly time intensive especially in the first few weeks, the material really comes together in the end, and overall the course is a positive experience! Office hours are extremely helpful for understanding the material.', 'One of my favorite courses at Stanford so far. I really like how the class focused on application and also learning through the homeworks rather than through exams, I felt that I learned a lot more this way', 'This class is a systems and theory class. It is less about implementation, although the course description implies otherwise.', 'Take it! This is the only course of its kind in the Stanford CS department', \"Really interesting class at the intersection of theory and systems, which means it bounces back and forth between proof-writing assignments and big coding assignments. Sometimes the assignment releases were delayed, but that's because Will re-wrote a huge portion of the assignments to improve from the previous offering and fit more closely with what we were learning--he's an excellent instructor who cares a whole lot about the course.\", 'The best and most valuable computer science course I have taken at Stanford', \"the course isn't the easiest, especially if you don't have a ton of exposure to some the kinds of math that show up, but Will is one of the best lecturers at Stanford, hands down. You learn a ton and he's an incredible resource all around.\", 'This class was very challenging but very rewarding-- Will is a wonderful, enthusiastic lecturer, and the assignments were interesting', 'It is still getting developed- there were homework typos and some delays, but overall a great course.', \"It's a lot of work and not very fun.\", 'Take it, you will learn so much, but be prepared for the workload! The first two assignments were by far the heaviest of the quarter, but the programming assignments and theorem proving final were a lot of fun.', \"A lot of breadth but not a lot of depth. You'll be exposed to a lot of new concepts and programming languages which you can further explore if you're interested.\", 'This quarter (Fall 19-20) Will made the class significantly more time-consuming at the start (I think) in comparison to the previous offering. I did not expect to be spending 110-like amounts of hours for some of the weeks.  Still, Will taught the class well, with great lecture notes in a way that got the content across, with assignments that actually relate to lectures. So if you have time, down to learn a new perspective on programming (from imperative languages like python, c, etc.), go for it!', \"It's probably a lot harder than you think it will be. That being said, it's a completely different way of thinking about CS, and it's really cool!\", \"Would not recommend this course unless you have a fairly extensive background in math, theory (PHIL 150, CS 157), or have a lot of time on your hands to always be in office hours.  I had the listed prerequisites for the class, yet I constantly felt like I was extremely unprepared.  Don't use other quarter evaluations to determine if you should take this class, it has been completely redone (even though the instructor is the same).  If you do choose to take this class and you get stuck, Will is a nice person and he tries to make time for students, so you might consider reaching out to him for one-on-one help.  Also if you're stuck on assignments, sometimes the order of the parts of an assignment will not be the most intuitive for you personally, so try solving the problems in another order.\", \"Think twice if the first lecture (and Will's passion) lured you into taking this class. For Autumn 2019, the time commitment stats from the previous quarter was a complete lie, so don't trust the stats too much. I have heard multiple students comparing the workload of this class to CS110 (or worse than it). Otherwise, Will and the course staff are very nice and helpful!\", \"This class significantly ramped up compared to every previous iteration. The first two assignments took around 30 hours to complete and many people dropped because the instruction staff didn't really warn people. Every subsequent assignment has been tough but manageable, and they all help you learn a ton. Just be ready to put in the work, but it's worth it.\", 'course can be fun but is somewhat time consuming in random weeks', \"An amazing course! Will is a fantastic lecturer and you should not miss the opportunity to learn about programming language design and the beauty of functional languages. The course gets heavily revamped every quarter, so your mileage may vary, but it is still structured very well regardless and introduces a ton of fascinating and industry-applicable material, whether you are interested in AI, systems, or even full-stack. I would say this is one of the best courses I've taken and will revolutionize the way you think about software development! You'll never get a null pointer exception, segfault, or memory leak ever again.\", \"This class is ever shifting, so while old comments are a decent litmus test, the difficulty of the class may vary wildly. Will is always trying to improve it - but sometimes he swings too far in the difficulty direction. It was very difficult this quarter and had a HUGE workload. However, we all learned a ton, so make of that what you will! Will is an excellent instructor, so if you're at all interested, it's worth the chance - just be wary of the workload.\", 'This is a horrible course. Worst class I have taken at Stanford. The assignment is due on Wednesday and almost all of them have several bugs till Monday. Lecture is essentially useless. Office hours are understaffed. The remote final was not entirely released till 5 days before due date. DO NOT TAKE IT', \"Difficult course, but one of my favorites at Stanford (definitely a change of pace from my AI track courses). Will is a very enthusiastic lecturer and encourages students to learn and attend office hours. His teaching style and enthusiasm is how I managed to stick with going to lecture all quarter (I typically don't).  The course is still being developed so sometimes the assignments have bugs in them, but the teaching staff work hard to get them all ironed out. I'd highly recommend taking this course if you have an otherwise light quarter (weekly psets are time consuming) or might be interested in this topic.\", 'The first half of the course is hard because of the theory, and the second half is hard because of the programming assignments. The assignments dominated all of my time for the quarter. Course staff is friendly but OH can be busy and stressful. The lectures are not super interesting unless you are really excited to hear about parts of the lambda calculus and Rust in extreme detail.', \"Definitely recommend this class if you're interested in learning more about how advances in programming languages can help engineers write safer and better code\", \"This is a really good course. I took it basically on a dare -- without having taken CS110 and with relatively limited programming experience outside of Python and C, and pretty basic knowledge of CS theory. As a result, I think I definitely had to put in more work than the average student. That said, it was an absolutely fascinating (albeit sometimes intense) trip through a field I had known nothing about, and I'm really glad I took it.   The weekly homework assignments were often pretty time-consuming for me, and it would have been nice to get a break here or there. All the same, a great course!\", \"This class is really hard. Period. Take it with plenty of time to work on the assignments, because they'll require that you go back to lecture notes and fix misconceptions. But do take it! The class is very rewarding and you learn a ton. Very few times in my five years at Stanford I've seen a professor that cares as much and will put as much effort into their class (it'll still be hard though).\", \"It's fairly interesting material. Don't be put off by the beginning work.\", 'Will is a great instructor - very passionate and enthusiastic, and good at teaching things in a way that students can understand. My only complaint was that many assignments were remade on the fly, which led to frequent bugs in assignments and TAs vaguely stating that things would be fixed/updates \"soon\" or \"ASAP\" and then not actually fixing/updating for several days.', 'Good class, take', \"It's fairly interesting, but a lot of it was overly pedantic for my taste. Much of the class is taking a pretty simple concept, then finding a way to describe and formalize it to make it seem complex. I guess formal definitions of languages are useful if you want to actually prove your systems are correct, but for most software engineers I really don't see it being useful in the near future. Being able to use a more expressive type system like Rust's is useful, particularly with respect to memory management, type state, and session state, but even Rust felt a bit half baked to me. There are things that seems like they should be really simple yet require hacks in unsafe code. The docs are littered with places where the Rust spec is not fully defined. Will's enthusiasm is fantastic though, and that always got me through the lecture even when I wasn't in love with the material!\", 'I did not know this was a systems class before taking it but I think I still did okay. One of my favorite classes and probably one of the best taught in the CS department. It can be a little difficult at times, but you want to make sure you go to office hours because the teaching staff is amazing and you can work through problems with your peers.  Will cares a lot about teaching and is incredibly knowledgeable, empathetic, and wants you to really know the material by the end of it. 10/10', 'Fantastic course! I wish there were more like this at Stanford. The first couple of weeks are pretty theory-heavy but as the course goes on it becomes more practical and I learnt a lot. Workload is consistent but manageable. Will is a great lecturer that cares a lot about his students and readily takes on feedback.', \"there's nice material in this course. it seems to be evolving a lot so the courseload may vary from previous iterations. homeworks took longer than expected, probably due to initial friction from not knowing a language / formalism\"]}, {'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': ['Interesting material and some cool projects to implement. However, a few of the assignment specs were not that helpful and I needed to go to office hours to properly understand the problems. That was especially the case for the final project.', 'Take this course if you are interested in the theoretical underpinnings of what goes into developing a programming language. Very helpful for learning the functional programming paradigm.', 'The content is interesting, but the course was better organized when Will Crichton taught it, labs, lectures, notes, and homeworks included. Some of the homeworks in this course were cool, but a lot of it felt spoon-fed or not particularly helpful for deepening or reinforcing understanding. There seemed to be a focus on how things work instead of why. This may be attributed to the intention of creating a generally lower-intensity course. The fun things were: problems in lambda calculus/ski calculus, the coroutines/continuations homework, and the final project.', 'The homeworks were scoped to be around 10 hours when I took the class but the variance was closer to 10-20 hours. The Rust project was very long (you can choose from multiple projects) -- say ~30-40 hours -- but was rewarding. New instructor and new homeworks / projects for this quarter, so likely to change & improve.', 'Interesting materials, but the lectures sometimes felt poorly-paced. The assignments were useful, but the specs were often confusing, and the quality of help from the TAs was hugely inconsistent. The final project was useful and interesting, but again the difficulty of the three choices for our projects was very skewed.', \"If you're interested in the theory behind functional programming, take this course. If you're interested in how fundamental problems in programming languages are implemented in real languages, I would not recommend this course. The majority of the homeworks were built around lambda calculus variants, which  are theoretically interesting but not particularly practical. There is a rust assignment that was cool, but the majority of the course was not about commonly used languages. In the end I found the course too theoretical and only very loosely applicable.\", '> Alex is pretty awesome! Cares a *lot* about students and always happy to take questions.nnnn> Overall thread of class is pretty unclear, though individual lectures are very coherent.nnnn> Pi calculus assignment is extremely challenging. Get on that one ASAP!', 'This is a fantastic course that taught me quite a lot about thinking differently about programming languages. The quality of instruction was fantastic! Consider taking this course!', 'Pretty well-taught and engaging material if you have any interest in the implementation of languages or programming languages theory -- the course definitely tends to the theoretical side. Assignments were not too challenging, but take advantage of office hours and start on the final project early!', \"This course is so fun! It does not require too much work, and you get to play around with really interesting ideas in programming languages. I definitely recommend it if you've ever been interested in programming language theory.\", \"This course was a bit of a letdown. I came in with high expectations, but they quickly fell flat as soon as I realized that the class was focused more on theory than on systems. I stopped going to lecture at the beginning of week 3 because of how confusing they were. Instead, I would look at the week's pset to figure out what I needed to learn; read Wikipedia, blog posts, and research papers for a few hours until I felt like I had a solid grasp of the material; and then complete the pset. On the one hand, it was frustrating that lectures were useless to me. On the other hand, I realized that I can learn difficult material on my own. And, in the end, I learned Rust, which was one of the reasons I was interested in taking the class in the first place. Overall, not the worst class in the world, but most definitely not the best class either.\", \"This is one of the most interesting courses I've had the opportunity to take at Stanford.nnIt's truly wonderful to learn programming paradigms and language features in lecture, then immediately be able to interact with those concepts in the assignments.nnThe assignments do a great job of ensuring you understand the material and the final project is extremely interesting and enjoyable.\", 'Some of the assignments were fun, but the project was a bit disorganized and took significantly longer than the assignments. The class definitely was not as practical as I was hoping it would be.', \"It's an interesting class looking at programming languages through an academic lens. The benefit is that you get a whole new way of looking at languages: lambda calculi, object calculi, typed vs untyped, etc. The issue is that for every homework it felt like I had missed half of the lectures.... even though I had poured over the details. I constantly had the feeling that I had to fill in about half of the course myself to do the homeworks. A lot of important information is communicated over Edstem rather than in the homework itself. Also, the Rust final project is a HUGE step up from the Rust homework, and the brief is poorly written and confusing. I hope the project brief will be revised in future.\", \"This class is pretty hard, the final project especially. Not ideal with a tough course load. You'll def improve as a programmer from the homeworks though.\", \"It's a fine course with some interesting things here and there but by and large quite tedious. You spend a lot of time doing the same recursive translation or type checking logic for different simple languages. It's good for insight the first time but pretty pointless to do it again and again. The final projects were kind of cool but definitely really long.nnnnIn terms of teaching, Prof. Aiken is well-intentioned and mostly okay but he could really benefit from working on his teaching process. For example, he needs to understand that you can't put big blocks of equations or maths working all at once on a slide and then just talk through them while highlighting random stuff. Either break the slides up line by line (see how Keith Schwartz does equations in slides) or work through them by hand live. You will catch a lot of the errors if you break up your presentation like this. Also space out your equations and don't use confusing variable names. I swear there was a slide where an equation had two plus symbols on a line and one of them was an operator in the language and the other was mathematical plus and there was literally no indication that those were supposed to be different until someone asked. Just use colour/bold/font or one of 6 other modalities to clarify things more.\", 'Most lectures are like, \"here's a concept; here's how it's formalized with lambda calculus; let's do some examples to feel it out.\" Aiken teaches the material solidly. Most homeworks are like, \"here's some funky language that formalizes a concept; make it do a thing.\" Overall, things are very fun, brain-teaser-y, and satisfying to complete, but it didn't feel dramatically deep or explicitly useful to a lot of subdisciplines of CS.', \"Definitely a great option for a systems PhD breadth class if you're not that interested in systems. Homeworks aren't too much work and are pretty interesting.\", \"Fun class! I think the class is changing a little bit, but we went over different simple programming languages and theory associated with them. Good background just for generally understanding type checking and early programming language theory. Didn't write in as many new languages as expected, as I had heard from previous versions of the class, but it was still a fun exercise to parse through syntax.\", 'Great course!', 'Great way to learn about non mainstream programming languages and techniques.', \"Probably a good class if you are interested in the area/potentially doing research in the area. The fact that we are introduced to the Rust programming language likely has practical benefits too. As a PhD student taking it for a breadth requirement I think it's decently hard work but manageable.\", 'Good course on underlying theory for programming languages', 'This course was good exposure but the theoretical side of this content felt kind of loose and the projects felt like a scramble to understand what was going on.', \"This course was really unfamiliar to me starting out, so most of the basic concepts were really hard to understand. It will probably be substantially easier for you if you already know lambda calculus, typechecking, etc. The problem sets were extremely hard to understand at first, and were a pretty heavy workload because there was a new one each week with no break. The office hours help for the problem sets, but they are still very challenging and it's hard to get all of your questions answered since office hours are fairly crowded. The lectures were all interesting, understandable, and organized/well-explained, but there was just so much new material (and difficult notation) that understanding the lectures was not enough to feel confident about the material. The projects were interesting and cool, but also a very heavy workload where sometimes understanding is just assumed for things that are completely new to the students.\", 'Take advantage of office hours and the forum. Jason was really helpful in office hours and made some of the abstract concepts a lot easier to understand.', \"Take it if the theoretical aspects of programming languages excites you. For example, if you're passionate about getting to learn more about the type system, or program in purely functional ways\", \"If you're interested in programming languages, take this course. However, be advised that this course is very heavily focused on the theory of programming languages (not half theory and half systems as the description implies). The majority of the lectures were working through various proofs of various properties of types and different calculi; it spent very little time working with real-world programming languages. The assignments were in Python, Racket, and Rust, but that was incidental\u2014we were told to read a handout that covered the basics of each language before starting the assignments, but otherwise there was no real explanation of the up or downsides of each. Some of the assignments were also written ambiguously or under-specified, which led to issues when trying to figure out what they meant.\", 'It's an interesting introduction to programming paradigms outside the most common languages. The material is a bit dryly presented in class, but for the most part the programming assignments are pretty easy. The \"final project\" is basically just a big programming assigment.']}]\nmain = Main(courses_to_take = [CoursesToTake(course_0_details: Course = Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3), course_1_details: Course = 'None', more_courses_2: bool = 'None', course_2_details: Course = 'None', more_courses_3: bool = 'None', course_3_details: Course = 'None', confirm: bool = 'None')], student_info_details = student_info)\nmain.result = {'success': True, 'transaction_id': UUID('97281e4a-5155-4eff-b85a-7a2ef958297a')}\ncourse = Course(course_name = 'CS 148', grade_type = 'Credit/No Credit', course_num_units = 3)\ncourse_0 = Course(course_name = 'CS 148', grade_type = 'Credit/No Credit', course_num_units = 3)\ncourse_2 = Course(course_num_units = 3)\ncourses_to_take_1 = CoursesToTake(course_0_details = course, course_1_details = [Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3), Course(course_name: str = 'CS 242', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3)], more_courses_2 = False, more_courses_3 = False)\nstudent_info = StudentInfo(student_name = 'Aakash Mishra', student_id = '06375727', student_email_address = 'aamishra@stanford.edu', is_international_student = False)\ncourse_3 = Course(course_name = 'CS 242', grade_type = 'Credit/No Credit', course_num_units = 3)\n", "system_action": ["AskField(courses_to_take_1, course_1_details, The course details for second course, such as name, grade type and units)"], "user_target_sp": "course_1 = Course(course_name='CS 242', grade_type='Credit/No Credit', course_num_units=3)\ncourses_to_take_1.course_1_details = course_1", "user_target": "course_3 = Course(course_name='CS 242', grade_type='Credit/No Credit', course_num_units=3)\ncourse_1 = course_3\ncourses_to_take_1.course_1_details = course_1", "user_target_suql": ""}, {"user": "CS 242, Credit, 3", "bot": "Thank you for providing the details. Just to confirm, you would like to take CS 242 for Credit/No Credit with 3 units. Is that correct?", "turn_context": "course_4 = Course(course_name = 'CS 242', grade_type = 'Credit/No Credit', course_num_units = 3)\nmain = Main(courses_to_take = [CoursesToTake(course_0_details: Course = Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3), course_1_details: Course = 'None', more_courses_2: bool = 'None', course_2_details: Course = 'None', more_courses_3: bool = 'None', course_3_details: Course = 'None', confirm: bool = 'None')], student_info_details = StudentInfo(student_name: str = 'Aakash Mishra', student_id: str = '06375727', student_email_address: str = 'aamishra@stanford.edu', is_international_student: bool = False))\nmain.result = {'success': True, 'transaction_id': UUID('97281e4a-5155-4eff-b85a-7a2ef958297a')}\ncourses_to_take_1 = CoursesToTake(course_0_details = course_4, course_1_details = course_4, more_courses_2 = False, more_courses_3 = False)\n", "global_context": "answer = answer('What are the reviews for the course CS 242?')\nanswer.result = [{'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': ['Do it!', \"In this class you'll look how/why inheritance is implemented in Java/C  , learn a bit of Haskell and look at the functional side, you'll know how the vtables are structured in C  , and implement a Haskell interpreter in JavaScript as one of the first homeworks. Enjoy, lucky student! :D The first few weeks homeworks take a lot more time and effort than the following ones. Make sure you read extra reading materials and referenced papers, they are fun!\", 'no', 'Do a Haskell tutorial first.', 'Look at homeworks early to determine which ones will require extra time.', \"The first two assignments are probably the hardest ones and require some time to finish. The rest of the assignments are pretty straightforward. The slides do. It contain much information. You need to watch the lectures multiple times to get what they mean. The midterm is much easier than the final, but in general you'll have enough time for both. It's pretty hard to find your way in to this class but once you get the concepts and style, it's much easier to follow. This being said I don't know how helpful this information will be since Edward was teaching this class for the last time and the class itself might change quite a bit.\", 'Moderately Difficult and Somewhat Competitive', 'Homework assignments are a fun challenge and highlight key concepts.', \"Unfortunately Edward is graduating and will not be teaching it in the future :( It's still a valuable class but I'm very sad that future students will miss his excellent instruction.\", 'Absolutely take it', 'The course assignments (with exception of the written assignment) are awesome and will teach you a lot.', 'Content is very interesting. Lectures are hard to follow. Assignments not a lot of work.', \"Edward is very knowledgable and has deep insights on various languages and everything related to the course, but not very experienced on how to lecture and let us understand well (but given he's still a Phd student, you cannot expect a teaching veteran). Minds usually jump, and if you want to get to know every part, a lot of extra hours of self-exploration is expected.\", \"Fantastic course if you're interested in learning more about functional programming and the core ideas behind programming languages. You end up seeing a lot of really cool topics and ideas! The class does assume that you have a decent amount of exposure to systems and different languages though, and while it's definitely possible to catch up, the lecturers do seem to speed past some of the material.\", 'This is a really well-taught course with lectures that are more enjoyable and engaging than most. Edward is a natural lecturer and clearly puts a lot of thought into how to present concepts in an accessible and appealing way. The workload is fairly light.', \"It's a lot of small topics, but you will leave feeling a lot more equipped to tackle new languages and concepts.\", 'It is a very helpful course -- I recommend this course.', \"It's rather difficult despite the innocuous name.\", 'Highly recommend!', \"Very interesting, and very useful. Devote time to the labs and you'll have a leg up on understanding for the exams.\", \"If you are interested in a theoretical background behind programming languages definitely take it! Don't take it if you're interested in learning functional programming or objected oriented programming. It's not a class that teach us the paradigms but benefits of each paradigm.\", 'This is a good course for an overview on programming languages. You need to work on your own, or take more computer science courses to develop this subject.', 'Edward has great drawings. Honestly, I really liked this class. The workload gets lighter as the course goes on.', 'Unfortunately the great teacher will no longer be teaching...so who knows?', 'Great course and professor, very interesting without being too much work.', 'You will learn a lot of material.  Most of it will not be needed to do the homeworks which are intriguing but not very challenging.  People tended to do very well on the homeworks, so I am sure grades were determined pretty much by the midterm and final grades.', 'This is a great class, and Edward is a fantastic teacher \u00e2\u20ac\u201d going to class is fun!', \"Much of the homework feels needlessly complex. I struggled for hours on syntax problems with Haskell, etc. The concepts from lecture are interesting, and are understood within a few hours. However, you will spend *many* more hours thereafter struggling on silly bugs. I don't think that the amount of time put into the coding assignments is worth it for the knowledge that you gain. I do believe that the lectures are worth it, though.\", \"The course isn't that bad, and you learn a lot.\", \"Very insightful, and good for people who don't quite understand the non-obvious, underlying differences between popular languages like C  , Java, JavaScript, and Haskell.\", \"Assignments are easy but the tests are really difficult. Make sure to go to office hours often if you're not understanding concepts.\", 'Definitely recommend if you are thinking of taking 143 or have taken 143 and enjoyed the material. I think the two classes complement each other nicely.', \"I felt like this course taught me a lot of superficially interesting material that I don't think will be particularly helpful in real life but was at least kind of cool to learn. Not too much work.\", \"It's a class with a good useful-knowledge-to-time-spent ratio.\", \"A great class if you are interested in programming languages, but keep in mind it can get very challenging. Really touches on the lower level of languages, shouldn't be taken to broaden your skill in languages but rather your knowledge of their workings.\", \"Take this course! It's so much fun! Do don't really need any prereq's except for familiarity with Javascript and even that is a loose prereq. Every assignment is clearly laid out for you, step-by-step.\", 'The instructions are very thorough. You will learn a lot about research language Haskell and web language Javascript. The homework loads are not that even, with the hardest one taking around 20-25 hours and the easiest one taking about 1 hour.', 'Take it with EZ! Great instructor with clear goals.  The course definitely gave me a better understanding of how programming languages work, and how to leverage them to do things with code!']}, {'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': ['Absolutely worthwhile, covers lots of interesting topics in an engaging way. But pay attention - the course goes by quickly and a lot of complex topics only get covered fairly briefly.', 'Good to have strong programming knowledge before taking this class.', 'The course is still taking form, it should improve in future iterations', 'Attend the first lecture to know whether it teaches the same thing as you thought', 'Programming languages is a high-level introduction to some ideas in PLs. You touch on a lot of PL ideas, and implement some cool assignments.', \"It's a new course, so there's a few kinks here and there, but overall a good class\", 'I never had any experience with the topics in this class beforehand. Be prepared to learn a lot on your own and dedicate time to it.', 'Do the homework extremely carefully because there is grade inflation and homework takes a large part in the final grade. Be especially careful about proof assignments. Their grading can be very hash!', 'You should be familiar with Lua, OCaml and Rust before taking this course, or you will waste 10 hours a week debugging with an unfamiliar language.', \"Assignments are tough. And don't start assignments until they fix all the bugs.\", 'Will is a great instructor and super enthusiastic about the material', 'Will is a great instructor and I enjoyed the class overall. However, I found class assignments to be more work than I expected.', 'Very interesting material and an enthusiast instructor. Doesn\u00e2\u20ac\u2122t go much into depth but a decent overview', 'homework is hard and make sure  you go to office hour early. Will is a great instructor and topics he chose are interesting.', 'Students should take this course if Will Crichton is teaching it. He covers a lot of material but makes it very easy to digest.', 'If you learn well by doing projects, this is a good class for you.', \"Start the assignments/read through them early. It's far more valuable to physically show up to lectures\", 'Interesting class if you want to learn about general ideas behind programming languages. Also get to have some familiarity with new languages!', 'Excellent introduction to different features / considerations for different types of programming languages.  Assignments generally were more application-focused than theoretical with some exceptions.', \"Interesting material, though I would rather have more in-depth assignments every two weeks rather than weekly assignments.  I appreciated Will's lectures and code examples, they were generally clear and well structured.  My main complaint was that there were hidden tests on the homework assignments that were completely unknown to us, so we couldn't even see if our code was crashing.  I would prefer a 221-style approach where the hidden tests are shared, but without the results -- so it's possible to see whether the code runs, but not what the expected answer is.\", \"The assignments can be tough because you'll have to learn three languages over the course of seven weeks and work with concepts that are likely unfamiliar: you'll learn a lot but it will be a grind towards the beginning of the course.\", 'This course is definitely a difficult one but it is surely worth it. I think the class ended up being more about learning the three languages, rather than necessarily the \"linguistics\" of programming languages, but there was still plenty of time and energy on comparison. Will is a stellar and didactic teacher, take it with him if you can!', 'Interesting and enjoyable course. The lectures were generally good, although sometimes confusing (especially the ones on Rust). Assignment difficulty was not too bad usually but a few of the assignments took a very long time.', 'CS 242 is a class whose character completely depends on the instructor. I loved that Will Crichton was a very enthusiastic lecturer and cared a lot about his students. While I learned a lot of in the class about programming languages, the material was not presented in a way that helped me understand why the things taught in lecture were meaningful. I am left with many unanswered questions including: Why are functional languages designed the way they are? Why study lambda calculus, and how does lambda calculus relate to modern programming languages? Why did we study Lua, as opposed to any other (more popular) scripting language?', 'Will is a great instructor. He brings energy to class and makes you excited to learn. The assignments are, for the most part, really interesting and pretty challenging. Be prepared to put in a good amount of work. The final project is non-trivial so be sure to set aside enough time for it.', 'Will is a very passionate lecturer, which makes the topic very interesting. Unfortunately he has some unrealistic expectations for the amount of time students will put into the course. At the beginning of the course it was fine, but a very difficult final assignment combined with a final project where putting in the \"average\" amount of time at 30 hours would give you a B made the class turn sour in the end. Overall the class ramped up a huge amount due to the requirements of the final project and required much more work than 3 units. Hopefully the course staff will get the class more in line with a reasonable workload in future iterations.', \"It was a good course for its first iteration, but the languages chosen didn't feel like a win over what I already knew.\", \"Take it! You learn a lot, it's both theoretically and practically very useful, and you learn a lot. The programming assignments are all very interesting and the project at the end can be taken in many different interesting directions.\", 'I would recommend ti to anyone with an interest in learning more about the variations between programming languages and the reasons to pick certain languages for different projects.']}, {'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': [\"This course is a must-take, period.  While it can seem abstract in the beginning, it builds a foundation for understanding software that extends beyond any particular tools. Furthermore, it's a look into the future of how software can be built.\", 'Good course', \"This course is a mix of theory and practical programming languages. It's not all theoretical, but it isn't just a survey of different programming languages. It provides a theoretical foundation, and exposure to different styles of programming languages, all while motivating their different features.\", \"Will is a great lecturer and you'll learn a lot from him!\", \"The pace is very quick and there's really no easy way to catch up if you fall behind. So stay on top of classes and coursework. Instructor and TAs extremely helpful and supportive, want you to succeed.\", 'Will is a great instructor and the assignments for this course are well put together.', \"It's a really well constructed course and Will's lectures are really insightful and impassioned. It's a must-take course for those interested in Programming Languages.\", 'It is a useful course to deeply understand how programming languages are designed, and the course is really well organised.', 'great intro into functional programming and programming language theories', \"it's a lot of time!\", 'Will is an engaging and very talented lecturer and instructor, and cares about his students. The course was challenging because it went over so many different topics, and does take significant effort, but as a result you get a holistic understanding of multiple programming languages. The assignments are very good educational experiences. Highly recommended!', 'Fun, challenging assignments and interesting material. Will is a passionate and knowledgeable lecturer. Would recommend.', 'The course is very worthwhile with a large breadth of topics and programming languages covered.', 'PL as taught by Will is a good class. He listens to student feedback seriously and tries to make the course better, which I appreciate!', 'Very high-quality course.', \"Actually go to lecture or you'll be super confused on the assignments and end up spending way more extra time trying to learn for yourself than you saved by skipping lecture...\", 'You should take it! Especially if you have an interest in theory/compilers/systems/programming languages. Will pours his heart into this class and it really shows. The projects are incredible (although a bit buggy) and the concepts are really interesting.', \"Take it! It was not what I expected and was a lot of work (office hours were a blessing) but it introduced me (thoroughly!) to functional programming concepts that I am now looking into further on my own because I am interested in different ways of thinking about computation and how that will affect the way I approach programming problems in the future. It's also fun to learn a bit of Rust and Lua! (I was not as much of a fan of OCaml and WebAssembly)\", 'Useful for all programmers and computer scientists, from systems engineers to theoreticians.', \"It's an interesting class to take because it reflects on the translation that occurs between the model of computation you have in your head and how you express that model of computation using the tools a programming language gives you. You learn a lot about types and the theory behind them. This class also gives you exposure to more modern programming languages that have neat features that enable you to write better code (both in a correctness sense and a style sense). Will Crichton is an enthusiastic instructor that has put a ton of time into make this a great course. If you're at all interested in the future of programming languages and how programming languages can enable you to better reason about your code, this is a good class to take.\", 'Good introduction to PL theory, functional programming, and some interesting languges', \"This is the best CS class I've taken at Stanford. You're doing yourself a disservice by not taking it. I enjoyed every single lecture, and Will is incredibly passionate about the material. The assignments are fun and not too hard, and you will leave this class with much appreciation for the material.\", \"Pros: Get exposure to a number of less popular languages (OCaml, Rust, Lua) and a better vocabulary for discussing what matters in programming languages (strength of type system and automatic vs. manual memory management). It's still not really clear to me how the Lambda Calculus practically relates to the rest of the course, so the first few weeks were a bit frustrating, but I found it more enjoyable after that.\", 'Will is clearly passionate about the course material, and his teaching style is very engaging. The assignments complement the lectures very well, are reasonably challenging, but never overwhelming.', \"Having taken CS143, I found myself really wishing the 143 was a prereq for this class. I think that would have allowed Will to go much deeper into the material and would have removed redundancies. Will is an awesome and enthusiastic teacher and I was super impressed by the amount of time and effort he put into the course. Given that the assignments were new, it was also amazing that there weren't really any bugs. At times towards the end of the course, I felt like I wasn't learning that much from the assignments besides practicing programming in a new language. It was cool to learn about Rust from a programming languages perspective since it is gaining traction in the systems community.\", 'The course is still being iterated, but the material, professor and assignments are  interesting.', \"Fantastic course, would highly recommend. Reasonable expectations throughout the whole quarter. Will cares a lot about the quality so the course will surely improve.   A note on prereqs: I hadn't taken 110 and was largely fine. There was one assignment where basic knowledge of threads is assumed, but it's something you can learn on the fly.\", 'This is a great class and you will learn so much from it! Will cares a lot that his class is well taught and that assignments will help you reinforce the content of the class. I enjoyed taking this class so much.', \"It's a course that keeps changing, so it's hard to say. It's definitely heavy on both theory and system topics, and it's a sizeable amount of work. You'll learn some cool stuff though, but at a fast pace.\", 'This is one of the best classes I have taken at Stanford. The material is fascinating, and Will is an amazing teacher. He cares a lot about what students get out of the class and effectively designs lectures and assignments to maximize learning. Some parts of the course were challenging and others felt too easy, but Will is receptive to feedback and will probably make adjustments for the next iteration. Overall I learned a ton and consistently enjoyed the class.', 'Great class! Will is super passionate about the topic and he puts a lot of time into the notes and assignments he gives you. He manages to cover a wide span of PL theory and application in just the ten weeks and tests your programming skills.', \"Great class! The beginning is a little more theoretical than you might expect, but it ends up quickly building to practical considerations of languages including OCaml, Rust and Lua, all of which you get to use in homework assignments. Rust is probably the trickiest, because of its borrow checker, but once you learn the idioms used for Rust programming it's not too bad. Homeworks were reasonable in length and effectively illustrated points taught in class. I felt like I got a lot out of this class!\", 'Will Crichton is an excellent instructor.', 'This class is great regardless of your area of focus! It exposes you to a variety of PL representing important concepts that you might not see in other classes, without forcing you to spend too much frustration on syntax. Will is a great lecturer, and the assignments are fun. The workload is reasonable, and a good ratio of time spent to amount learned', \"This course's grading policy has a heavy emphasis on application, but classes and lectures are more theory based.\"]}, {'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': ['This course will change your view about programming languages and it will be starting point for programming language theory', \"Take it. It speaks truth about what matters in designing a good language, and moreover teaches you tools to think in terms of types , lambda calculus, and all the wonderful PL paradigms, so at the end of it you're much better off understanding the status quo of the software industry, and what needs to be improved. I recommend this to anyone who wants to understand modern software.\", 'Will is extremely enthusiastic in teaching. Notes are well organized and help a lot.', 'Get started on the homework early, but Will is a great instructor.', 'Great course!', 'Take it!', 'Be sure to dedicate enough time for the final! (At least DLang can be non-trivial if you try to cram it).', 'Lectures are invaluable as are OH.', 'There is a lot of work, so plan your schedule accordingly.', \"The concepts you learn in this course are crucial to becoming a good programmer for many areas in compute science. Even if you don't use Rust, the way you write programs will change.\", \"I didn't really understand the first week of lectures until about halfway through the quarter; after that, the whole class gets a lot more fun. One of the few 200-level CS classes that's close to the core series in terms of the (high) quality of assignments/lecture notes. Lectures can be a little dry, despite best efforts; there's a good amount of writing proofs on a whiteboard.\", 'Excellent course. Learned so much about PL and I am truly inspired by this course on what the term \"programming language\" means. The contents are extremely organized and assignments are very effective in helping me understand the concepts.', 'Good introduction to PL. The second half of the course becomes more programming intensive / straightforward than the first couple weeks', 'Take it!! It so different than most CS classes at Stanford and Will is a great teacher!', \"Deeply interesting course, very much recommend if you're interested in learning about PL theory or functional programming.\", 'Very good course. Learnt a lot about PL.', 'This course is a lot of fun with functional programming and types. You will learn several languages in a short amount of time, and learn about the language design considerations. Sometimes the time can be long between assignment release and it being ready, bug-free and has correct GradeScope tests, which was the main shortcoming of the version I took this quarter.', \"Really interesting course, the content is more unusual than most other courses and it's a nice trek through how and why programming languages are the way they are (and insight into where the future of languages is headed). This course is not overly theoretical, most of the assignments are a practical deep dive into some aspect of programming language design. I came in with some prior experience with OCaml, but I enjoyed learning Rust and overall the course was a great experience.\", 'I think the course was way harder than it needed to be and learning 3 different programming languages in 1 quarter is definitely challenging,', 'It will make you a better programmer', 'Do not do the RLU project if they are still keeping it for the final.', 'I really loved this class, and it probably will be one of the most impactful on my skills as a software engineer when I leave Stanford. 2nd year MSCS in AI/system.', 'While this course can be fairly time intensive especially in the first few weeks, the material really comes together in the end, and overall the course is a positive experience! Office hours are extremely helpful for understanding the material.', 'One of my favorite courses at Stanford so far. I really like how the class focused on application and also learning through the homeworks rather than through exams, I felt that I learned a lot more this way', 'This class is a systems and theory class. It is less about implementation, although the course description implies otherwise.', 'Take it! This is the only course of its kind in the Stanford CS department', \"Really interesting class at the intersection of theory and systems, which means it bounces back and forth between proof-writing assignments and big coding assignments. Sometimes the assignment releases were delayed, but that's because Will re-wrote a huge portion of the assignments to improve from the previous offering and fit more closely with what we were learning--he's an excellent instructor who cares a whole lot about the course.\", 'The best and most valuable computer science course I have taken at Stanford', \"the course isn't the easiest, especially if you don't have a ton of exposure to some the kinds of math that show up, but Will is one of the best lecturers at Stanford, hands down. You learn a ton and he's an incredible resource all around.\", 'This class was very challenging but very rewarding-- Will is a wonderful, enthusiastic lecturer, and the assignments were interesting', 'It is still getting developed- there were homework typos and some delays, but overall a great course.', \"It's a lot of work and not very fun.\", 'Take it, you will learn so much, but be prepared for the workload! The first two assignments were by far the heaviest of the quarter, but the programming assignments and theorem proving final were a lot of fun.', \"A lot of breadth but not a lot of depth. You'll be exposed to a lot of new concepts and programming languages which you can further explore if you're interested.\", 'This quarter (Fall 19-20) Will made the class significantly more time-consuming at the start (I think) in comparison to the previous offering. I did not expect to be spending 110-like amounts of hours for some of the weeks.  Still, Will taught the class well, with great lecture notes in a way that got the content across, with assignments that actually relate to lectures. So if you have time, down to learn a new perspective on programming (from imperative languages like python, c, etc.), go for it!', \"It's probably a lot harder than you think it will be. That being said, it's a completely different way of thinking about CS, and it's really cool!\", \"Would not recommend this course unless you have a fairly extensive background in math, theory (PHIL 150, CS 157), or have a lot of time on your hands to always be in office hours.  I had the listed prerequisites for the class, yet I constantly felt like I was extremely unprepared.  Don't use other quarter evaluations to determine if you should take this class, it has been completely redone (even though the instructor is the same).  If you do choose to take this class and you get stuck, Will is a nice person and he tries to make time for students, so you might consider reaching out to him for one-on-one help.  Also if you're stuck on assignments, sometimes the order of the parts of an assignment will not be the most intuitive for you personally, so try solving the problems in another order.\", \"Think twice if the first lecture (and Will's passion) lured you into taking this class. For Autumn 2019, the time commitment stats from the previous quarter was a complete lie, so don't trust the stats too much. I have heard multiple students comparing the workload of this class to CS110 (or worse than it). Otherwise, Will and the course staff are very nice and helpful!\", \"This class significantly ramped up compared to every previous iteration. The first two assignments took around 30 hours to complete and many people dropped because the instruction staff didn't really warn people. Every subsequent assignment has been tough but manageable, and they all help you learn a ton. Just be ready to put in the work, but it's worth it.\", 'course can be fun but is somewhat time consuming in random weeks', \"An amazing course! Will is a fantastic lecturer and you should not miss the opportunity to learn about programming language design and the beauty of functional languages. The course gets heavily revamped every quarter, so your mileage may vary, but it is still structured very well regardless and introduces a ton of fascinating and industry-applicable material, whether you are interested in AI, systems, or even full-stack. I would say this is one of the best courses I've taken and will revolutionize the way you think about software development! You'll never get a null pointer exception, segfault, or memory leak ever again.\", \"This class is ever shifting, so while old comments are a decent litmus test, the difficulty of the class may vary wildly. Will is always trying to improve it - but sometimes he swings too far in the difficulty direction. It was very difficult this quarter and had a HUGE workload. However, we all learned a ton, so make of that what you will! Will is an excellent instructor, so if you're at all interested, it's worth the chance - just be wary of the workload.\", 'This is a horrible course. Worst class I have taken at Stanford. The assignment is due on Wednesday and almost all of them have several bugs till Monday. Lecture is essentially useless. Office hours are understaffed. The remote final was not entirely released till 5 days before due date. DO NOT TAKE IT', \"Difficult course, but one of my favorites at Stanford (definitely a change of pace from my AI track courses). Will is a very enthusiastic lecturer and encourages students to learn and attend office hours. His teaching style and enthusiasm is how I managed to stick with going to lecture all quarter (I typically don't).  The course is still being developed so sometimes the assignments have bugs in them, but the teaching staff work hard to get them all ironed out. I'd highly recommend taking this course if you have an otherwise light quarter (weekly psets are time consuming) or might be interested in this topic.\", 'The first half of the course is hard because of the theory, and the second half is hard because of the programming assignments. The assignments dominated all of my time for the quarter. Course staff is friendly but OH can be busy and stressful. The lectures are not super interesting unless you are really excited to hear about parts of the lambda calculus and Rust in extreme detail.', \"Definitely recommend this class if you're interested in learning more about how advances in programming languages can help engineers write safer and better code\", \"This is a really good course. I took it basically on a dare -- without having taken CS110 and with relatively limited programming experience outside of Python and C, and pretty basic knowledge of CS theory. As a result, I think I definitely had to put in more work than the average student. That said, it was an absolutely fascinating (albeit sometimes intense) trip through a field I had known nothing about, and I'm really glad I took it.   The weekly homework assignments were often pretty time-consuming for me, and it would have been nice to get a break here or there. All the same, a great course!\", \"This class is really hard. Period. Take it with plenty of time to work on the assignments, because they'll require that you go back to lecture notes and fix misconceptions. But do take it! The class is very rewarding and you learn a ton. Very few times in my five years at Stanford I've seen a professor that cares as much and will put as much effort into their class (it'll still be hard though).\", \"It's fairly interesting material. Don't be put off by the beginning work.\", 'Will is a great instructor - very passionate and enthusiastic, and good at teaching things in a way that students can understand. My only complaint was that many assignments were remade on the fly, which led to frequent bugs in assignments and TAs vaguely stating that things would be fixed/updates \"soon\" or \"ASAP\" and then not actually fixing/updating for several days.', 'Good class, take', \"It's fairly interesting, but a lot of it was overly pedantic for my taste. Much of the class is taking a pretty simple concept, then finding a way to describe and formalize it to make it seem complex. I guess formal definitions of languages are useful if you want to actually prove your systems are correct, but for most software engineers I really don't see it being useful in the near future. Being able to use a more expressive type system like Rust's is useful, particularly with respect to memory management, type state, and session state, but even Rust felt a bit half baked to me. There are things that seems like they should be really simple yet require hacks in unsafe code. The docs are littered with places where the Rust spec is not fully defined. Will's enthusiasm is fantastic though, and that always got me through the lecture even when I wasn't in love with the material!\", 'I did not know this was a systems class before taking it but I think I still did okay. One of my favorite classes and probably one of the best taught in the CS department. It can be a little difficult at times, but you want to make sure you go to office hours because the teaching staff is amazing and you can work through problems with your peers.  Will cares a lot about teaching and is incredibly knowledgeable, empathetic, and wants you to really know the material by the end of it. 10/10', 'Fantastic course! I wish there were more like this at Stanford. The first couple of weeks are pretty theory-heavy but as the course goes on it becomes more practical and I learnt a lot. Workload is consistent but manageable. Will is a great lecturer that cares a lot about his students and readily takes on feedback.', \"there's nice material in this course. it seems to be evolving a lot so the courseload may vary from previous iterations. homeworks took longer than expected, probably due to initial friction from not knowing a language / formalism\"]}, {'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': ['Interesting material and some cool projects to implement. However, a few of the assignment specs were not that helpful and I needed to go to office hours to properly understand the problems. That was especially the case for the final project.', 'Take this course if you are interested in the theoretical underpinnings of what goes into developing a programming language. Very helpful for learning the functional programming paradigm.', 'The content is interesting, but the course was better organized when Will Crichton taught it, labs, lectures, notes, and homeworks included. Some of the homeworks in this course were cool, but a lot of it felt spoon-fed or not particularly helpful for deepening or reinforcing understanding. There seemed to be a focus on how things work instead of why. This may be attributed to the intention of creating a generally lower-intensity course. The fun things were: problems in lambda calculus/ski calculus, the coroutines/continuations homework, and the final project.', 'The homeworks were scoped to be around 10 hours when I took the class but the variance was closer to 10-20 hours. The Rust project was very long (you can choose from multiple projects) -- say ~30-40 hours -- but was rewarding. New instructor and new homeworks / projects for this quarter, so likely to change & improve.', 'Interesting materials, but the lectures sometimes felt poorly-paced. The assignments were useful, but the specs were often confusing, and the quality of help from the TAs was hugely inconsistent. The final project was useful and interesting, but again the difficulty of the three choices for our projects was very skewed.', \"If you're interested in the theory behind functional programming, take this course. If you're interested in how fundamental problems in programming languages are implemented in real languages, I would not recommend this course. The majority of the homeworks were built around lambda calculus variants, which  are theoretically interesting but not particularly practical. There is a rust assignment that was cool, but the majority of the course was not about commonly used languages. In the end I found the course too theoretical and only very loosely applicable.\", '> Alex is pretty awesome! Cares a *lot* about students and always happy to take questions.nnnn> Overall thread of class is pretty unclear, though individual lectures are very coherent.nnnn> Pi calculus assignment is extremely challenging. Get on that one ASAP!', 'This is a fantastic course that taught me quite a lot about thinking differently about programming languages. The quality of instruction was fantastic! Consider taking this course!', 'Pretty well-taught and engaging material if you have any interest in the implementation of languages or programming languages theory -- the course definitely tends to the theoretical side. Assignments were not too challenging, but take advantage of office hours and start on the final project early!', \"This course is so fun! It does not require too much work, and you get to play around with really interesting ideas in programming languages. I definitely recommend it if you've ever been interested in programming language theory.\", \"This course was a bit of a letdown. I came in with high expectations, but they quickly fell flat as soon as I realized that the class was focused more on theory than on systems. I stopped going to lecture at the beginning of week 3 because of how confusing they were. Instead, I would look at the week's pset to figure out what I needed to learn; read Wikipedia, blog posts, and research papers for a few hours until I felt like I had a solid grasp of the material; and then complete the pset. On the one hand, it was frustrating that lectures were useless to me. On the other hand, I realized that I can learn difficult material on my own. And, in the end, I learned Rust, which was one of the reasons I was interested in taking the class in the first place. Overall, not the worst class in the world, but most definitely not the best class either.\", \"This is one of the most interesting courses I've had the opportunity to take at Stanford.nnIt's truly wonderful to learn programming paradigms and language features in lecture, then immediately be able to interact with those concepts in the assignments.nnThe assignments do a great job of ensuring you understand the material and the final project is extremely interesting and enjoyable.\", 'Some of the assignments were fun, but the project was a bit disorganized and took significantly longer than the assignments. The class definitely was not as practical as I was hoping it would be.', \"It's an interesting class looking at programming languages through an academic lens. The benefit is that you get a whole new way of looking at languages: lambda calculi, object calculi, typed vs untyped, etc. The issue is that for every homework it felt like I had missed half of the lectures.... even though I had poured over the details. I constantly had the feeling that I had to fill in about half of the course myself to do the homeworks. A lot of important information is communicated over Edstem rather than in the homework itself. Also, the Rust final project is a HUGE step up from the Rust homework, and the brief is poorly written and confusing. I hope the project brief will be revised in future.\", \"This class is pretty hard, the final project especially. Not ideal with a tough course load. You'll def improve as a programmer from the homeworks though.\", \"It's a fine course with some interesting things here and there but by and large quite tedious. You spend a lot of time doing the same recursive translation or type checking logic for different simple languages. It's good for insight the first time but pretty pointless to do it again and again. The final projects were kind of cool but definitely really long.nnnnIn terms of teaching, Prof. Aiken is well-intentioned and mostly okay but he could really benefit from working on his teaching process. For example, he needs to understand that you can't put big blocks of equations or maths working all at once on a slide and then just talk through them while highlighting random stuff. Either break the slides up line by line (see how Keith Schwartz does equations in slides) or work through them by hand live. You will catch a lot of the errors if you break up your presentation like this. Also space out your equations and don't use confusing variable names. I swear there was a slide where an equation had two plus symbols on a line and one of them was an operator in the language and the other was mathematical plus and there was literally no indication that those were supposed to be different until someone asked. Just use colour/bold/font or one of 6 other modalities to clarify things more.\", 'Most lectures are like, \"here's a concept; here's how it's formalized with lambda calculus; let's do some examples to feel it out.\" Aiken teaches the material solidly. Most homeworks are like, \"here's some funky language that formalizes a concept; make it do a thing.\" Overall, things are very fun, brain-teaser-y, and satisfying to complete, but it didn't feel dramatically deep or explicitly useful to a lot of subdisciplines of CS.', \"Definitely a great option for a systems PhD breadth class if you're not that interested in systems. Homeworks aren't too much work and are pretty interesting.\", \"Fun class! I think the class is changing a little bit, but we went over different simple programming languages and theory associated with them. Good background just for generally understanding type checking and early programming language theory. Didn't write in as many new languages as expected, as I had heard from previous versions of the class, but it was still a fun exercise to parse through syntax.\", 'Great course!', 'Great way to learn about non mainstream programming languages and techniques.', \"Probably a good class if you are interested in the area/potentially doing research in the area. The fact that we are introduced to the Rust programming language likely has practical benefits too. As a PhD student taking it for a breadth requirement I think it's decently hard work but manageable.\", 'Good course on underlying theory for programming languages', 'This course was good exposure but the theoretical side of this content felt kind of loose and the projects felt like a scramble to understand what was going on.', \"This course was really unfamiliar to me starting out, so most of the basic concepts were really hard to understand. It will probably be substantially easier for you if you already know lambda calculus, typechecking, etc. The problem sets were extremely hard to understand at first, and were a pretty heavy workload because there was a new one each week with no break. The office hours help for the problem sets, but they are still very challenging and it's hard to get all of your questions answered since office hours are fairly crowded. The lectures were all interesting, understandable, and organized/well-explained, but there was just so much new material (and difficult notation) that understanding the lectures was not enough to feel confident about the material. The projects were interesting and cool, but also a very heavy workload where sometimes understanding is just assumed for things that are completely new to the students.\", 'Take advantage of office hours and the forum. Jason was really helpful in office hours and made some of the abstract concepts a lot easier to understand.', \"Take it if the theoretical aspects of programming languages excites you. For example, if you're passionate about getting to learn more about the type system, or program in purely functional ways\", \"If you're interested in programming languages, take this course. However, be advised that this course is very heavily focused on the theory of programming languages (not half theory and half systems as the description implies). The majority of the lectures were working through various proofs of various properties of types and different calculi; it spent very little time working with real-world programming languages. The assignments were in Python, Racket, and Rust, but that was incidental\u2014we were told to read a handout that covered the basics of each language before starting the assignments, but otherwise there was no real explanation of the up or downsides of each. Some of the assignments were also written ambiguously or under-specified, which led to issues when trying to figure out what they meant.\", 'It's an interesting introduction to programming paradigms outside the most common languages. The material is a bit dryly presented in class, but for the most part the programming assignments are pretty easy. The \"final project\" is basically just a big programming assigment.']}]\nmain = Main(courses_to_take = [CoursesToTake(course_0_details: Course = Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3), course_1_details: Course = 'None', more_courses_2: bool = 'None', course_2_details: Course = 'None', more_courses_3: bool = 'None', course_3_details: Course = 'None', confirm: bool = 'None')], student_info_details = student_info)\nmain.result = {'success': True, 'transaction_id': UUID('97281e4a-5155-4eff-b85a-7a2ef958297a')}\ncourse = Course(course_name = 'CS 148', grade_type = 'Credit/No Credit', course_num_units = 3)\ncourse_0 = Course(course_name = 'CS 148', grade_type = 'Credit/No Credit', course_num_units = 3)\ncourse_2 = Course(course_num_units = 3)\ncourses_to_take_1 = CoursesToTake(course_0_details = course, course_1_details = course_3, more_courses_2 = False, more_courses_3 = False)\nstudent_info = StudentInfo(student_name = 'Aakash Mishra', student_id = '06375727', student_email_address = 'aamishra@stanford.edu', is_international_student = False)\ncourse_3 = Course(course_name = 'CS 242', grade_type = 'Credit/No Credit', course_num_units = 3)\ncourse_4 = Course(course_name = 'CS 242', grade_type = 'Credit/No Credit', course_num_units = 3)\n", "system_action": ["AskField(courses_to_take_1, course_1_details, The course details for second course, such as name, grade type and units)"], "user_target_sp": "courses_to_take_1.course_1_details = Course(course_name='CS 242', grade_type='Credit/No Credit', course_num_units=3)", "user_target": "course_4 = Course(course_name='CS 242', grade_type='Credit/No Credit', course_num_units=3)\ncourses_to_take_1.course_1_details = course_4", "user_target_suql": ""}, {"user": "yup", "bot": "Great! I have also set your course CS 148 for Credit/No Credit with 3 units. Can you please confirm all the course details before we proceed?\n- **First Course:**\n  - Name: CS 148\n  - Grade Type: Credit/No Credit\n  - Number of Units: 3\n- **Second Course:**\n  - Name: CS 242\n  - Grade Type: Credit/No Credit\n  - Number of Units: 3", "turn_context": "course_5 = Course(course_name = 'CS 242', grade_type = 'Credit/No Credit', course_num_units = 3)\nmain = Main(courses_to_take = CoursesToTake(course_0_details: Course = Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3), course_1_details: Course = Course(course_name: str = 'CS 242', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3), more_courses_2: bool = False, course_2_details: Course = 'None', more_courses_3: bool = False, course_3_details: Course = 'None', confirm: bool = 'None'), student_info_details = StudentInfo(student_name: str = 'Aakash Mishra', student_id: str = '06375727', student_email_address: str = 'aamishra@stanford.edu', is_international_student: bool = False))\nmain.result = {'success': True, 'transaction_id': UUID('97281e4a-5155-4eff-b85a-7a2ef958297a')}\n", "global_context": "answer = answer('What are the reviews for the course CS 242?')\nanswer.result = [{'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': ['Do it!', \"In this class you'll look how/why inheritance is implemented in Java/C  , learn a bit of Haskell and look at the functional side, you'll know how the vtables are structured in C  , and implement a Haskell interpreter in JavaScript as one of the first homeworks. Enjoy, lucky student! :D The first few weeks homeworks take a lot more time and effort than the following ones. Make sure you read extra reading materials and referenced papers, they are fun!\", 'no', 'Do a Haskell tutorial first.', 'Look at homeworks early to determine which ones will require extra time.', \"The first two assignments are probably the hardest ones and require some time to finish. The rest of the assignments are pretty straightforward. The slides do. It contain much information. You need to watch the lectures multiple times to get what they mean. The midterm is much easier than the final, but in general you'll have enough time for both. It's pretty hard to find your way in to this class but once you get the concepts and style, it's much easier to follow. This being said I don't know how helpful this information will be since Edward was teaching this class for the last time and the class itself might change quite a bit.\", 'Moderately Difficult and Somewhat Competitive', 'Homework assignments are a fun challenge and highlight key concepts.', \"Unfortunately Edward is graduating and will not be teaching it in the future :( It's still a valuable class but I'm very sad that future students will miss his excellent instruction.\", 'Absolutely take it', 'The course assignments (with exception of the written assignment) are awesome and will teach you a lot.', 'Content is very interesting. Lectures are hard to follow. Assignments not a lot of work.', \"Edward is very knowledgable and has deep insights on various languages and everything related to the course, but not very experienced on how to lecture and let us understand well (but given he's still a Phd student, you cannot expect a teaching veteran). Minds usually jump, and if you want to get to know every part, a lot of extra hours of self-exploration is expected.\", \"Fantastic course if you're interested in learning more about functional programming and the core ideas behind programming languages. You end up seeing a lot of really cool topics and ideas! The class does assume that you have a decent amount of exposure to systems and different languages though, and while it's definitely possible to catch up, the lecturers do seem to speed past some of the material.\", 'This is a really well-taught course with lectures that are more enjoyable and engaging than most. Edward is a natural lecturer and clearly puts a lot of thought into how to present concepts in an accessible and appealing way. The workload is fairly light.', \"It's a lot of small topics, but you will leave feeling a lot more equipped to tackle new languages and concepts.\", 'It is a very helpful course -- I recommend this course.', \"It's rather difficult despite the innocuous name.\", 'Highly recommend!', \"Very interesting, and very useful. Devote time to the labs and you'll have a leg up on understanding for the exams.\", \"If you are interested in a theoretical background behind programming languages definitely take it! Don't take it if you're interested in learning functional programming or objected oriented programming. It's not a class that teach us the paradigms but benefits of each paradigm.\", 'This is a good course for an overview on programming languages. You need to work on your own, or take more computer science courses to develop this subject.', 'Edward has great drawings. Honestly, I really liked this class. The workload gets lighter as the course goes on.', 'Unfortunately the great teacher will no longer be teaching...so who knows?', 'Great course and professor, very interesting without being too much work.', 'You will learn a lot of material.  Most of it will not be needed to do the homeworks which are intriguing but not very challenging.  People tended to do very well on the homeworks, so I am sure grades were determined pretty much by the midterm and final grades.', 'This is a great class, and Edward is a fantastic teacher \u00e2\u20ac\u201d going to class is fun!', \"Much of the homework feels needlessly complex. I struggled for hours on syntax problems with Haskell, etc. The concepts from lecture are interesting, and are understood within a few hours. However, you will spend *many* more hours thereafter struggling on silly bugs. I don't think that the amount of time put into the coding assignments is worth it for the knowledge that you gain. I do believe that the lectures are worth it, though.\", \"The course isn't that bad, and you learn a lot.\", \"Very insightful, and good for people who don't quite understand the non-obvious, underlying differences between popular languages like C  , Java, JavaScript, and Haskell.\", \"Assignments are easy but the tests are really difficult. Make sure to go to office hours often if you're not understanding concepts.\", 'Definitely recommend if you are thinking of taking 143 or have taken 143 and enjoyed the material. I think the two classes complement each other nicely.', \"I felt like this course taught me a lot of superficially interesting material that I don't think will be particularly helpful in real life but was at least kind of cool to learn. Not too much work.\", \"It's a class with a good useful-knowledge-to-time-spent ratio.\", \"A great class if you are interested in programming languages, but keep in mind it can get very challenging. Really touches on the lower level of languages, shouldn't be taken to broaden your skill in languages but rather your knowledge of their workings.\", \"Take this course! It's so much fun! Do don't really need any prereq's except for familiarity with Javascript and even that is a loose prereq. Every assignment is clearly laid out for you, step-by-step.\", 'The instructions are very thorough. You will learn a lot about research language Haskell and web language Javascript. The homework loads are not that even, with the hardest one taking around 20-25 hours and the easiest one taking about 1 hour.', 'Take it with EZ! Great instructor with clear goals.  The course definitely gave me a better understanding of how programming languages work, and how to leverage them to do things with code!']}, {'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': ['Absolutely worthwhile, covers lots of interesting topics in an engaging way. But pay attention - the course goes by quickly and a lot of complex topics only get covered fairly briefly.', 'Good to have strong programming knowledge before taking this class.', 'The course is still taking form, it should improve in future iterations', 'Attend the first lecture to know whether it teaches the same thing as you thought', 'Programming languages is a high-level introduction to some ideas in PLs. You touch on a lot of PL ideas, and implement some cool assignments.', \"It's a new course, so there's a few kinks here and there, but overall a good class\", 'I never had any experience with the topics in this class beforehand. Be prepared to learn a lot on your own and dedicate time to it.', 'Do the homework extremely carefully because there is grade inflation and homework takes a large part in the final grade. Be especially careful about proof assignments. Their grading can be very hash!', 'You should be familiar with Lua, OCaml and Rust before taking this course, or you will waste 10 hours a week debugging with an unfamiliar language.', \"Assignments are tough. And don't start assignments until they fix all the bugs.\", 'Will is a great instructor and super enthusiastic about the material', 'Will is a great instructor and I enjoyed the class overall. However, I found class assignments to be more work than I expected.', 'Very interesting material and an enthusiast instructor. Doesn\u00e2\u20ac\u2122t go much into depth but a decent overview', 'homework is hard and make sure  you go to office hour early. Will is a great instructor and topics he chose are interesting.', 'Students should take this course if Will Crichton is teaching it. He covers a lot of material but makes it very easy to digest.', 'If you learn well by doing projects, this is a good class for you.', \"Start the assignments/read through them early. It's far more valuable to physically show up to lectures\", 'Interesting class if you want to learn about general ideas behind programming languages. Also get to have some familiarity with new languages!', 'Excellent introduction to different features / considerations for different types of programming languages.  Assignments generally were more application-focused than theoretical with some exceptions.', \"Interesting material, though I would rather have more in-depth assignments every two weeks rather than weekly assignments.  I appreciated Will's lectures and code examples, they were generally clear and well structured.  My main complaint was that there were hidden tests on the homework assignments that were completely unknown to us, so we couldn't even see if our code was crashing.  I would prefer a 221-style approach where the hidden tests are shared, but without the results -- so it's possible to see whether the code runs, but not what the expected answer is.\", \"The assignments can be tough because you'll have to learn three languages over the course of seven weeks and work with concepts that are likely unfamiliar: you'll learn a lot but it will be a grind towards the beginning of the course.\", 'This course is definitely a difficult one but it is surely worth it. I think the class ended up being more about learning the three languages, rather than necessarily the \"linguistics\" of programming languages, but there was still plenty of time and energy on comparison. Will is a stellar and didactic teacher, take it with him if you can!', 'Interesting and enjoyable course. The lectures were generally good, although sometimes confusing (especially the ones on Rust). Assignment difficulty was not too bad usually but a few of the assignments took a very long time.', 'CS 242 is a class whose character completely depends on the instructor. I loved that Will Crichton was a very enthusiastic lecturer and cared a lot about his students. While I learned a lot of in the class about programming languages, the material was not presented in a way that helped me understand why the things taught in lecture were meaningful. I am left with many unanswered questions including: Why are functional languages designed the way they are? Why study lambda calculus, and how does lambda calculus relate to modern programming languages? Why did we study Lua, as opposed to any other (more popular) scripting language?', 'Will is a great instructor. He brings energy to class and makes you excited to learn. The assignments are, for the most part, really interesting and pretty challenging. Be prepared to put in a good amount of work. The final project is non-trivial so be sure to set aside enough time for it.', 'Will is a very passionate lecturer, which makes the topic very interesting. Unfortunately he has some unrealistic expectations for the amount of time students will put into the course. At the beginning of the course it was fine, but a very difficult final assignment combined with a final project where putting in the \"average\" amount of time at 30 hours would give you a B made the class turn sour in the end. Overall the class ramped up a huge amount due to the requirements of the final project and required much more work than 3 units. Hopefully the course staff will get the class more in line with a reasonable workload in future iterations.', \"It was a good course for its first iteration, but the languages chosen didn't feel like a win over what I already knew.\", \"Take it! You learn a lot, it's both theoretically and practically very useful, and you learn a lot. The programming assignments are all very interesting and the project at the end can be taken in many different interesting directions.\", 'I would recommend ti to anyone with an interest in learning more about the variations between programming languages and the reasons to pick certain languages for different projects.']}, {'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': [\"This course is a must-take, period.  While it can seem abstract in the beginning, it builds a foundation for understanding software that extends beyond any particular tools. Furthermore, it's a look into the future of how software can be built.\", 'Good course', \"This course is a mix of theory and practical programming languages. It's not all theoretical, but it isn't just a survey of different programming languages. It provides a theoretical foundation, and exposure to different styles of programming languages, all while motivating their different features.\", \"Will is a great lecturer and you'll learn a lot from him!\", \"The pace is very quick and there's really no easy way to catch up if you fall behind. So stay on top of classes and coursework. Instructor and TAs extremely helpful and supportive, want you to succeed.\", 'Will is a great instructor and the assignments for this course are well put together.', \"It's a really well constructed course and Will's lectures are really insightful and impassioned. It's a must-take course for those interested in Programming Languages.\", 'It is a useful course to deeply understand how programming languages are designed, and the course is really well organised.', 'great intro into functional programming and programming language theories', \"it's a lot of time!\", 'Will is an engaging and very talented lecturer and instructor, and cares about his students. The course was challenging because it went over so many different topics, and does take significant effort, but as a result you get a holistic understanding of multiple programming languages. The assignments are very good educational experiences. Highly recommended!', 'Fun, challenging assignments and interesting material. Will is a passionate and knowledgeable lecturer. Would recommend.', 'The course is very worthwhile with a large breadth of topics and programming languages covered.', 'PL as taught by Will is a good class. He listens to student feedback seriously and tries to make the course better, which I appreciate!', 'Very high-quality course.', \"Actually go to lecture or you'll be super confused on the assignments and end up spending way more extra time trying to learn for yourself than you saved by skipping lecture...\", 'You should take it! Especially if you have an interest in theory/compilers/systems/programming languages. Will pours his heart into this class and it really shows. The projects are incredible (although a bit buggy) and the concepts are really interesting.', \"Take it! It was not what I expected and was a lot of work (office hours were a blessing) but it introduced me (thoroughly!) to functional programming concepts that I am now looking into further on my own because I am interested in different ways of thinking about computation and how that will affect the way I approach programming problems in the future. It's also fun to learn a bit of Rust and Lua! (I was not as much of a fan of OCaml and WebAssembly)\", 'Useful for all programmers and computer scientists, from systems engineers to theoreticians.', \"It's an interesting class to take because it reflects on the translation that occurs between the model of computation you have in your head and how you express that model of computation using the tools a programming language gives you. You learn a lot about types and the theory behind them. This class also gives you exposure to more modern programming languages that have neat features that enable you to write better code (both in a correctness sense and a style sense). Will Crichton is an enthusiastic instructor that has put a ton of time into make this a great course. If you're at all interested in the future of programming languages and how programming languages can enable you to better reason about your code, this is a good class to take.\", 'Good introduction to PL theory, functional programming, and some interesting languges', \"This is the best CS class I've taken at Stanford. You're doing yourself a disservice by not taking it. I enjoyed every single lecture, and Will is incredibly passionate about the material. The assignments are fun and not too hard, and you will leave this class with much appreciation for the material.\", \"Pros: Get exposure to a number of less popular languages (OCaml, Rust, Lua) and a better vocabulary for discussing what matters in programming languages (strength of type system and automatic vs. manual memory management). It's still not really clear to me how the Lambda Calculus practically relates to the rest of the course, so the first few weeks were a bit frustrating, but I found it more enjoyable after that.\", 'Will is clearly passionate about the course material, and his teaching style is very engaging. The assignments complement the lectures very well, are reasonably challenging, but never overwhelming.', \"Having taken CS143, I found myself really wishing the 143 was a prereq for this class. I think that would have allowed Will to go much deeper into the material and would have removed redundancies. Will is an awesome and enthusiastic teacher and I was super impressed by the amount of time and effort he put into the course. Given that the assignments were new, it was also amazing that there weren't really any bugs. At times towards the end of the course, I felt like I wasn't learning that much from the assignments besides practicing programming in a new language. It was cool to learn about Rust from a programming languages perspective since it is gaining traction in the systems community.\", 'The course is still being iterated, but the material, professor and assignments are  interesting.', \"Fantastic course, would highly recommend. Reasonable expectations throughout the whole quarter. Will cares a lot about the quality so the course will surely improve.   A note on prereqs: I hadn't taken 110 and was largely fine. There was one assignment where basic knowledge of threads is assumed, but it's something you can learn on the fly.\", 'This is a great class and you will learn so much from it! Will cares a lot that his class is well taught and that assignments will help you reinforce the content of the class. I enjoyed taking this class so much.', \"It's a course that keeps changing, so it's hard to say. It's definitely heavy on both theory and system topics, and it's a sizeable amount of work. You'll learn some cool stuff though, but at a fast pace.\", 'This is one of the best classes I have taken at Stanford. The material is fascinating, and Will is an amazing teacher. He cares a lot about what students get out of the class and effectively designs lectures and assignments to maximize learning. Some parts of the course were challenging and others felt too easy, but Will is receptive to feedback and will probably make adjustments for the next iteration. Overall I learned a ton and consistently enjoyed the class.', 'Great class! Will is super passionate about the topic and he puts a lot of time into the notes and assignments he gives you. He manages to cover a wide span of PL theory and application in just the ten weeks and tests your programming skills.', \"Great class! The beginning is a little more theoretical than you might expect, but it ends up quickly building to practical considerations of languages including OCaml, Rust and Lua, all of which you get to use in homework assignments. Rust is probably the trickiest, because of its borrow checker, but once you learn the idioms used for Rust programming it's not too bad. Homeworks were reasonable in length and effectively illustrated points taught in class. I felt like I got a lot out of this class!\", 'Will Crichton is an excellent instructor.', 'This class is great regardless of your area of focus! It exposes you to a variety of PL representing important concepts that you might not see in other classes, without forcing you to spend too much frustration on syntax. Will is a great lecturer, and the assignments are fun. The workload is reasonable, and a good ratio of time spent to amount learned', \"This course's grading policy has a heavy emphasis on application, but classes and lectures are more theory based.\"]}, {'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': ['This course will change your view about programming languages and it will be starting point for programming language theory', \"Take it. It speaks truth about what matters in designing a good language, and moreover teaches you tools to think in terms of types , lambda calculus, and all the wonderful PL paradigms, so at the end of it you're much better off understanding the status quo of the software industry, and what needs to be improved. I recommend this to anyone who wants to understand modern software.\", 'Will is extremely enthusiastic in teaching. Notes are well organized and help a lot.', 'Get started on the homework early, but Will is a great instructor.', 'Great course!', 'Take it!', 'Be sure to dedicate enough time for the final! (At least DLang can be non-trivial if you try to cram it).', 'Lectures are invaluable as are OH.', 'There is a lot of work, so plan your schedule accordingly.', \"The concepts you learn in this course are crucial to becoming a good programmer for many areas in compute science. Even if you don't use Rust, the way you write programs will change.\", \"I didn't really understand the first week of lectures until about halfway through the quarter; after that, the whole class gets a lot more fun. One of the few 200-level CS classes that's close to the core series in terms of the (high) quality of assignments/lecture notes. Lectures can be a little dry, despite best efforts; there's a good amount of writing proofs on a whiteboard.\", 'Excellent course. Learned so much about PL and I am truly inspired by this course on what the term \"programming language\" means. The contents are extremely organized and assignments are very effective in helping me understand the concepts.', 'Good introduction to PL. The second half of the course becomes more programming intensive / straightforward than the first couple weeks', 'Take it!! It so different than most CS classes at Stanford and Will is a great teacher!', \"Deeply interesting course, very much recommend if you're interested in learning about PL theory or functional programming.\", 'Very good course. Learnt a lot about PL.', 'This course is a lot of fun with functional programming and types. You will learn several languages in a short amount of time, and learn about the language design considerations. Sometimes the time can be long between assignment release and it being ready, bug-free and has correct GradeScope tests, which was the main shortcoming of the version I took this quarter.', \"Really interesting course, the content is more unusual than most other courses and it's a nice trek through how and why programming languages are the way they are (and insight into where the future of languages is headed). This course is not overly theoretical, most of the assignments are a practical deep dive into some aspect of programming language design. I came in with some prior experience with OCaml, but I enjoyed learning Rust and overall the course was a great experience.\", 'I think the course was way harder than it needed to be and learning 3 different programming languages in 1 quarter is definitely challenging,', 'It will make you a better programmer', 'Do not do the RLU project if they are still keeping it for the final.', 'I really loved this class, and it probably will be one of the most impactful on my skills as a software engineer when I leave Stanford. 2nd year MSCS in AI/system.', 'While this course can be fairly time intensive especially in the first few weeks, the material really comes together in the end, and overall the course is a positive experience! Office hours are extremely helpful for understanding the material.', 'One of my favorite courses at Stanford so far. I really like how the class focused on application and also learning through the homeworks rather than through exams, I felt that I learned a lot more this way', 'This class is a systems and theory class. It is less about implementation, although the course description implies otherwise.', 'Take it! This is the only course of its kind in the Stanford CS department', \"Really interesting class at the intersection of theory and systems, which means it bounces back and forth between proof-writing assignments and big coding assignments. Sometimes the assignment releases were delayed, but that's because Will re-wrote a huge portion of the assignments to improve from the previous offering and fit more closely with what we were learning--he's an excellent instructor who cares a whole lot about the course.\", 'The best and most valuable computer science course I have taken at Stanford', \"the course isn't the easiest, especially if you don't have a ton of exposure to some the kinds of math that show up, but Will is one of the best lecturers at Stanford, hands down. You learn a ton and he's an incredible resource all around.\", 'This class was very challenging but very rewarding-- Will is a wonderful, enthusiastic lecturer, and the assignments were interesting', 'It is still getting developed- there were homework typos and some delays, but overall a great course.', \"It's a lot of work and not very fun.\", 'Take it, you will learn so much, but be prepared for the workload! The first two assignments were by far the heaviest of the quarter, but the programming assignments and theorem proving final were a lot of fun.', \"A lot of breadth but not a lot of depth. You'll be exposed to a lot of new concepts and programming languages which you can further explore if you're interested.\", 'This quarter (Fall 19-20) Will made the class significantly more time-consuming at the start (I think) in comparison to the previous offering. I did not expect to be spending 110-like amounts of hours for some of the weeks.  Still, Will taught the class well, with great lecture notes in a way that got the content across, with assignments that actually relate to lectures. So if you have time, down to learn a new perspective on programming (from imperative languages like python, c, etc.), go for it!', \"It's probably a lot harder than you think it will be. That being said, it's a completely different way of thinking about CS, and it's really cool!\", \"Would not recommend this course unless you have a fairly extensive background in math, theory (PHIL 150, CS 157), or have a lot of time on your hands to always be in office hours.  I had the listed prerequisites for the class, yet I constantly felt like I was extremely unprepared.  Don't use other quarter evaluations to determine if you should take this class, it has been completely redone (even though the instructor is the same).  If you do choose to take this class and you get stuck, Will is a nice person and he tries to make time for students, so you might consider reaching out to him for one-on-one help.  Also if you're stuck on assignments, sometimes the order of the parts of an assignment will not be the most intuitive for you personally, so try solving the problems in another order.\", \"Think twice if the first lecture (and Will's passion) lured you into taking this class. For Autumn 2019, the time commitment stats from the previous quarter was a complete lie, so don't trust the stats too much. I have heard multiple students comparing the workload of this class to CS110 (or worse than it). Otherwise, Will and the course staff are very nice and helpful!\", \"This class significantly ramped up compared to every previous iteration. The first two assignments took around 30 hours to complete and many people dropped because the instruction staff didn't really warn people. Every subsequent assignment has been tough but manageable, and they all help you learn a ton. Just be ready to put in the work, but it's worth it.\", 'course can be fun but is somewhat time consuming in random weeks', \"An amazing course! Will is a fantastic lecturer and you should not miss the opportunity to learn about programming language design and the beauty of functional languages. The course gets heavily revamped every quarter, so your mileage may vary, but it is still structured very well regardless and introduces a ton of fascinating and industry-applicable material, whether you are interested in AI, systems, or even full-stack. I would say this is one of the best courses I've taken and will revolutionize the way you think about software development! You'll never get a null pointer exception, segfault, or memory leak ever again.\", \"This class is ever shifting, so while old comments are a decent litmus test, the difficulty of the class may vary wildly. Will is always trying to improve it - but sometimes he swings too far in the difficulty direction. It was very difficult this quarter and had a HUGE workload. However, we all learned a ton, so make of that what you will! Will is an excellent instructor, so if you're at all interested, it's worth the chance - just be wary of the workload.\", 'This is a horrible course. Worst class I have taken at Stanford. The assignment is due on Wednesday and almost all of them have several bugs till Monday. Lecture is essentially useless. Office hours are understaffed. The remote final was not entirely released till 5 days before due date. DO NOT TAKE IT', \"Difficult course, but one of my favorites at Stanford (definitely a change of pace from my AI track courses). Will is a very enthusiastic lecturer and encourages students to learn and attend office hours. His teaching style and enthusiasm is how I managed to stick with going to lecture all quarter (I typically don't).  The course is still being developed so sometimes the assignments have bugs in them, but the teaching staff work hard to get them all ironed out. I'd highly recommend taking this course if you have an otherwise light quarter (weekly psets are time consuming) or might be interested in this topic.\", 'The first half of the course is hard because of the theory, and the second half is hard because of the programming assignments. The assignments dominated all of my time for the quarter. Course staff is friendly but OH can be busy and stressful. The lectures are not super interesting unless you are really excited to hear about parts of the lambda calculus and Rust in extreme detail.', \"Definitely recommend this class if you're interested in learning more about how advances in programming languages can help engineers write safer and better code\", \"This is a really good course. I took it basically on a dare -- without having taken CS110 and with relatively limited programming experience outside of Python and C, and pretty basic knowledge of CS theory. As a result, I think I definitely had to put in more work than the average student. That said, it was an absolutely fascinating (albeit sometimes intense) trip through a field I had known nothing about, and I'm really glad I took it.   The weekly homework assignments were often pretty time-consuming for me, and it would have been nice to get a break here or there. All the same, a great course!\", \"This class is really hard. Period. Take it with plenty of time to work on the assignments, because they'll require that you go back to lecture notes and fix misconceptions. But do take it! The class is very rewarding and you learn a ton. Very few times in my five years at Stanford I've seen a professor that cares as much and will put as much effort into their class (it'll still be hard though).\", \"It's fairly interesting material. Don't be put off by the beginning work.\", 'Will is a great instructor - very passionate and enthusiastic, and good at teaching things in a way that students can understand. My only complaint was that many assignments were remade on the fly, which led to frequent bugs in assignments and TAs vaguely stating that things would be fixed/updates \"soon\" or \"ASAP\" and then not actually fixing/updating for several days.', 'Good class, take', \"It's fairly interesting, but a lot of it was overly pedantic for my taste. Much of the class is taking a pretty simple concept, then finding a way to describe and formalize it to make it seem complex. I guess formal definitions of languages are useful if you want to actually prove your systems are correct, but for most software engineers I really don't see it being useful in the near future. Being able to use a more expressive type system like Rust's is useful, particularly with respect to memory management, type state, and session state, but even Rust felt a bit half baked to me. There are things that seems like they should be really simple yet require hacks in unsafe code. The docs are littered with places where the Rust spec is not fully defined. Will's enthusiasm is fantastic though, and that always got me through the lecture even when I wasn't in love with the material!\", 'I did not know this was a systems class before taking it but I think I still did okay. One of my favorite classes and probably one of the best taught in the CS department. It can be a little difficult at times, but you want to make sure you go to office hours because the teaching staff is amazing and you can work through problems with your peers.  Will cares a lot about teaching and is incredibly knowledgeable, empathetic, and wants you to really know the material by the end of it. 10/10', 'Fantastic course! I wish there were more like this at Stanford. The first couple of weeks are pretty theory-heavy but as the course goes on it becomes more practical and I learnt a lot. Workload is consistent but manageable. Will is a great lecturer that cares a lot about his students and readily takes on feedback.', \"there's nice material in this course. it seems to be evolving a lot so the courseload may vary from previous iterations. homeworks took longer than expected, probably due to initial friction from not knowing a language / formalism\"]}, {'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': ['Interesting material and some cool projects to implement. However, a few of the assignment specs were not that helpful and I needed to go to office hours to properly understand the problems. That was especially the case for the final project.', 'Take this course if you are interested in the theoretical underpinnings of what goes into developing a programming language. Very helpful for learning the functional programming paradigm.', 'The content is interesting, but the course was better organized when Will Crichton taught it, labs, lectures, notes, and homeworks included. Some of the homeworks in this course were cool, but a lot of it felt spoon-fed or not particularly helpful for deepening or reinforcing understanding. There seemed to be a focus on how things work instead of why. This may be attributed to the intention of creating a generally lower-intensity course. The fun things were: problems in lambda calculus/ski calculus, the coroutines/continuations homework, and the final project.', 'The homeworks were scoped to be around 10 hours when I took the class but the variance was closer to 10-20 hours. The Rust project was very long (you can choose from multiple projects) -- say ~30-40 hours -- but was rewarding. New instructor and new homeworks / projects for this quarter, so likely to change & improve.', 'Interesting materials, but the lectures sometimes felt poorly-paced. The assignments were useful, but the specs were often confusing, and the quality of help from the TAs was hugely inconsistent. The final project was useful and interesting, but again the difficulty of the three choices for our projects was very skewed.', \"If you're interested in the theory behind functional programming, take this course. If you're interested in how fundamental problems in programming languages are implemented in real languages, I would not recommend this course. The majority of the homeworks were built around lambda calculus variants, which  are theoretically interesting but not particularly practical. There is a rust assignment that was cool, but the majority of the course was not about commonly used languages. In the end I found the course too theoretical and only very loosely applicable.\", '> Alex is pretty awesome! Cares a *lot* about students and always happy to take questions.nnnn> Overall thread of class is pretty unclear, though individual lectures are very coherent.nnnn> Pi calculus assignment is extremely challenging. Get on that one ASAP!', 'This is a fantastic course that taught me quite a lot about thinking differently about programming languages. The quality of instruction was fantastic! Consider taking this course!', 'Pretty well-taught and engaging material if you have any interest in the implementation of languages or programming languages theory -- the course definitely tends to the theoretical side. Assignments were not too challenging, but take advantage of office hours and start on the final project early!', \"This course is so fun! It does not require too much work, and you get to play around with really interesting ideas in programming languages. I definitely recommend it if you've ever been interested in programming language theory.\", \"This course was a bit of a letdown. I came in with high expectations, but they quickly fell flat as soon as I realized that the class was focused more on theory than on systems. I stopped going to lecture at the beginning of week 3 because of how confusing they were. Instead, I would look at the week's pset to figure out what I needed to learn; read Wikipedia, blog posts, and research papers for a few hours until I felt like I had a solid grasp of the material; and then complete the pset. On the one hand, it was frustrating that lectures were useless to me. On the other hand, I realized that I can learn difficult material on my own. And, in the end, I learned Rust, which was one of the reasons I was interested in taking the class in the first place. Overall, not the worst class in the world, but most definitely not the best class either.\", \"This is one of the most interesting courses I've had the opportunity to take at Stanford.nnIt's truly wonderful to learn programming paradigms and language features in lecture, then immediately be able to interact with those concepts in the assignments.nnThe assignments do a great job of ensuring you understand the material and the final project is extremely interesting and enjoyable.\", 'Some of the assignments were fun, but the project was a bit disorganized and took significantly longer than the assignments. The class definitely was not as practical as I was hoping it would be.', \"It's an interesting class looking at programming languages through an academic lens. The benefit is that you get a whole new way of looking at languages: lambda calculi, object calculi, typed vs untyped, etc. The issue is that for every homework it felt like I had missed half of the lectures.... even though I had poured over the details. I constantly had the feeling that I had to fill in about half of the course myself to do the homeworks. A lot of important information is communicated over Edstem rather than in the homework itself. Also, the Rust final project is a HUGE step up from the Rust homework, and the brief is poorly written and confusing. I hope the project brief will be revised in future.\", \"This class is pretty hard, the final project especially. Not ideal with a tough course load. You'll def improve as a programmer from the homeworks though.\", \"It's a fine course with some interesting things here and there but by and large quite tedious. You spend a lot of time doing the same recursive translation or type checking logic for different simple languages. It's good for insight the first time but pretty pointless to do it again and again. The final projects were kind of cool but definitely really long.nnnnIn terms of teaching, Prof. Aiken is well-intentioned and mostly okay but he could really benefit from working on his teaching process. For example, he needs to understand that you can't put big blocks of equations or maths working all at once on a slide and then just talk through them while highlighting random stuff. Either break the slides up line by line (see how Keith Schwartz does equations in slides) or work through them by hand live. You will catch a lot of the errors if you break up your presentation like this. Also space out your equations and don't use confusing variable names. I swear there was a slide where an equation had two plus symbols on a line and one of them was an operator in the language and the other was mathematical plus and there was literally no indication that those were supposed to be different until someone asked. Just use colour/bold/font or one of 6 other modalities to clarify things more.\", 'Most lectures are like, \"here's a concept; here's how it's formalized with lambda calculus; let's do some examples to feel it out.\" Aiken teaches the material solidly. Most homeworks are like, \"here's some funky language that formalizes a concept; make it do a thing.\" Overall, things are very fun, brain-teaser-y, and satisfying to complete, but it didn't feel dramatically deep or explicitly useful to a lot of subdisciplines of CS.', \"Definitely a great option for a systems PhD breadth class if you're not that interested in systems. Homeworks aren't too much work and are pretty interesting.\", \"Fun class! I think the class is changing a little bit, but we went over different simple programming languages and theory associated with them. Good background just for generally understanding type checking and early programming language theory. Didn't write in as many new languages as expected, as I had heard from previous versions of the class, but it was still a fun exercise to parse through syntax.\", 'Great course!', 'Great way to learn about non mainstream programming languages and techniques.', \"Probably a good class if you are interested in the area/potentially doing research in the area. The fact that we are introduced to the Rust programming language likely has practical benefits too. As a PhD student taking it for a breadth requirement I think it's decently hard work but manageable.\", 'Good course on underlying theory for programming languages', 'This course was good exposure but the theoretical side of this content felt kind of loose and the projects felt like a scramble to understand what was going on.', \"This course was really unfamiliar to me starting out, so most of the basic concepts were really hard to understand. It will probably be substantially easier for you if you already know lambda calculus, typechecking, etc. The problem sets were extremely hard to understand at first, and were a pretty heavy workload because there was a new one each week with no break. The office hours help for the problem sets, but they are still very challenging and it's hard to get all of your questions answered since office hours are fairly crowded. The lectures were all interesting, understandable, and organized/well-explained, but there was just so much new material (and difficult notation) that understanding the lectures was not enough to feel confident about the material. The projects were interesting and cool, but also a very heavy workload where sometimes understanding is just assumed for things that are completely new to the students.\", 'Take advantage of office hours and the forum. Jason was really helpful in office hours and made some of the abstract concepts a lot easier to understand.', \"Take it if the theoretical aspects of programming languages excites you. For example, if you're passionate about getting to learn more about the type system, or program in purely functional ways\", \"If you're interested in programming languages, take this course. However, be advised that this course is very heavily focused on the theory of programming languages (not half theory and half systems as the description implies). The majority of the lectures were working through various proofs of various properties of types and different calculi; it spent very little time working with real-world programming languages. The assignments were in Python, Racket, and Rust, but that was incidental\u2014we were told to read a handout that covered the basics of each language before starting the assignments, but otherwise there was no real explanation of the up or downsides of each. Some of the assignments were also written ambiguously or under-specified, which led to issues when trying to figure out what they meant.\", 'It's an interesting introduction to programming paradigms outside the most common languages. The material is a bit dryly presented in class, but for the most part the programming assignments are pretty easy. The \"final project\" is basically just a big programming assigment.']}]\nmain = Main(courses_to_take = courses_to_take_1, student_info_details = student_info)\nmain.result = {'success': True, 'transaction_id': UUID('97281e4a-5155-4eff-b85a-7a2ef958297a')}\ncourse = Course(course_name = 'CS 148', grade_type = 'Credit/No Credit', course_num_units = 3)\ncourse_0 = Course(course_name = 'CS 148', grade_type = 'Credit/No Credit', course_num_units = 3)\ncourse_2 = Course(course_num_units = 3)\ncourses_to_take_1 = CoursesToTake(course_0_details = course, course_1_details = course_3, more_courses_2 = False, more_courses_3 = False)\nstudent_info = StudentInfo(student_name = 'Aakash Mishra', student_id = '06375727', student_email_address = 'aamishra@stanford.edu', is_international_student = False)\ncourse_3 = Course(course_name = 'CS 242', grade_type = 'Credit/No Credit', course_num_units = 3)\ncourse_4 = Course(course_name = 'CS 242', grade_type = 'Credit/No Credit', course_num_units = 3)\ncourse_5 = Course(course_name = 'CS 242', grade_type = 'Credit/No Credit', course_num_units = 3)\n", "system_action": ["AskField(courses_to_take_1, confirm, Confirm all the course details before saving)"], "user_target_sp": "courses_to_take_1.course_1_details = Course(course_name='CS 242', grade_type='Credit/No Credit', course_num_units=3)\nmain.courses_to_take = courses_to_take_1", "user_target": "course_5 = Course(course_name='CS 242', grade_type='Credit/No Credit', course_num_units=3)\ncourses_to_take_1.course_1_details = course_5\nmain.courses_to_take = courses_to_take_1", "user_target_suql": ""}, {"user": "I can confirm", "bot": "Thank you for confirming. I'll proceed with submitting your course selection. If there's anything else you need help with, feel free to ask!", "turn_context": "main = Main(courses_to_take = courses_to_take_1, student_info_details = StudentInfo(student_name: str = 'Aakash Mishra', student_id: str = '06375727', student_email_address: str = 'aamishra@stanford.edu', is_international_student: bool = False))\nmain.result = {'success': True, 'transaction_id': UUID('97281e4a-5155-4eff-b85a-7a2ef958297a')}\ncourses_to_take_1 = CoursesToTake(course_0_details = Course(course_name: str = 'CS 148', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3), course_1_details = Course(course_name: str = 'CS 242', grade_type: Enum['Credit/No Credit', 'Letter'] = 'Credit/No Credit', course_num_units: int = 3), more_courses_2 = False, more_courses_3 = False, confirm = True)\n", "global_context": "answer = answer('What are the reviews for the course CS 242?')\nanswer.result = [{'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': ['Do it!', \"In this class you'll look how/why inheritance is implemented in Java/C  , learn a bit of Haskell and look at the functional side, you'll know how the vtables are structured in C  , and implement a Haskell interpreter in JavaScript as one of the first homeworks. Enjoy, lucky student! :D The first few weeks homeworks take a lot more time and effort than the following ones. Make sure you read extra reading materials and referenced papers, they are fun!\", 'no', 'Do a Haskell tutorial first.', 'Look at homeworks early to determine which ones will require extra time.', \"The first two assignments are probably the hardest ones and require some time to finish. The rest of the assignments are pretty straightforward. The slides do. It contain much information. You need to watch the lectures multiple times to get what they mean. The midterm is much easier than the final, but in general you'll have enough time for both. It's pretty hard to find your way in to this class but once you get the concepts and style, it's much easier to follow. This being said I don't know how helpful this information will be since Edward was teaching this class for the last time and the class itself might change quite a bit.\", 'Moderately Difficult and Somewhat Competitive', 'Homework assignments are a fun challenge and highlight key concepts.', \"Unfortunately Edward is graduating and will not be teaching it in the future :( It's still a valuable class but I'm very sad that future students will miss his excellent instruction.\", 'Absolutely take it', 'The course assignments (with exception of the written assignment) are awesome and will teach you a lot.', 'Content is very interesting. Lectures are hard to follow. Assignments not a lot of work.', \"Edward is very knowledgable and has deep insights on various languages and everything related to the course, but not very experienced on how to lecture and let us understand well (but given he's still a Phd student, you cannot expect a teaching veteran). Minds usually jump, and if you want to get to know every part, a lot of extra hours of self-exploration is expected.\", \"Fantastic course if you're interested in learning more about functional programming and the core ideas behind programming languages. You end up seeing a lot of really cool topics and ideas! The class does assume that you have a decent amount of exposure to systems and different languages though, and while it's definitely possible to catch up, the lecturers do seem to speed past some of the material.\", 'This is a really well-taught course with lectures that are more enjoyable and engaging than most. Edward is a natural lecturer and clearly puts a lot of thought into how to present concepts in an accessible and appealing way. The workload is fairly light.', \"It's a lot of small topics, but you will leave feeling a lot more equipped to tackle new languages and concepts.\", 'It is a very helpful course -- I recommend this course.', \"It's rather difficult despite the innocuous name.\", 'Highly recommend!', \"Very interesting, and very useful. Devote time to the labs and you'll have a leg up on understanding for the exams.\", \"If you are interested in a theoretical background behind programming languages definitely take it! Don't take it if you're interested in learning functional programming or objected oriented programming. It's not a class that teach us the paradigms but benefits of each paradigm.\", 'This is a good course for an overview on programming languages. You need to work on your own, or take more computer science courses to develop this subject.', 'Edward has great drawings. Honestly, I really liked this class. The workload gets lighter as the course goes on.', 'Unfortunately the great teacher will no longer be teaching...so who knows?', 'Great course and professor, very interesting without being too much work.', 'You will learn a lot of material.  Most of it will not be needed to do the homeworks which are intriguing but not very challenging.  People tended to do very well on the homeworks, so I am sure grades were determined pretty much by the midterm and final grades.', 'This is a great class, and Edward is a fantastic teacher \u00e2\u20ac\u201d going to class is fun!', \"Much of the homework feels needlessly complex. I struggled for hours on syntax problems with Haskell, etc. The concepts from lecture are interesting, and are understood within a few hours. However, you will spend *many* more hours thereafter struggling on silly bugs. I don't think that the amount of time put into the coding assignments is worth it for the knowledge that you gain. I do believe that the lectures are worth it, though.\", \"The course isn't that bad, and you learn a lot.\", \"Very insightful, and good for people who don't quite understand the non-obvious, underlying differences between popular languages like C  , Java, JavaScript, and Haskell.\", \"Assignments are easy but the tests are really difficult. Make sure to go to office hours often if you're not understanding concepts.\", 'Definitely recommend if you are thinking of taking 143 or have taken 143 and enjoyed the material. I think the two classes complement each other nicely.', \"I felt like this course taught me a lot of superficially interesting material that I don't think will be particularly helpful in real life but was at least kind of cool to learn. Not too much work.\", \"It's a class with a good useful-knowledge-to-time-spent ratio.\", \"A great class if you are interested in programming languages, but keep in mind it can get very challenging. Really touches on the lower level of languages, shouldn't be taken to broaden your skill in languages but rather your knowledge of their workings.\", \"Take this course! It's so much fun! Do don't really need any prereq's except for familiarity with Javascript and even that is a loose prereq. Every assignment is clearly laid out for you, step-by-step.\", 'The instructions are very thorough. You will learn a lot about research language Haskell and web language Javascript. The homework loads are not that even, with the hardest one taking around 20-25 hours and the easiest one taking about 1 hour.', 'Take it with EZ! Great instructor with clear goals.  The course definitely gave me a better understanding of how programming languages work, and how to leverage them to do things with code!']}, {'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': ['Absolutely worthwhile, covers lots of interesting topics in an engaging way. But pay attention - the course goes by quickly and a lot of complex topics only get covered fairly briefly.', 'Good to have strong programming knowledge before taking this class.', 'The course is still taking form, it should improve in future iterations', 'Attend the first lecture to know whether it teaches the same thing as you thought', 'Programming languages is a high-level introduction to some ideas in PLs. You touch on a lot of PL ideas, and implement some cool assignments.', \"It's a new course, so there's a few kinks here and there, but overall a good class\", 'I never had any experience with the topics in this class beforehand. Be prepared to learn a lot on your own and dedicate time to it.', 'Do the homework extremely carefully because there is grade inflation and homework takes a large part in the final grade. Be especially careful about proof assignments. Their grading can be very hash!', 'You should be familiar with Lua, OCaml and Rust before taking this course, or you will waste 10 hours a week debugging with an unfamiliar language.', \"Assignments are tough. And don't start assignments until they fix all the bugs.\", 'Will is a great instructor and super enthusiastic about the material', 'Will is a great instructor and I enjoyed the class overall. However, I found class assignments to be more work than I expected.', 'Very interesting material and an enthusiast instructor. Doesn\u00e2\u20ac\u2122t go much into depth but a decent overview', 'homework is hard and make sure  you go to office hour early. Will is a great instructor and topics he chose are interesting.', 'Students should take this course if Will Crichton is teaching it. He covers a lot of material but makes it very easy to digest.', 'If you learn well by doing projects, this is a good class for you.', \"Start the assignments/read through them early. It's far more valuable to physically show up to lectures\", 'Interesting class if you want to learn about general ideas behind programming languages. Also get to have some familiarity with new languages!', 'Excellent introduction to different features / considerations for different types of programming languages.  Assignments generally were more application-focused than theoretical with some exceptions.', \"Interesting material, though I would rather have more in-depth assignments every two weeks rather than weekly assignments.  I appreciated Will's lectures and code examples, they were generally clear and well structured.  My main complaint was that there were hidden tests on the homework assignments that were completely unknown to us, so we couldn't even see if our code was crashing.  I would prefer a 221-style approach where the hidden tests are shared, but without the results -- so it's possible to see whether the code runs, but not what the expected answer is.\", \"The assignments can be tough because you'll have to learn three languages over the course of seven weeks and work with concepts that are likely unfamiliar: you'll learn a lot but it will be a grind towards the beginning of the course.\", 'This course is definitely a difficult one but it is surely worth it. I think the class ended up being more about learning the three languages, rather than necessarily the \"linguistics\" of programming languages, but there was still plenty of time and energy on comparison. Will is a stellar and didactic teacher, take it with him if you can!', 'Interesting and enjoyable course. The lectures were generally good, although sometimes confusing (especially the ones on Rust). Assignment difficulty was not too bad usually but a few of the assignments took a very long time.', 'CS 242 is a class whose character completely depends on the instructor. I loved that Will Crichton was a very enthusiastic lecturer and cared a lot about his students. While I learned a lot of in the class about programming languages, the material was not presented in a way that helped me understand why the things taught in lecture were meaningful. I am left with many unanswered questions including: Why are functional languages designed the way they are? Why study lambda calculus, and how does lambda calculus relate to modern programming languages? Why did we study Lua, as opposed to any other (more popular) scripting language?', 'Will is a great instructor. He brings energy to class and makes you excited to learn. The assignments are, for the most part, really interesting and pretty challenging. Be prepared to put in a good amount of work. The final project is non-trivial so be sure to set aside enough time for it.', 'Will is a very passionate lecturer, which makes the topic very interesting. Unfortunately he has some unrealistic expectations for the amount of time students will put into the course. At the beginning of the course it was fine, but a very difficult final assignment combined with a final project where putting in the \"average\" amount of time at 30 hours would give you a B made the class turn sour in the end. Overall the class ramped up a huge amount due to the requirements of the final project and required much more work than 3 units. Hopefully the course staff will get the class more in line with a reasonable workload in future iterations.', \"It was a good course for its first iteration, but the languages chosen didn't feel like a win over what I already knew.\", \"Take it! You learn a lot, it's both theoretically and practically very useful, and you learn a lot. The programming assignments are all very interesting and the project at the end can be taken in many different interesting directions.\", 'I would recommend ti to anyone with an interest in learning more about the variations between programming languages and the reasons to pick certain languages for different projects.']}, {'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': [\"This course is a must-take, period.  While it can seem abstract in the beginning, it builds a foundation for understanding software that extends beyond any particular tools. Furthermore, it's a look into the future of how software can be built.\", 'Good course', \"This course is a mix of theory and practical programming languages. It's not all theoretical, but it isn't just a survey of different programming languages. It provides a theoretical foundation, and exposure to different styles of programming languages, all while motivating their different features.\", \"Will is a great lecturer and you'll learn a lot from him!\", \"The pace is very quick and there's really no easy way to catch up if you fall behind. So stay on top of classes and coursework. Instructor and TAs extremely helpful and supportive, want you to succeed.\", 'Will is a great instructor and the assignments for this course are well put together.', \"It's a really well constructed course and Will's lectures are really insightful and impassioned. It's a must-take course for those interested in Programming Languages.\", 'It is a useful course to deeply understand how programming languages are designed, and the course is really well organised.', 'great intro into functional programming and programming language theories', \"it's a lot of time!\", 'Will is an engaging and very talented lecturer and instructor, and cares about his students. The course was challenging because it went over so many different topics, and does take significant effort, but as a result you get a holistic understanding of multiple programming languages. The assignments are very good educational experiences. Highly recommended!', 'Fun, challenging assignments and interesting material. Will is a passionate and knowledgeable lecturer. Would recommend.', 'The course is very worthwhile with a large breadth of topics and programming languages covered.', 'PL as taught by Will is a good class. He listens to student feedback seriously and tries to make the course better, which I appreciate!', 'Very high-quality course.', \"Actually go to lecture or you'll be super confused on the assignments and end up spending way more extra time trying to learn for yourself than you saved by skipping lecture...\", 'You should take it! Especially if you have an interest in theory/compilers/systems/programming languages. Will pours his heart into this class and it really shows. The projects are incredible (although a bit buggy) and the concepts are really interesting.', \"Take it! It was not what I expected and was a lot of work (office hours were a blessing) but it introduced me (thoroughly!) to functional programming concepts that I am now looking into further on my own because I am interested in different ways of thinking about computation and how that will affect the way I approach programming problems in the future. It's also fun to learn a bit of Rust and Lua! (I was not as much of a fan of OCaml and WebAssembly)\", 'Useful for all programmers and computer scientists, from systems engineers to theoreticians.', \"It's an interesting class to take because it reflects on the translation that occurs between the model of computation you have in your head and how you express that model of computation using the tools a programming language gives you. You learn a lot about types and the theory behind them. This class also gives you exposure to more modern programming languages that have neat features that enable you to write better code (both in a correctness sense and a style sense). Will Crichton is an enthusiastic instructor that has put a ton of time into make this a great course. If you're at all interested in the future of programming languages and how programming languages can enable you to better reason about your code, this is a good class to take.\", 'Good introduction to PL theory, functional programming, and some interesting languges', \"This is the best CS class I've taken at Stanford. You're doing yourself a disservice by not taking it. I enjoyed every single lecture, and Will is incredibly passionate about the material. The assignments are fun and not too hard, and you will leave this class with much appreciation for the material.\", \"Pros: Get exposure to a number of less popular languages (OCaml, Rust, Lua) and a better vocabulary for discussing what matters in programming languages (strength of type system and automatic vs. manual memory management). It's still not really clear to me how the Lambda Calculus practically relates to the rest of the course, so the first few weeks were a bit frustrating, but I found it more enjoyable after that.\", 'Will is clearly passionate about the course material, and his teaching style is very engaging. The assignments complement the lectures very well, are reasonably challenging, but never overwhelming.', \"Having taken CS143, I found myself really wishing the 143 was a prereq for this class. I think that would have allowed Will to go much deeper into the material and would have removed redundancies. Will is an awesome and enthusiastic teacher and I was super impressed by the amount of time and effort he put into the course. Given that the assignments were new, it was also amazing that there weren't really any bugs. At times towards the end of the course, I felt like I wasn't learning that much from the assignments besides practicing programming in a new language. It was cool to learn about Rust from a programming languages perspective since it is gaining traction in the systems community.\", 'The course is still being iterated, but the material, professor and assignments are  interesting.', \"Fantastic course, would highly recommend. Reasonable expectations throughout the whole quarter. Will cares a lot about the quality so the course will surely improve.   A note on prereqs: I hadn't taken 110 and was largely fine. There was one assignment where basic knowledge of threads is assumed, but it's something you can learn on the fly.\", 'This is a great class and you will learn so much from it! Will cares a lot that his class is well taught and that assignments will help you reinforce the content of the class. I enjoyed taking this class so much.', \"It's a course that keeps changing, so it's hard to say. It's definitely heavy on both theory and system topics, and it's a sizeable amount of work. You'll learn some cool stuff though, but at a fast pace.\", 'This is one of the best classes I have taken at Stanford. The material is fascinating, and Will is an amazing teacher. He cares a lot about what students get out of the class and effectively designs lectures and assignments to maximize learning. Some parts of the course were challenging and others felt too easy, but Will is receptive to feedback and will probably make adjustments for the next iteration. Overall I learned a ton and consistently enjoyed the class.', 'Great class! Will is super passionate about the topic and he puts a lot of time into the notes and assignments he gives you. He manages to cover a wide span of PL theory and application in just the ten weeks and tests your programming skills.', \"Great class! The beginning is a little more theoretical than you might expect, but it ends up quickly building to practical considerations of languages including OCaml, Rust and Lua, all of which you get to use in homework assignments. Rust is probably the trickiest, because of its borrow checker, but once you learn the idioms used for Rust programming it's not too bad. Homeworks were reasonable in length and effectively illustrated points taught in class. I felt like I got a lot out of this class!\", 'Will Crichton is an excellent instructor.', 'This class is great regardless of your area of focus! It exposes you to a variety of PL representing important concepts that you might not see in other classes, without forcing you to spend too much frustration on syntax. Will is a great lecturer, and the assignments are fun. The workload is reasonable, and a good ratio of time spent to amount learned', \"This course's grading policy has a heavy emphasis on application, but classes and lectures are more theory based.\"]}, {'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': ['This course will change your view about programming languages and it will be starting point for programming language theory', \"Take it. It speaks truth about what matters in designing a good language, and moreover teaches you tools to think in terms of types , lambda calculus, and all the wonderful PL paradigms, so at the end of it you're much better off understanding the status quo of the software industry, and what needs to be improved. I recommend this to anyone who wants to understand modern software.\", 'Will is extremely enthusiastic in teaching. Notes are well organized and help a lot.', 'Get started on the homework early, but Will is a great instructor.', 'Great course!', 'Take it!', 'Be sure to dedicate enough time for the final! (At least DLang can be non-trivial if you try to cram it).', 'Lectures are invaluable as are OH.', 'There is a lot of work, so plan your schedule accordingly.', \"The concepts you learn in this course are crucial to becoming a good programmer for many areas in compute science. Even if you don't use Rust, the way you write programs will change.\", \"I didn't really understand the first week of lectures until about halfway through the quarter; after that, the whole class gets a lot more fun. One of the few 200-level CS classes that's close to the core series in terms of the (high) quality of assignments/lecture notes. Lectures can be a little dry, despite best efforts; there's a good amount of writing proofs on a whiteboard.\", 'Excellent course. Learned so much about PL and I am truly inspired by this course on what the term \"programming language\" means. The contents are extremely organized and assignments are very effective in helping me understand the concepts.', 'Good introduction to PL. The second half of the course becomes more programming intensive / straightforward than the first couple weeks', 'Take it!! It so different than most CS classes at Stanford and Will is a great teacher!', \"Deeply interesting course, very much recommend if you're interested in learning about PL theory or functional programming.\", 'Very good course. Learnt a lot about PL.', 'This course is a lot of fun with functional programming and types. You will learn several languages in a short amount of time, and learn about the language design considerations. Sometimes the time can be long between assignment release and it being ready, bug-free and has correct GradeScope tests, which was the main shortcoming of the version I took this quarter.', \"Really interesting course, the content is more unusual than most other courses and it's a nice trek through how and why programming languages are the way they are (and insight into where the future of languages is headed). This course is not overly theoretical, most of the assignments are a practical deep dive into some aspect of programming language design. I came in with some prior experience with OCaml, but I enjoyed learning Rust and overall the course was a great experience.\", 'I think the course was way harder than it needed to be and learning 3 different programming languages in 1 quarter is definitely challenging,', 'It will make you a better programmer', 'Do not do the RLU project if they are still keeping it for the final.', 'I really loved this class, and it probably will be one of the most impactful on my skills as a software engineer when I leave Stanford. 2nd year MSCS in AI/system.', 'While this course can be fairly time intensive especially in the first few weeks, the material really comes together in the end, and overall the course is a positive experience! Office hours are extremely helpful for understanding the material.', 'One of my favorite courses at Stanford so far. I really like how the class focused on application and also learning through the homeworks rather than through exams, I felt that I learned a lot more this way', 'This class is a systems and theory class. It is less about implementation, although the course description implies otherwise.', 'Take it! This is the only course of its kind in the Stanford CS department', \"Really interesting class at the intersection of theory and systems, which means it bounces back and forth between proof-writing assignments and big coding assignments. Sometimes the assignment releases were delayed, but that's because Will re-wrote a huge portion of the assignments to improve from the previous offering and fit more closely with what we were learning--he's an excellent instructor who cares a whole lot about the course.\", 'The best and most valuable computer science course I have taken at Stanford', \"the course isn't the easiest, especially if you don't have a ton of exposure to some the kinds of math that show up, but Will is one of the best lecturers at Stanford, hands down. You learn a ton and he's an incredible resource all around.\", 'This class was very challenging but very rewarding-- Will is a wonderful, enthusiastic lecturer, and the assignments were interesting', 'It is still getting developed- there were homework typos and some delays, but overall a great course.', \"It's a lot of work and not very fun.\", 'Take it, you will learn so much, but be prepared for the workload! The first two assignments were by far the heaviest of the quarter, but the programming assignments and theorem proving final were a lot of fun.', \"A lot of breadth but not a lot of depth. You'll be exposed to a lot of new concepts and programming languages which you can further explore if you're interested.\", 'This quarter (Fall 19-20) Will made the class significantly more time-consuming at the start (I think) in comparison to the previous offering. I did not expect to be spending 110-like amounts of hours for some of the weeks.  Still, Will taught the class well, with great lecture notes in a way that got the content across, with assignments that actually relate to lectures. So if you have time, down to learn a new perspective on programming (from imperative languages like python, c, etc.), go for it!', \"It's probably a lot harder than you think it will be. That being said, it's a completely different way of thinking about CS, and it's really cool!\", \"Would not recommend this course unless you have a fairly extensive background in math, theory (PHIL 150, CS 157), or have a lot of time on your hands to always be in office hours.  I had the listed prerequisites for the class, yet I constantly felt like I was extremely unprepared.  Don't use other quarter evaluations to determine if you should take this class, it has been completely redone (even though the instructor is the same).  If you do choose to take this class and you get stuck, Will is a nice person and he tries to make time for students, so you might consider reaching out to him for one-on-one help.  Also if you're stuck on assignments, sometimes the order of the parts of an assignment will not be the most intuitive for you personally, so try solving the problems in another order.\", \"Think twice if the first lecture (and Will's passion) lured you into taking this class. For Autumn 2019, the time commitment stats from the previous quarter was a complete lie, so don't trust the stats too much. I have heard multiple students comparing the workload of this class to CS110 (or worse than it). Otherwise, Will and the course staff are very nice and helpful!\", \"This class significantly ramped up compared to every previous iteration. The first two assignments took around 30 hours to complete and many people dropped because the instruction staff didn't really warn people. Every subsequent assignment has been tough but manageable, and they all help you learn a ton. Just be ready to put in the work, but it's worth it.\", 'course can be fun but is somewhat time consuming in random weeks', \"An amazing course! Will is a fantastic lecturer and you should not miss the opportunity to learn about programming language design and the beauty of functional languages. The course gets heavily revamped every quarter, so your mileage may vary, but it is still structured very well regardless and introduces a ton of fascinating and industry-applicable material, whether you are interested in AI, systems, or even full-stack. I would say this is one of the best courses I've taken and will revolutionize the way you think about software development! You'll never get a null pointer exception, segfault, or memory leak ever again.\", \"This class is ever shifting, so while old comments are a decent litmus test, the difficulty of the class may vary wildly. Will is always trying to improve it - but sometimes he swings too far in the difficulty direction. It was very difficult this quarter and had a HUGE workload. However, we all learned a ton, so make of that what you will! Will is an excellent instructor, so if you're at all interested, it's worth the chance - just be wary of the workload.\", 'This is a horrible course. Worst class I have taken at Stanford. The assignment is due on Wednesday and almost all of them have several bugs till Monday. Lecture is essentially useless. Office hours are understaffed. The remote final was not entirely released till 5 days before due date. DO NOT TAKE IT', \"Difficult course, but one of my favorites at Stanford (definitely a change of pace from my AI track courses). Will is a very enthusiastic lecturer and encourages students to learn and attend office hours. His teaching style and enthusiasm is how I managed to stick with going to lecture all quarter (I typically don't).  The course is still being developed so sometimes the assignments have bugs in them, but the teaching staff work hard to get them all ironed out. I'd highly recommend taking this course if you have an otherwise light quarter (weekly psets are time consuming) or might be interested in this topic.\", 'The first half of the course is hard because of the theory, and the second half is hard because of the programming assignments. The assignments dominated all of my time for the quarter. Course staff is friendly but OH can be busy and stressful. The lectures are not super interesting unless you are really excited to hear about parts of the lambda calculus and Rust in extreme detail.', \"Definitely recommend this class if you're interested in learning more about how advances in programming languages can help engineers write safer and better code\", \"This is a really good course. I took it basically on a dare -- without having taken CS110 and with relatively limited programming experience outside of Python and C, and pretty basic knowledge of CS theory. As a result, I think I definitely had to put in more work than the average student. That said, it was an absolutely fascinating (albeit sometimes intense) trip through a field I had known nothing about, and I'm really glad I took it.   The weekly homework assignments were often pretty time-consuming for me, and it would have been nice to get a break here or there. All the same, a great course!\", \"This class is really hard. Period. Take it with plenty of time to work on the assignments, because they'll require that you go back to lecture notes and fix misconceptions. But do take it! The class is very rewarding and you learn a ton. Very few times in my five years at Stanford I've seen a professor that cares as much and will put as much effort into their class (it'll still be hard though).\", \"It's fairly interesting material. Don't be put off by the beginning work.\", 'Will is a great instructor - very passionate and enthusiastic, and good at teaching things in a way that students can understand. My only complaint was that many assignments were remade on the fly, which led to frequent bugs in assignments and TAs vaguely stating that things would be fixed/updates \"soon\" or \"ASAP\" and then not actually fixing/updating for several days.', 'Good class, take', \"It's fairly interesting, but a lot of it was overly pedantic for my taste. Much of the class is taking a pretty simple concept, then finding a way to describe and formalize it to make it seem complex. I guess formal definitions of languages are useful if you want to actually prove your systems are correct, but for most software engineers I really don't see it being useful in the near future. Being able to use a more expressive type system like Rust's is useful, particularly with respect to memory management, type state, and session state, but even Rust felt a bit half baked to me. There are things that seems like they should be really simple yet require hacks in unsafe code. The docs are littered with places where the Rust spec is not fully defined. Will's enthusiasm is fantastic though, and that always got me through the lecture even when I wasn't in love with the material!\", 'I did not know this was a systems class before taking it but I think I still did okay. One of my favorite classes and probably one of the best taught in the CS department. It can be a little difficult at times, but you want to make sure you go to office hours because the teaching staff is amazing and you can work through problems with your peers.  Will cares a lot about teaching and is incredibly knowledgeable, empathetic, and wants you to really know the material by the end of it. 10/10', 'Fantastic course! I wish there were more like this at Stanford. The first couple of weeks are pretty theory-heavy but as the course goes on it becomes more practical and I learnt a lot. Workload is consistent but manageable. Will is a great lecturer that cares a lot about his students and readily takes on feedback.', \"there's nice material in this course. it seems to be evolving a lot so the courseload may vary from previous iterations. homeworks took longer than expected, probably due to initial friction from not knowing a language / formalism\"]}, {'course_codes': ['CS 242'], 'course_id': 105761, 'title': 'Programming Languages', 'reviews': ['Interesting material and some cool projects to implement. However, a few of the assignment specs were not that helpful and I needed to go to office hours to properly understand the problems. That was especially the case for the final project.', 'Take this course if you are interested in the theoretical underpinnings of what goes into developing a programming language. Very helpful for learning the functional programming paradigm.', 'The content is interesting, but the course was better organized when Will Crichton taught it, labs, lectures, notes, and homeworks included. Some of the homeworks in this course were cool, but a lot of it felt spoon-fed or not particularly helpful for deepening or reinforcing understanding. There seemed to be a focus on how things work instead of why. This may be attributed to the intention of creating a generally lower-intensity course. The fun things were: problems in lambda calculus/ski calculus, the coroutines/continuations homework, and the final project.', 'The homeworks were scoped to be around 10 hours when I took the class but the variance was closer to 10-20 hours. The Rust project was very long (you can choose from multiple projects) -- say ~30-40 hours -- but was rewarding. New instructor and new homeworks / projects for this quarter, so likely to change & improve.', 'Interesting materials, but the lectures sometimes felt poorly-paced. The assignments were useful, but the specs were often confusing, and the quality of help from the TAs was hugely inconsistent. The final project was useful and interesting, but again the difficulty of the three choices for our projects was very skewed.', \"If you're interested in the theory behind functional programming, take this course. If you're interested in how fundamental problems in programming languages are implemented in real languages, I would not recommend this course. The majority of the homeworks were built around lambda calculus variants, which  are theoretically interesting but not particularly practical. There is a rust assignment that was cool, but the majority of the course was not about commonly used languages. In the end I found the course too theoretical and only very loosely applicable.\", '> Alex is pretty awesome! Cares a *lot* about students and always happy to take questions.nnnn> Overall thread of class is pretty unclear, though individual lectures are very coherent.nnnn> Pi calculus assignment is extremely challenging. Get on that one ASAP!', 'This is a fantastic course that taught me quite a lot about thinking differently about programming languages. The quality of instruction was fantastic! Consider taking this course!', 'Pretty well-taught and engaging material if you have any interest in the implementation of languages or programming languages theory -- the course definitely tends to the theoretical side. Assignments were not too challenging, but take advantage of office hours and start on the final project early!', \"This course is so fun! It does not require too much work, and you get to play around with really interesting ideas in programming languages. I definitely recommend it if you've ever been interested in programming language theory.\", \"This course was a bit of a letdown. I came in with high expectations, but they quickly fell flat as soon as I realized that the class was focused more on theory than on systems. I stopped going to lecture at the beginning of week 3 because of how confusing they were. Instead, I would look at the week's pset to figure out what I needed to learn; read Wikipedia, blog posts, and research papers for a few hours until I felt like I had a solid grasp of the material; and then complete the pset. On the one hand, it was frustrating that lectures were useless to me. On the other hand, I realized that I can learn difficult material on my own. And, in the end, I learned Rust, which was one of the reasons I was interested in taking the class in the first place. Overall, not the worst class in the world, but most definitely not the best class either.\", \"This is one of the most interesting courses I've had the opportunity to take at Stanford.nnIt's truly wonderful to learn programming paradigms and language features in lecture, then immediately be able to interact with those concepts in the assignments.nnThe assignments do a great job of ensuring you understand the material and the final project is extremely interesting and enjoyable.\", 'Some of the assignments were fun, but the project was a bit disorganized and took significantly longer than the assignments. The class definitely was not as practical as I was hoping it would be.', \"It's an interesting class looking at programming languages through an academic lens. The benefit is that you get a whole new way of looking at languages: lambda calculi, object calculi, typed vs untyped, etc. The issue is that for every homework it felt like I had missed half of the lectures.... even though I had poured over the details. I constantly had the feeling that I had to fill in about half of the course myself to do the homeworks. A lot of important information is communicated over Edstem rather than in the homework itself. Also, the Rust final project is a HUGE step up from the Rust homework, and the brief is poorly written and confusing. I hope the project brief will be revised in future.\", \"This class is pretty hard, the final project especially. Not ideal with a tough course load. You'll def improve as a programmer from the homeworks though.\", \"It's a fine course with some interesting things here and there but by and large quite tedious. You spend a lot of time doing the same recursive translation or type checking logic for different simple languages. It's good for insight the first time but pretty pointless to do it again and again. The final projects were kind of cool but definitely really long.nnnnIn terms of teaching, Prof. Aiken is well-intentioned and mostly okay but he could really benefit from working on his teaching process. For example, he needs to understand that you can't put big blocks of equations or maths working all at once on a slide and then just talk through them while highlighting random stuff. Either break the slides up line by line (see how Keith Schwartz does equations in slides) or work through them by hand live. You will catch a lot of the errors if you break up your presentation like this. Also space out your equations and don't use confusing variable names. I swear there was a slide where an equation had two plus symbols on a line and one of them was an operator in the language and the other was mathematical plus and there was literally no indication that those were supposed to be different until someone asked. Just use colour/bold/font or one of 6 other modalities to clarify things more.\", 'Most lectures are like, \"here's a concept; here's how it's formalized with lambda calculus; let's do some examples to feel it out.\" Aiken teaches the material solidly. Most homeworks are like, \"here's some funky language that formalizes a concept; make it do a thing.\" Overall, things are very fun, brain-teaser-y, and satisfying to complete, but it didn't feel dramatically deep or explicitly useful to a lot of subdisciplines of CS.', \"Definitely a great option for a systems PhD breadth class if you're not that interested in systems. Homeworks aren't too much work and are pretty interesting.\", \"Fun class! I think the class is changing a little bit, but we went over different simple programming languages and theory associated with them. Good background just for generally understanding type checking and early programming language theory. Didn't write in as many new languages as expected, as I had heard from previous versions of the class, but it was still a fun exercise to parse through syntax.\", 'Great course!', 'Great way to learn about non mainstream programming languages and techniques.', \"Probably a good class if you are interested in the area/potentially doing research in the area. The fact that we are introduced to the Rust programming language likely has practical benefits too. As a PhD student taking it for a breadth requirement I think it's decently hard work but manageable.\", 'Good course on underlying theory for programming languages', 'This course was good exposure but the theoretical side of this content felt kind of loose and the projects felt like a scramble to understand what was going on.', \"This course was really unfamiliar to me starting out, so most of the basic concepts were really hard to understand. It will probably be substantially easier for you if you already know lambda calculus, typechecking, etc. The problem sets were extremely hard to understand at first, and were a pretty heavy workload because there was a new one each week with no break. The office hours help for the problem sets, but they are still very challenging and it's hard to get all of your questions answered since office hours are fairly crowded. The lectures were all interesting, understandable, and organized/well-explained, but there was just so much new material (and difficult notation) that understanding the lectures was not enough to feel confident about the material. The projects were interesting and cool, but also a very heavy workload where sometimes understanding is just assumed for things that are completely new to the students.\", 'Take advantage of office hours and the forum. Jason was really helpful in office hours and made some of the abstract concepts a lot easier to understand.', \"Take it if the theoretical aspects of programming languages excites you. For example, if you're passionate about getting to learn more about the type system, or program in purely functional ways\", \"If you're interested in programming languages, take this course. However, be advised that this course is very heavily focused on the theory of programming languages (not half theory and half systems as the description implies). The majority of the lectures were working through various proofs of various properties of types and different calculi; it spent very little time working with real-world programming languages. The assignments were in Python, Racket, and Rust, but that was incidental\u2014we were told to read a handout that covered the basics of each language before starting the assignments, but otherwise there was no real explanation of the up or downsides of each. Some of the assignments were also written ambiguously or under-specified, which led to issues when trying to figure out what they meant.\", 'It's an interesting introduction to programming paradigms outside the most common languages. The material is a bit dryly presented in class, but for the most part the programming assignments are pretty easy. The \"final project\" is basically just a big programming assigment.']}]\nmain = Main(courses_to_take = courses_to_take_1, student_info_details = student_info)\nmain.result = {'success': True, 'transaction_id': UUID('97281e4a-5155-4eff-b85a-7a2ef958297a')}\ncourse = Course(course_name = 'CS 148', grade_type = 'Credit/No Credit', course_num_units = 3)\ncourse_0 = Course(course_name = 'CS 148', grade_type = 'Credit/No Credit', course_num_units = 3)\ncourse_2 = Course(course_num_units = 3)\ncourses_to_take_1 = CoursesToTake(course_0_details = course, course_1_details = course_3, more_courses_2 = False, more_courses_3 = False, confirm = True)\nstudent_info = StudentInfo(student_name = 'Aakash Mishra', student_id = '06375727', student_email_address = 'aamishra@stanford.edu', is_international_student = False)\ncourse_3 = Course(course_name = 'CS 242', grade_type = 'Credit/No Credit', course_num_units = 3)\ncourse_4 = Course(course_name = 'CS 242', grade_type = 'Credit/No Credit', course_num_units = 3)\ncourse_5 = Course(course_name = 'CS 242', grade_type = 'Credit/No Credit', course_num_units = 3)\n", "system_action": ["AskField(main, confirm_submission, Ask the student to confirm all the fields they want to submit)"], "user_target_sp": "courses_to_take_1.confirm = True\nmain.courses_to_take = courses_to_take_1", "user_target": "courses_to_take_1.confirm = True\nmain.courses_to_take = courses_to_take_1", "user_target_suql": ""}]